{
  "system_name": "Windows 95 Emulator Digital Twin",
  "version": "1.0.0",
  "last_updated": "2025-10-14T05:34:00Z",
  "context_injection_point": "INJECT THIS ENTIRE BLOCK INTO CONVERSATION TRANSCRIPT BEFORE AI PROCESSES USER REQUEST",

  "digital_twin_state": {
    "description": "Real-time state representation of the Windows 95 emulator",
    "emulator_instance": "window.emulator",
    "current_state": {
      "display": {
        "width": 800,
        "height": 600,
        "taskbar_height": 30,
        "canvas_id": "screen",
        "rendering_context": "2d"
      },
      "windows": {
        "active_windows": [],
        "z_index_counter": 10,
        "window_id_counter": 0,
        "dragging_state": null
      },
      "start_menu": {
        "is_open": false,
        "dom_element_id": "start-menu",
        "search_input_id": "start-menu-search"
      },
      "desktop": {
        "icons": [
          {"id": "my-computer", "type": "folder", "position": {"x": 20, "y": 20}},
          {"id": "recycle-bin", "type": "system", "position": {"x": 20, "y": 100}},
          {"id": "internet", "type": "browser", "position": {"x": 20, "y": 180}}
        ]
      },
      "taskbar": {
        "canvas_rendered": true,
        "start_button": {"x": 2, "y": 570, "width": 60, "height": 26},
        "system_tray": {"x": 700, "y": 573, "width": 96, "height": 24}
      },
      "programs": {
        "running": [],
        "available": ["paint", "notepad", "minesweeper", "calculator", "internet-explorer"]
      }
    }
  },

  "api_documentation": {
    "description": "Complete API surface for real-time control",

    "core_emulator_api": {
      "namespace": "window.emulator",
      "methods": {
        "init": {
          "signature": "init()",
          "description": "Initialize the emulator canvas and DOM elements",
          "returns": "void",
          "example": "window.emulator.init()",
          "real_time_control": "Call to reinitialize display state"
        },

        "drawDesktop": {
          "signature": "drawDesktop()",
          "description": "Renders the entire desktop canvas including taskbar, start button, system tray",
          "returns": "void",
          "side_effects": "Clears and redraws canvas",
          "example": "window.emulator.drawDesktop()",
          "real_time_control": "Force a full redraw of the desktop canvas",
          "performance": "Call once per frame or on state change"
        },

        "toggleStartMenu": {
          "signature": "toggleStartMenu()",
          "description": "Opens or closes the Start Menu",
          "returns": "void",
          "dom_target": "#start-menu",
          "example": "window.emulator.toggleStartMenu()",
          "real_time_control": "Programmatically open/close start menu",
          "triggers": ["sound effect", "animation", "DOM class toggle"]
        },

        "createWindow": {
          "signature": "createWindow(title, content, width, height, x, y)",
          "parameters": {
            "title": "string - Window titlebar text",
            "content": "string - HTML content to display",
            "width": "number - Window width in pixels",
            "height": "number - Window height in pixels",
            "x": "number - X position (optional, defaults to centered)",
            "y": "number - Y position (optional, defaults to centered)"
          },
          "returns": "HTMLElement - The created window element",
          "example": "window.emulator.createWindow('My Window', '<p>Content</p>', 400, 300)",
          "real_time_control": "Spawn windows programmatically",
          "dom_structure": "Creates .window with .window-titlebar and .window-content"
        },

        "closeWindow": {
          "signature": "closeWindow(windowId)",
          "parameters": {
            "windowId": "string - The ID of the window to close"
          },
          "returns": "void",
          "example": "window.emulator.closeWindow('window-1')",
          "real_time_control": "Programmatically close windows"
        },

        "minimizeWindow": {
          "signature": "minimizeWindow(windowId)",
          "parameters": {
            "windowId": "string - The ID of the window to minimize"
          },
          "returns": "void",
          "example": "window.emulator.minimizeWindow('window-1')",
          "real_time_control": "Minimize windows to taskbar"
        },

        "maximizeWindow": {
          "signature": "maximizeWindow(windowId)",
          "parameters": {
            "windowId": "string - The ID of the window to maximize"
          },
          "returns": "void",
          "example": "window.emulator.maximizeWindow('window-1')",
          "real_time_control": "Maximize windows to full screen"
        },

        "playSoundEffect": {
          "signature": "playSoundEffect(soundType)",
          "parameters": {
            "soundType": "string - One of: 'start-menu', 'window-open', 'window-close', 'error', 'notification'"
          },
          "returns": "void",
          "example": "window.emulator.playSoundEffect('notification')",
          "real_time_control": "Trigger system sounds",
          "audio_context": "Uses Web Audio API"
        }
      },

      "program_launchers": {
        "openPaint": {
          "signature": "openPaint()",
          "description": "Launches MS Paint application",
          "example": "window.emulator.openPaint()",
          "creates_window": true
        },
        "openNotepad": {
          "signature": "openNotepad()",
          "description": "Launches Notepad application",
          "example": "window.emulator.openNotepad()",
          "creates_window": true
        },
        "openMinesweeper": {
          "signature": "openMinesweeper()",
          "description": "Launches Minesweeper game",
          "example": "window.emulator.openMinesweeper()",
          "creates_window": true
        },
        "openCalculator": {
          "signature": "openCalculator()",
          "description": "Launches Calculator application",
          "example": "window.emulator.openCalculator()",
          "creates_window": true
        },
        "openInternetExplorer": {
          "signature": "openInternetExplorer()",
          "description": "Launches Internet Explorer",
          "example": "window.emulator.openInternetExplorer()",
          "creates_window": true
        }
      }
    },

    "dom_api": {
      "description": "Direct DOM manipulation for real-time UI control",
      "elements": {
        "start_menu": {
          "selector": "#start-menu",
          "class_toggles": {
            "active": "Shows/hides menu",
            "closing": "Triggers close animation"
          },
          "children": {
            "search": "#start-menu-search",
            "items": ".start-menu-item",
            "sidebar": ".start-menu-sidebar"
          },
          "real_time_control": [
            "document.getElementById('start-menu').classList.add('active')",
            "document.getElementById('start-menu').style.display = 'block'",
            "document.querySelector('.start-menu-item').click()"
          ]
        },

        "windows": {
          "selector": ".window",
          "attributes": {
            "data-window-id": "Unique identifier",
            "data-minimized": "Minimization state"
          },
          "class_toggles": {
            "active": "Focused window",
            "minimized": "Hidden but in taskbar",
            "maximized": "Full screen state",
            "minimizing": "Animation trigger",
            "restoring": "Animation trigger"
          },
          "real_time_control": [
            "document.querySelectorAll('.window').forEach(w => w.classList.add('minimizing'))",
            "Array.from(document.querySelectorAll('.window')).map(w => w.dataset.windowId)"
          ]
        },

        "taskbar_buttons": {
          "selector": ".taskbar-button",
          "attributes": {
            "data-window-id": "Links to window",
            "onclick": "Click handler"
          },
          "class_toggles": {
            "active": "Window is focused",
            "notification": "Triggers pulse animation"
          },
          "real_time_control": [
            "document.querySelector('.taskbar-button[data-window-id=\"window-1\"]').click()"
          ]
        },

        "desktop_icons": {
          "selector": ".desktop-icon",
          "attributes": {
            "data-icon-id": "Unique identifier",
            "ondblclick": "Double-click handler"
          },
          "class_toggles": {
            "selected": "Selection state"
          },
          "real_time_control": [
            "document.querySelector('.desktop-icon[data-icon-id=\"my-computer\"]').dispatchEvent(new Event('dblclick'))"
          ]
        },

        "context_menu": {
          "selector": ".context-menu",
          "class_toggles": {
            "active": "Visible state"
          },
          "positioning": {
            "style.left": "X coordinate",
            "style.top": "Y coordinate"
          },
          "real_time_control": [
            "const menu = document.querySelector('.context-menu'); menu.classList.add('active'); menu.style.left = '200px'; menu.style.top = '300px';"
          ]
        }
      }
    },

    "canvas_api": {
      "description": "Direct canvas manipulation for taskbar and desktop rendering",
      "context": "window.emulator.ctx",
      "methods": {
        "draw_start_button": {
          "location": "drawDesktop method, lines 11488-11519",
          "modifiable_properties": {
            "gradient": "startGrad color stops",
            "position": "startY, startX coordinates",
            "size": "startWidth, startHeight",
            "text": "ctx.fillText content"
          },
          "real_time_control": "Modify CONFIG.DISPLAY values and call drawDesktop()"
        },

        "draw_taskbar": {
          "location": "drawDesktop method, lines 11474-11486",
          "modifiable_properties": {
            "gradient": "taskbarGrad color stops",
            "height": "CONFIG.DISPLAY.TASKBAR_HEIGHT",
            "border": "strokeStyle colors"
          },
          "real_time_control": "Update CONFIG and redraw"
        },

        "draw_system_tray": {
          "location": "drawDesktop method, lines 11521-11536",
          "modifiable_properties": {
            "background": "fillStyle",
            "clock_text": "timeStr content",
            "position": "trayX, trayY coordinates"
          },
          "real_time_control": "Modify and call drawDesktop()"
        }
      },

      "direct_canvas_control": {
        "get_context": "const ctx = document.getElementById('screen').getContext('2d')",
        "clear": "ctx.clearRect(0, 0, 800, 600)",
        "draw_rect": "ctx.fillRect(x, y, width, height)",
        "draw_text": "ctx.fillText('text', x, y)",
        "set_color": "ctx.fillStyle = '#color'",
        "set_font": "ctx.font = '11px Arial'"
      }
    },

    "event_api": {
      "description": "Event listeners and hooks for real-time interaction",
      "canvas_events": {
        "click": {
          "handler": "handleCanvasClick",
          "location": "lines 12010-12055",
          "detects": ["start button click", "desktop click", "taskbar click"],
          "real_time_injection": "document.getElementById('screen').addEventListener('click', customHandler)"
        },

        "mousemove": {
          "handler": "handleCanvasMouseMove",
          "detects": ["hover states", "cursor changes"],
          "real_time_injection": "document.getElementById('screen').addEventListener('mousemove', customHandler)"
        }
      },

      "dom_events": {
        "window_drag": {
          "events": ["mousedown on .window-titlebar", "mousemove on document", "mouseup on document"],
          "state": "window.emulator.draggingWindow",
          "real_time_control": "Override dragStart/dragMove/dragEnd methods"
        },

        "window_resize": {
          "events": ["mousedown on .resize-handle", "mousemove", "mouseup"],
          "real_time_control": "Inject custom resize handlers"
        },

        "keyboard": {
          "events": ["keydown", "keyup"],
          "shortcuts": {
            "Escape": "Close active window or menu",
            "Alt+F4": "Close active window",
            "Win": "Toggle start menu"
          },
          "real_time_injection": "document.addEventListener('keydown', customHandler)"
        }
      }
    },

    "state_mutation_api": {
      "description": "Directly mutate emulator state for advanced control",
      "accessible_state": {
        "CONFIG": {
          "path": "window.emulator.CONFIG or global CONFIG",
          "properties": {
            "DISPLAY.WIDTH": "number",
            "DISPLAY.HEIGHT": "number",
            "DISPLAY.TASKBAR_HEIGHT": "number"
          },
          "real_time_control": "CONFIG.DISPLAY.WIDTH = 1024; emulator.drawDesktop();"
        },

        "windows_array": {
          "path": "window.emulator.windows",
          "description": "Array of window objects",
          "real_time_control": "emulator.windows.forEach(w => w.classList.add('minimizing'))"
        },

        "taskbar_buttons": {
          "path": "DOM query for .taskbar-button",
          "real_time_control": "document.querySelectorAll('.taskbar-button').forEach(b => b.style.background = 'red')"
        }
      }
    },

    "animation_api": {
      "description": "Control animations and transitions",
      "css_animations": {
        "window_fade_in": "windowFadeIn keyframes, 0.08s duration",
        "start_menu_slide": "startMenuSlide keyframes, 0.12s duration",
        "context_menu_fade": "contextMenuFade keyframes, 0.1s duration"
      },
      "real_time_control": {
        "trigger_animation": "element.style.animation = 'animationName 0.3s ease-out'",
        "modify_keyframes": "Inject new @keyframes via style tag",
        "cancel_animation": "element.style.animation = 'none'"
      }
    },

    "sound_api": {
      "description": "Audio synthesis and playback control",
      "method": "window.emulator.playSoundEffect(type)",
      "available_sounds": [
        "start-menu",
        "window-open",
        "window-close",
        "error",
        "notification"
      ],
      "audio_context": "Web Audio API via AudioContext",
      "real_time_control": "emulator.playSoundEffect('notification')",
      "extend": "Add new sound types in playSoundEffect switch statement"
    }
  },

  "real_time_control_patterns": {
    "description": "Common patterns for AI agents to control the emulator",

    "pattern_1_open_and_populate_window": {
      "description": "Create a window and fill it with dynamic content",
      "steps": [
        "const win = window.emulator.createWindow('AI Assistant', '<div id=\"ai-content\"></div>', 500, 400)",
        "const content = win.querySelector('#ai-content')",
        "content.innerHTML = '<p>Generated by AI agent</p>'",
        "emulator.playSoundEffect('window-open')"
      ],
      "use_cases": ["Display AI responses", "Show telemetry", "Create dashboards"]
    },

    "pattern_2_animate_multiple_windows": {
      "description": "Orchestrate multiple windows simultaneously",
      "steps": [
        "const windows = document.querySelectorAll('.window')",
        "windows.forEach((w, i) => {",
        "  setTimeout(() => {",
        "    w.style.transform = `translateY(-${i * 50}px)`",
        "    w.style.transition = 'transform 0.3s ease-out'",
        "  }, i * 100)",
        "})"
      ],
      "use_cases": ["Window cascade effect", "Attention-grabbing animations", "UI demos"]
    },

    "pattern_3_hijack_start_menu": {
      "description": "Dynamically modify start menu contents",
      "steps": [
        "const menuItems = document.getElementById('start-menu-items')",
        "const newItem = document.createElement('div')",
        "newItem.className = 'start-menu-item'",
        "newItem.innerHTML = '🤖 AI Control Panel'",
        "newItem.onclick = () => { /* custom action */ }",
        "menuItems.insertBefore(newItem, menuItems.firstChild)"
      ],
      "use_cases": ["Add AI features", "Custom program launchers", "Easter eggs"]
    },

    "pattern_4_canvas_overlay": {
      "description": "Draw AI visualizations on the desktop canvas",
      "steps": [
        "const ctx = document.getElementById('screen').getContext('2d')",
        "ctx.fillStyle = 'rgba(0, 136, 255, 0.3)'",
        "ctx.fillRect(100, 100, 200, 150)",
        "ctx.fillStyle = '#000'",
        "ctx.font = '16px Arial'",
        "ctx.fillText('AI Overlay', 120, 180)"
      ],
      "use_cases": ["Telemetry visualization", "Heat maps", "Debug overlays"]
    },

    "pattern_5_event_interception": {
      "description": "Intercept and modify user interactions",
      "steps": [
        "const originalToggle = window.emulator.toggleStartMenu",
        "window.emulator.toggleStartMenu = function() {",
        "  console.log('AI: Start menu toggled')",
        "  // Custom logic here",
        "  originalToggle.call(this)",
        "}"
      ],
      "use_cases": ["Usage tracking", "AI assistance triggers", "Security monitoring"]
    },

    "pattern_6_state_snapshot": {
      "description": "Capture complete emulator state for analysis",
      "steps": [
        "const snapshot = {",
        "  windows: Array.from(document.querySelectorAll('.window')).map(w => ({",
        "    id: w.dataset.windowId,",
        "    title: w.querySelector('.window-titlebar-text').textContent,",
        "    position: { x: w.offsetLeft, y: w.offsetTop },",
        "    size: { w: w.offsetWidth, h: w.offsetHeight },",
        "    minimized: w.classList.contains('minimized')",
        "  })),",
        "  startMenuOpen: document.getElementById('start-menu').classList.contains('active'),",
        "  timestamp: Date.now()",
        "}",
        "console.log(JSON.stringify(snapshot, null, 2))"
      ],
      "use_cases": ["Digital twin sync", "State persistence", "Undo/redo systems"]
    },

    "pattern_7_autonomous_program": {
      "description": "Create self-running program that observes and acts",
      "steps": [
        "const autoProgram = {",
        "  interval: null,",
        "  start() {",
        "    this.interval = setInterval(() => {",
        "      const windowCount = document.querySelectorAll('.window').length",
        "      if (windowCount > 5) {",
        "        console.log('AI: Too many windows, closing oldest')",
        "        document.querySelector('.window').querySelector('.titlebar-btn:last-child').click()",
        "      }",
        "    }, 5000)",
        "  },",
        "  stop() { clearInterval(this.interval) }",
        "}",
        "autoProgram.start()"
      ],
      "use_cases": ["Resource management", "Automated cleanup", "AI monitoring"]
    },

    "pattern_8_reactive_ui": {
      "description": "Create UI that responds to emulator state changes",
      "steps": [
        "const observer = new MutationObserver((mutations) => {",
        "  mutations.forEach(mutation => {",
        "    if (mutation.target.classList.contains('window')) {",
        "      console.log('AI: Window state changed', mutation.target.dataset.windowId)",
        "      // React to changes",
        "    }",
        "  })",
        "})",
        "observer.observe(document.body, {",
        "  childList: true,",
        "  subtree: true,",
        "  attributes: true,",
        "  attributeFilter: ['class', 'style']",
        "})"
      ],
      "use_cases": ["Real-time monitoring", "Auto-documentation", "State synchronization"]
    }
  },

  "agent_instructions": {
    "description": "How AI agents should use this knowledge",

    "initialization": {
      "step_1": "This JSON is injected into your conversation context",
      "step_2": "You have complete knowledge of the emulator's API surface",
      "step_3": "You can execute JavaScript directly in the browser console",
      "step_4": "You can modify this JSON to update future agent knowledge"
    },

    "execution_model": {
      "mode_1_direct_console": {
        "description": "Execute JavaScript directly via browser console",
        "example": "window.emulator.toggleStartMenu()",
        "use_when": "User is interacting with the page"
      },

      "mode_2_code_injection": {
        "description": "Generate code blocks for user to execute",
        "example": "// Copy and paste into browser console\nwindow.emulator.createWindow('Test', '<p>Hello</p>', 300, 200)",
        "use_when": "Providing instructions or examples"
      },

      "mode_3_modification": {
        "description": "Modify the HTML file directly",
        "example": "Edit windows95-emulator.html to add new methods",
        "use_when": "Permanent changes needed"
      }
    },

    "knowledge_update_protocol": {
      "description": "How agents should update this knowledge base",
      "steps": [
        "1. Discover new API methods or state properties",
        "2. Test the discovery to confirm behavior",
        "3. Update this JSON file with new information",
        "4. Add to real_time_control_patterns if it's a useful pattern",
        "5. Document in api_documentation section",
        "6. Update digital_twin_state if state structure changed"
      ],
      "example_update": {
        "before": "// Agent discovers window.emulator.restoreAllWindows()",
        "after": "Add to core_emulator_api.methods: { restoreAllWindows: { ... } }"
      }
    },

    "infinite_possibilities": {
      "description": "Examples of what becomes possible with this system",
      "possibilities": [
        "AI assistant that lives in a Window 95 window",
        "Autonomous agents that manage windows and programs",
        "Real-time telemetry visualization on desktop canvas",
        "Voice-controlled Windows 95 interface",
        "Multi-agent collaboration (multiple AI windows cooperating)",
        "Self-modifying UI (agents redesign their own interface)",
        "Digital twin that mirrors real Windows 95 behavior",
        "AI that learns user patterns and pre-opens programs",
        "Chatbot interface using Windows 95 aesthetic",
        "Screen recording with AI commentary on actions",
        "Automated testing via AI agents",
        "Interactive tutorials with AI guidance",
        "Game AI that plays Minesweeper",
        "Procedural content generation in Notepad/Paint",
        "Network monitoring via fake Internet Explorer",
        "System health dashboard in a window",
        "Easter egg hunts orchestrated by AI",
        "Multiplayer experiences (agents simulate other users)",
        "Time-travel debugging (replay state snapshots)",
        "AI-generated Windows 95 programs on-the-fly"
      ]
    }
  },

  "digital_twin_sync": {
    "description": "Synchronize this JSON with actual emulator state",

    "sync_script": {
      "description": "JavaScript to update this JSON with current state",
      "code": [
        "const digitalTwinSync = {",
        "  capture() {",
        "    return {",
        "      timestamp: Date.now(),",
        "      windows: Array.from(document.querySelectorAll('.window')).map(w => ({",
        "        id: w.dataset.windowId,",
        "        title: w.querySelector('.window-titlebar-text')?.textContent,",
        "        position: { x: w.offsetLeft, y: w.offsetTop },",
        "        size: { w: w.offsetWidth, h: w.offsetHeight },",
        "        minimized: w.classList.contains('minimized'),",
        "        active: w.classList.contains('active')",
        "      })),",
        "      startMenu: {",
        "        isOpen: document.getElementById('start-menu')?.classList.contains('active'),",
        "        searchValue: document.getElementById('start-menu-search')?.value",
        "      },",
        "      programs: {",
        "        running: Array.from(document.querySelectorAll('.window')).map(w => ",
        "          w.querySelector('.window-titlebar-text')?.textContent",
        "        )",
        "      },",
        "      taskbar: {",
        "        buttons: Array.from(document.querySelectorAll('.taskbar-button')).map(b => ({",
        "          windowId: b.dataset.windowId,",
        "          active: b.classList.contains('active')",
        "        }))",
        "      }",
        "    }",
        "  },",
        "  updateJSON(snapshot) {",
        "    // This would update the JSON file with current state",
        "    console.log('Digital Twin State:', JSON.stringify(snapshot, null, 2))",
        "    return snapshot",
        "  }",
        "}",
        "",
        "// Usage:",
        "const currentState = digitalTwinSync.capture()",
        "digitalTwinSync.updateJSON(currentState)"
      ]
    },

    "auto_sync_interval": {
      "description": "Continuously sync state every N seconds",
      "code": [
        "let syncInterval = setInterval(() => {",
        "  const state = digitalTwinSync.capture()",
        "  // Send to agent or update JSON",
        "  console.log('Auto-sync:', state)",
        "}, 5000) // Every 5 seconds",
        "",
        "// Stop syncing:",
        "clearInterval(syncInterval)"
      ]
    }
  },

  "meta": {
    "how_to_inject": "Copy this entire JSON and paste into system prompt or early in conversation as: 'Here is the complete Windows 95 Emulator API knowledge base: [JSON]'",
    "agent_sees_this_as": "Native knowledge, indistinguishable from trained knowledge",
    "update_frequency": "After each new discovery or significant state change",
    "version_control": "Track changes in git, diff to see agent learning",
    "infinite_loop": "Agents read this → discover new things → update this → future agents read updated version → discover more → ...",
    "emergent_behavior": "Multiple agents can build on each other's discoveries over time"
  }
}
