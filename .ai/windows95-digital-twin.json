{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "version": "1.0.0",
  "lastUpdated": "2025-10-14T05:34:00Z",
  "digitalTwinType": "windows95-emulator-system",

  "userDigitalTwin": {
    "profile": {
      "userId": "kody",
      "role": "developer",
      "expertise": ["local-first development", "game design", "UI/UX", "autonomous agents"],
      "workingStyle": "iterative, experimental, quality-focused",
      "preferences": {
        "interactionSpeed": "fast",
        "animationStyle": "game-like-polish",
        "feedbackLevel": "high",
        "soundEnabled": true,
        "autoSave": true,
        "themePreference": "authentic-win95-enhanced"
      },
      "timeZone": "America/Los_Angeles",
      "activeHours": {
        "start": "09:00",
        "end": "23:00"
      }
    },
    "behaviorPatterns": {
      "frequentActions": [
        "toggleStartMenu",
        "openPaint",
        "openNotepad",
        "createNewWindow"
      ],
      "sessionDuration": "45-120 minutes",
      "multiTaskingLevel": "high",
      "windowManagementStyle": "organized-cascade",
      "avgWindowsOpen": 3,
      "preferredPrograms": ["Paint", "Notepad", "Internet Explorer", "MS-DOS Prompt"]
    },
    "learningProfile": {
      "explorationStyle": "deep-dive",
      "documentationPreference": "code-examples-first",
      "errorTolerance": "high",
      "experimentationFrequency": "constant",
      "feedbackStyle": "concise-technical"
    },
    "contextHistory": {
      "recentProjects": [
        "Windows 95 AI Agent System",
        "Autonomous UI Enhancement",
        "Game UI Polish Implementation"
      ],
      "recentGoals": [
        "Implement autonomous Windows 95 polisher agent",
        "Create 8 different UI/UX strategy variations",
        "Build digital twin memory system"
      ],
      "currentFocus": "Creating AI-driven control layer for Windows 95 emulator"
    }
  },

  "systemCapabilities": {
    "emulatorCore": {
      "className": "Windows95Emulator",
      "instantiation": "const emulator = new Windows95Emulator();",
      "mainMethods": {
        "init": {
          "signature": "init()",
          "description": "Initialize the emulator and all subsystems",
          "returns": "void",
          "sideEffects": ["Creates canvas", "Initializes audio", "Sets up event listeners"],
          "example": "emulator.init();"
        },
        "drawDesktop": {
          "signature": "drawDesktop()",
          "description": "Render the entire desktop, taskbar, and icons on canvas",
          "returns": "void",
          "frequency": "~16ms (60fps when animating)",
          "example": "emulator.drawDesktop();"
        }
      }
    },

    "windowManagement": {
      "namespace": "emulator",
      "methods": {
        "createWindow": {
          "signature": "createWindow(title, content, x, y, width, height)",
          "parameters": {
            "title": "string - Window title text",
            "content": "string (HTML) - Window body content",
            "x": "number - X position in pixels",
            "y": "number - Y position in pixels",
            "width": "number - Window width in pixels",
            "height": "number - Window height in pixels"
          },
          "returns": "HTMLElement - The created window element",
          "example": "emulator.createWindow('My App', '<div>Content</div>', 100, 100, 400, 300);",
          "hooks": ["onWindowCreated", "onWindowFocus"],
          "aiUsage": "Use to spawn new windows programmatically. Can create infinite variations."
        },
        "closeWindow": {
          "signature": "closeWindow(windowElement)",
          "parameters": {
            "windowElement": "HTMLElement - The window to close"
          },
          "returns": "void",
          "example": "emulator.closeWindow(document.querySelector('.window'));",
          "aiUsage": "Clean up windows. Check if user wants to save before closing."
        },
        "minimizeWindow": {
          "signature": "minimizeWindow(windowElement)",
          "parameters": {
            "windowElement": "HTMLElement - The window to minimize"
          },
          "returns": "void",
          "sideEffects": ["Hides window", "Updates taskbar button state"],
          "example": "emulator.minimizeWindow(window);",
          "aiUsage": "Organize workspace by hiding inactive windows"
        },
        "maximizeWindow": {
          "signature": "maximizeWindow(windowElement)",
          "parameters": {
            "windowElement": "HTMLElement - The window to maximize"
          },
          "returns": "void",
          "example": "emulator.maximizeWindow(window);",
          "aiUsage": "Focus user attention on specific window"
        }
      },
      "stateQueries": {
        "getActiveWindow": {
          "signature": "getActiveWindow()",
          "returns": "HTMLElement|null",
          "example": "const active = emulator.getActiveWindow();",
          "aiUsage": "Determine context for AI actions"
        },
        "getAllWindows": {
          "signature": "document.querySelectorAll('.window')",
          "returns": "NodeList of window elements",
          "example": "const windows = document.querySelectorAll('.window');",
          "aiUsage": "Analyze current workspace state"
        }
      }
    },

    "menuSystem": {
      "namespace": "emulator",
      "methods": {
        "toggleStartMenu": {
          "signature": "toggleStartMenu()",
          "description": "Open or close the start menu",
          "returns": "void",
          "example": "emulator.toggleStartMenu();",
          "aiUsage": "Main entry point for navigation. AI can automate program launching."
        },
        "openContextMenu": {
          "signature": "openContextMenu(x, y, items)",
          "parameters": {
            "x": "number - X position",
            "y": "number - Y position",
            "items": "Array<{label: string, action: function}>"
          },
          "returns": "void",
          "example": "emulator.openContextMenu(100, 100, [{label: 'New', action: () => {}}]);",
          "aiUsage": "Create custom context menus for AI-driven actions"
        },
        "closeContextMenu": {
          "signature": "closeContextMenu()",
          "returns": "void",
          "example": "emulator.closeContextMenu();",
          "aiUsage": "Clean up after menu interactions"
        }
      }
    },

    "programLaunchers": {
      "namespace": "emulator",
      "methods": {
        "openPaint": {
          "signature": "openPaint()",
          "description": "Launch Paint application",
          "returns": "HTMLElement - Paint window",
          "features": ["Drawing canvas", "Color picker", "Tool selection"],
          "example": "emulator.openPaint();",
          "aiUsage": "AI can generate artwork or provide drawing tutorials"
        },
        "openNotepad": {
          "signature": "openNotepad(content = '')",
          "parameters": {
            "content": "string - Initial text content"
          },
          "description": "Launch Notepad application",
          "returns": "HTMLElement - Notepad window",
          "features": ["Text editing", "File operations", "Auto-save"],
          "example": "emulator.openNotepad('Hello World');",
          "aiUsage": "AI can pre-populate content, create notes, write code"
        },
        "openCalculator": {
          "signature": "openCalculator()",
          "description": "Launch Calculator application",
          "returns": "HTMLElement - Calculator window",
          "example": "emulator.openCalculator();",
          "aiUsage": "AI can perform calculations and show results"
        },
        "openInternetExplorer": {
          "signature": "openInternetExplorer(url = '')",
          "parameters": {
            "url": "string - Initial URL to load"
          },
          "description": "Launch Internet Explorer",
          "returns": "HTMLElement - Browser window",
          "example": "emulator.openInternetExplorer('https://example.com');",
          "aiUsage": "AI can navigate, scrape content, demonstrate web features"
        },
        "openMSDOS": {
          "signature": "openMSDOS()",
          "description": "Launch MS-DOS Prompt",
          "returns": "HTMLElement - Terminal window",
          "features": ["Command execution", "File system navigation", "Script running"],
          "example": "emulator.openMSDOS();",
          "aiUsage": "AI can execute commands, demonstrate CLI usage"
        },
        "openMediaPlayer": {
          "signature": "openMediaPlayer()",
          "description": "Launch Windows Media Player",
          "returns": "HTMLElement - Media player window",
          "example": "emulator.openMediaPlayer();",
          "aiUsage": "AI can control playback, create playlists"
        }
      }
    },

    "audioSystem": {
      "namespace": "emulator",
      "methods": {
        "playSoundEffect": {
          "signature": "playSoundEffect(soundName)",
          "parameters": {
            "soundName": "string - One of: 'start', 'error', 'notify', 'ui-hover', 'ui-click', 'ui-select'"
          },
          "description": "Play a system sound effect",
          "returns": "void",
          "example": "emulator.playSoundEffect('start');",
          "aiUsage": "Provide audio feedback for AI actions"
        }
      },
      "soundLibrary": {
        "start": "Windows startup sound",
        "error": "Error alert sound",
        "notify": "Notification chime",
        "ui-hover": "Subtle hover feedback",
        "ui-click": "Click confirmation",
        "ui-select": "Selection sound",
        "start-menu": "Start menu open sound"
      }
    },

    "desktopIcons": {
      "methods": {
        "createDesktopIcon": {
          "signature": "createDesktopIcon(name, iconEmoji, x, y, action)",
          "parameters": {
            "name": "string - Icon label",
            "iconEmoji": "string - Emoji or icon",
            "x": "number - X position",
            "y": "number - Y position",
            "action": "function - Click handler"
          },
          "returns": "HTMLElement - Icon element",
          "example": "createDesktopIcon('My App', '🚀', 20, 20, () => alert('Launched!'));",
          "aiUsage": "AI can dynamically create shortcuts based on user needs"
        }
      }
    },

    "canvasRendering": {
      "context": "this.ctx (CanvasRenderingContext2D)",
      "methods": {
        "drawStartButton": {
          "location": "lines 11488-11519 in drawDesktop()",
          "description": "Render the Start button on taskbar",
          "customizable": ["gradient", "text", "logo", "pressed state"],
          "aiUsage": "AI can customize button appearance dynamically"
        },
        "drawTaskbar": {
          "location": "lines 11474-11486 in drawDesktop()",
          "description": "Render the taskbar",
          "customizable": ["height", "gradient", "borders"],
          "aiUsage": "AI can theme the taskbar"
        },
        "drawSystemTray": {
          "location": "lines 11521-11536 in drawDesktop()",
          "description": "Render system tray and clock",
          "customizable": ["time format", "icons", "background"],
          "aiUsage": "AI can add custom system tray icons"
        }
      }
    },

    "eventSystem": {
      "eventListeners": {
        "canvas.click": {
          "handler": "handleCanvasClick",
          "triggers": ["Start button click", "Taskbar interaction", "Desktop click"],
          "aiUsage": "AI can synthesize click events programmatically"
        },
        "canvas.contextmenu": {
          "handler": "handleCanvasRightClick",
          "triggers": ["Context menu opening"],
          "aiUsage": "AI can inject custom context menu items"
        },
        "window.resize": {
          "handler": "handleResize",
          "triggers": ["Browser window resize", "Canvas redraw"],
          "aiUsage": "AI can adapt layout dynamically"
        }
      }
    }
  },

  "agentInstructions": {
    "templates": {
      "createCustomWindow": {
        "description": "Template for AI to create new windows with custom content",
        "steps": [
          "1. Call emulator.createWindow(title, content, x, y, width, height)",
          "2. Content can be any HTML string",
          "3. Position windows intelligently (avoid overlap)",
          "4. Add event listeners to window content as needed",
          "5. Track window in userDigitalTwin.behaviorPatterns"
        ],
        "example": {
          "code": "const window = emulator.createWindow('AI Assistant', '<div id=\"chat\">Hello!</div>', 150, 150, 500, 400);"
        }
      },
      "automateWorkflow": {
        "description": "Template for AI to automate multi-step workflows",
        "steps": [
          "1. Analyze user's current goal from userDigitalTwin.contextHistory.currentFocus",
          "2. Determine required sequence of actions",
          "3. Execute each action with appropriate delays",
          "4. Provide visual/audio feedback at each step",
          "5. Log actions to memory for learning"
        ],
        "example": {
          "scenario": "Create a note with current date",
          "code": "const notepad = emulator.openNotepad(); setTimeout(() => { const textarea = notepad.querySelector('textarea'); textarea.value = `Note from ${new Date().toLocaleDateString()}`; }, 100);"
        }
      },
      "customizeUI": {
        "description": "Template for AI to dynamically theme/customize the interface",
        "steps": [
          "1. Read userDigitalTwin.profile.preferences.themePreference",
          "2. Update CSS variables or inject style tags",
          "3. Modify canvas rendering in drawDesktop()",
          "4. Save preferences back to digital twin",
          "5. Apply animations/transitions for smooth changes"
        ],
        "example": {
          "code": "document.documentElement.style.setProperty('--desktop-teal', '#FF5733');"
        }
      },
      "intelligentAssistance": {
        "description": "Template for AI to provide contextual help",
        "steps": [
          "1. Monitor user actions via event listeners",
          "2. Detect patterns indicating confusion (repeated clicks, hovering)",
          "3. Offer help via custom window or tooltip",
          "4. Learn from user's acceptance/rejection of help",
          "5. Update userDigitalTwin.learningProfile"
        ],
        "triggers": [
          "User hovers over element for >3 seconds",
          "User clicks same element 3+ times without result",
          "User opens and closes start menu repeatedly"
        ]
      },
      "proactiveActions": {
        "description": "Template for AI to take initiative based on context",
        "steps": [
          "1. Check userDigitalTwin.behaviorPatterns.frequentActions",
          "2. Detect time patterns (e.g., user usually opens X at 2pm)",
          "3. Suggest or auto-execute common actions",
          "4. Ask permission for high-impact actions",
          "5. Learn from user feedback"
        ],
        "examples": [
          "Auto-open Paint if user typically draws in afternoon",
          "Pre-populate Notepad with meeting notes template at work hours",
          "Suggest closing idle windows after 30 minutes"
        ]
      }
    },

    "safetyConstraints": {
      "maxWindowsOpen": 10,
      "maxConsecutiveActions": 5,
      "requireUserConfirmation": [
        "Closing windows with unsaved content",
        "Modifying system settings",
        "Executing terminal commands"
      ],
      "rateLimits": {
        "windowCreation": "1 per 500ms",
        "soundEffects": "1 per 200ms",
        "canvasRedraws": "max 60fps"
      }
    }
  },

  "stateTracking": {
    "currentSession": {
      "sessionId": "session_20251014_053400",
      "startTime": "2025-10-14T05:34:00Z",
      "activeWindows": [],
      "openPrograms": [],
      "desktopState": {
        "iconPositions": [],
        "wallpaper": "teal",
        "resolution": "800x600"
      },
      "agentActions": []
    },
    "performance": {
      "fps": 60,
      "avgResponseTime": "16ms",
      "memoryUsage": "~50MB",
      "lastOptimized": "2025-10-14T05:34:00Z"
    }
  },

  "memory": {
    "shortTerm": {
      "recentActions": [],
      "recentErrors": [],
      "recentQueries": []
    },
    "longTerm": {
      "totalSessionsRun": 0,
      "totalWindowsCreated": 0,
      "favoritePrograms": {},
      "customWorkflows": [],
      "learnedPatterns": []
    }
  },

  "extensionPoints": {
    "customPrograms": {
      "description": "AI can create entirely new programs",
      "template": {
        "name": "string",
        "icon": "emoji",
        "launchFunction": "function name",
        "windowContent": "HTML string",
        "menuEntry": "Start menu position"
      },
      "example": {
        "name": "AI Chat",
        "icon": "🤖",
        "launchFunction": "openAIChat",
        "windowContent": "<div class='chat-interface'>...</div>",
        "menuEntry": "Programs > AI Chat"
      }
    },
    "customThemes": {
      "description": "AI can create and apply custom themes",
      "properties": [
        "desktop-teal",
        "button-face",
        "active-title-bar",
        "menu-highlight",
        "window-background"
      ]
    },
    "customWidgets": {
      "description": "AI can add widgets to desktop or taskbar",
      "types": ["Clock", "Weather", "Notes", "System Monitor", "Custom"]
    }
  },

  "aiCapabilityMatrix": {
    "read": {
      "userPreferences": true,
      "systemState": true,
      "windowContent": true,
      "behaviorPatterns": true,
      "memory": true
    },
    "write": {
      "createWindows": true,
      "modifyContent": true,
      "updateTheme": true,
      "saveToMemory": true,
      "updateDigitalTwin": true
    },
    "execute": {
      "launchPrograms": true,
      "closeWindows": true,
      "playSounds": true,
      "openMenus": true,
      "triggerEvents": true
    },
    "learn": {
      "observePatterns": true,
      "adaptBehavior": true,
      "improveRecommendations": true,
      "personalizeExperience": true
    }
  },

  "useCases": {
    "autonomousUIPolishing": {
      "description": "AI analyzes UI and applies game-like polish",
      "steps": [
        "Read current CSS from document.styleSheets",
        "Analyze for improvement opportunities",
        "Generate enhanced CSS with animations",
        "Inject via <style> tag or modify inline",
        "Test changes and collect feedback",
        "Save successful changes to memory"
      ],
      "metrics": ["Animation smoothness", "User interaction rate", "Feedback score"]
    },
    "intelligentWorkspaceManagement": {
      "description": "AI organizes windows based on user workflow",
      "steps": [
        "Detect related windows (e.g., Notepad + Browser for research)",
        "Arrange in optimal layout (tile, cascade, minimize)",
        "Save layout as workspace template",
        "Offer to restore layout in future sessions"
      ]
    },
    "contextualHelp": {
      "description": "AI provides help based on current context",
      "triggers": [
        "User opens program for first time",
        "User seems stuck (no action for 10s)",
        "Error occurs"
      ],
      "actions": [
        "Show tooltip with tips",
        "Open help window with relevant docs",
        "Offer to demonstrate feature"
      ]
    },
    "predictiveActions": {
      "description": "AI anticipates user needs",
      "examples": [
        "Pre-open commonly used programs",
        "Suggest actions based on time of day",
        "Auto-save work periodically",
        "Warn before closing unsaved work"
      ]
    }
  },

  "integrationHooks": {
    "webAPIs": {
      "localStorage": "Persist user preferences and state",
      "IndexedDB": "Store large datasets (memory, history)",
      "WebWorkers": "Run AI processing in background",
      "WebSockets": "Enable real-time communication (future)",
      "WebGL": "Advanced graphics rendering (future)"
    },
    "browserAPIs": {
      "Notification": "Desktop notifications for agent alerts",
      "SpeechSynthesis": "Text-to-speech for AI feedback",
      "SpeechRecognition": "Voice control (future)",
      "Geolocation": "Location-aware features (future)"
    }
  },

  "metadata": {
    "maintainers": ["kody", "claude-ai"],
    "updateFrequency": "on-demand by agents",
    "backupStrategy": "git commits + localStorage",
    "versionHistory": [
      {
        "version": "1.0.0",
        "date": "2025-10-14",
        "changes": "Initial digital twin creation"
      }
    ]
  },

  "infinitePossibilities": {
    "description": "This digital twin enables unlimited AI-driven experiences",
    "examples": [
      "AI creates a custom game inside Windows 95",
      "AI builds a productivity suite tailored to user",
      "AI generates art in Paint based on user mood",
      "AI writes code in Notepad and executes in DOS",
      "AI creates immersive storytelling experiences",
      "AI teaches programming through interactive demos",
      "AI optimizes UI based on user behavior in real-time",
      "AI creates multi-window workflows for complex tasks",
      "AI generates music visualizers in Media Player",
      "AI builds collaborative tools for remote work"
    ],
    "philosophy": "Every API call, every user action, every state change is an opportunity for AI to add value, delight, and intelligence to the experience."
  }
}
