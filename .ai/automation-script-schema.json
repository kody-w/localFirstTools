{
  "schemaVersion": "1.0.0",
  "description": "Schema for autonomous automation scripts that execute tasks in the Windows 95 emulator without AI involvement. These scripts use the 'data sloshing' pattern - pure JSON drives behavior.",

  "scriptFormat": {
    "id": "string - Unique identifier for the script",
    "name": "string - Human-readable name",
    "description": "string - What this script does",
    "version": "string - Script version (semver)",
    "author": "string - Who created it (AI or human)",
    "tags": ["array", "of", "strings"],
    "triggerMethods": ["keyboard", "button", "menu", "icon", "auto"],
    "keyboardShortcut": "string - e.g., 'Ctrl+Shift+D'",
    "icon": "string - Emoji or icon identifier",
    "category": "string - productivity|entertainment|system|demo|testing",

    "parameters": {
      "description": "Optional parameters that can be passed when triggering",
      "example": {
        "windowCount": { "type": "number", "default": 3, "description": "Number of windows to create" },
        "delay": { "type": "number", "default": 500, "description": "Delay between actions in ms" }
      }
    },

    "sequence": [
      {
        "step": 1,
        "description": "Human-readable step description",
        "action": "Action type (see availableActions below)",
        "target": "What to act upon",
        "params": {},
        "delay": "number - ms to wait after this step",
        "condition": "optional - condition to check before executing",
        "onError": "continue|stop|retry"
      }
    ],

    "errorHandling": {
      "defaultBehavior": "continue|stop",
      "retryAttempts": 3,
      "retryDelay": 1000
    },

    "metadata": {
      "created": "ISO 8601 timestamp",
      "modified": "ISO 8601 timestamp",
      "executionCount": 0,
      "lastExecuted": "ISO 8601 timestamp",
      "averageDuration": 0
    }
  },

  "availableActions": {
    "window": {
      "createWindow": {
        "description": "Create a new window",
        "params": {
          "title": "string - Window title",
          "content": "string - HTML content",
          "width": "number",
          "height": "number",
          "icon": "string - optional"
        },
        "example": {
          "action": "createWindow",
          "params": {
            "title": "Demo Window",
            "content": "<h1>Hello World</h1>",
            "width": 400,
            "height": 300
          }
        }
      },
      "closeWindow": {
        "description": "Close a window by title or selector",
        "params": {
          "selector": "string - CSS selector or window title"
        }
      },
      "minimizeWindow": {
        "description": "Minimize a window",
        "params": {
          "selector": "string"
        }
      },
      "maximizeWindow": {
        "description": "Maximize a window",
        "params": {
          "selector": "string"
        }
      },
      "moveWindow": {
        "description": "Move window to position",
        "params": {
          "selector": "string",
          "x": "number",
          "y": "number"
        }
      },
      "resizeWindow": {
        "description": "Resize window",
        "params": {
          "selector": "string",
          "width": "number",
          "height": "number"
        }
      },
      "tileWindows": {
        "description": "Tile all open windows",
        "params": {
          "layout": "grid|horizontal|vertical|cascade"
        }
      }
    },

    "program": {
      "openProgram": {
        "description": "Launch a program",
        "params": {
          "programName": "string - notepad|calculator|paint|minesweeper|etc."
        },
        "example": {
          "action": "openProgram",
          "params": {
            "programName": "notepad"
          }
        }
      },
      "closeProgram": {
        "description": "Close a program by name",
        "params": {
          "programName": "string"
        }
      }
    },

    "notification": {
      "showToast": {
        "description": "Show toast notification",
        "params": {
          "title": "string",
          "message": "string",
          "duration": "number - ms (optional)"
        }
      },
      "showDialog": {
        "description": "Show modal dialog",
        "params": {
          "type": "info|warning|error|confirm|prompt",
          "title": "string",
          "message": "string"
        }
      }
    },

    "audio": {
      "playSound": {
        "description": "Play sound effect",
        "params": {
          "sound": "window-open|window-close|button-click|win|etc."
        }
      },
      "setVolume": {
        "description": "Set system volume",
        "params": {
          "volume": "number - 0-100"
        }
      },
      "toggleMute": {
        "description": "Toggle mute state"
      }
    },

    "desktop": {
      "createIcon": {
        "description": "Create desktop icon",
        "params": {
          "x": "number",
          "y": "number",
          "label": "string",
          "emoji": "string",
          "action": "string - JavaScript function name or script ID"
        }
      },
      "removeIcon": {
        "description": "Remove desktop icon",
        "params": {
          "label": "string"
        }
      },
      "arrangeIcons": {
        "description": "Auto-arrange desktop icons",
        "params": {
          "pattern": "grid|line|circle|random"
        }
      }
    },

    "clippy": {
      "showClippy": {
        "description": "Show Clippy assistant"
      },
      "hideClippy": {
        "description": "Hide Clippy assistant"
      },
      "clippyEmotion": {
        "description": "Set Clippy emotion",
        "params": {
          "emotion": "happy|thinking|excited|confused|impressed|concerned"
        }
      },
      "clippySay": {
        "description": "Make Clippy say something",
        "params": {
          "message": "string",
          "emotion": "string - optional"
        }
      }
    },

    "system": {
      "wait": {
        "description": "Pause execution",
        "params": {
          "duration": "number - ms"
        }
      },
      "executeScript": {
        "description": "Execute another script",
        "params": {
          "scriptId": "string"
        }
      },
      "setVariable": {
        "description": "Set a variable for use in later steps",
        "params": {
          "name": "string",
          "value": "any"
        }
      },
      "getVariable": {
        "description": "Get a variable value",
        "params": {
          "name": "string"
        }
      },
      "log": {
        "description": "Log message to console",
        "params": {
          "message": "string",
          "level": "info|warn|error"
        }
      }
    },

    "conditional": {
      "if": {
        "description": "Conditional execution",
        "params": {
          "condition": "JavaScript expression as string",
          "then": "array of steps",
          "else": "array of steps (optional)"
        }
      },
      "loop": {
        "description": "Loop execution",
        "params": {
          "type": "for|while|forEach",
          "count": "number - for 'for' loops",
          "condition": "string - for 'while' loops",
          "items": "array - for 'forEach' loops",
          "steps": "array of steps to repeat"
        }
      }
    },

    "meta": {
      "parallel": {
        "description": "Execute multiple actions in parallel",
        "params": {
          "actions": "array of action objects"
        }
      },
      "sequence": {
        "description": "Execute actions in sequence (nested sequence)",
        "params": {
          "actions": "array of action objects"
        }
      }
    }
  },

  "conditionExpressions": {
    "description": "Conditions that can be evaluated before executing steps",
    "examples": [
      "window.emulator.desktop.icons.length > 5",
      "document.querySelectorAll('.window').length === 0",
      "window.emulator.soundMuted === false",
      "localStorage.getItem('someKey') !== null"
    ]
  },

  "variableSystem": {
    "description": "Scripts can set and use variables during execution",
    "syntax": "Use ${variableName} in string values to interpolate",
    "example": {
      "action": "setVariable",
      "params": { "name": "windowTitle", "value": "My Window" }
    },
    "usage": {
      "action": "createWindow",
      "params": {
        "title": "${windowTitle}",
        "content": "<h1>Hello</h1>",
        "width": 400,
        "height": 300
      }
    }
  },

  "exampleScript": {
    "id": "demo-window-cascade",
    "name": "Cascade Demo Windows",
    "description": "Creates 5 windows in a cascading pattern with delays",
    "version": "1.0.0",
    "author": "Claude Code",
    "tags": ["demo", "windows", "visual"],
    "triggerMethods": ["button", "keyboard"],
    "keyboardShortcut": "Ctrl+Shift+D",
    "icon": "ðŸªŸ",
    "category": "demo",

    "sequence": [
      {
        "step": 1,
        "description": "Show start notification",
        "action": "showToast",
        "params": {
          "title": "Demo",
          "message": "Creating cascade of windows..."
        },
        "delay": 500
      },
      {
        "step": 2,
        "description": "Create window 1",
        "action": "createWindow",
        "params": {
          "title": "Demo Window 1",
          "content": "<div style='padding: 20px; text-align: center;'><h2>Window 1</h2><p>Part of cascade demo</p></div>",
          "width": 400,
          "height": 300
        },
        "delay": 300
      },
      {
        "step": 3,
        "description": "Play sound effect",
        "action": "playSound",
        "params": {
          "sound": "window-open"
        },
        "delay": 200
      },
      {
        "step": 4,
        "description": "Create window 2",
        "action": "createWindow",
        "params": {
          "title": "Demo Window 2",
          "content": "<div style='padding: 20px; text-align: center;'><h2>Window 2</h2><p>Cascading effect!</p></div>",
          "width": 400,
          "height": 300
        },
        "delay": 300
      },
      {
        "step": 5,
        "description": "Create window 3",
        "action": "createWindow",
        "params": {
          "title": "Demo Window 3",
          "content": "<div style='padding: 20px; text-align: center;'><h2>Window 3</h2><p>Windows 95 style!</p></div>",
          "width": 400,
          "height": 300
        },
        "delay": 800
      },
      {
        "step": 6,
        "description": "Show completion",
        "action": "showToast",
        "params": {
          "title": "Complete",
          "message": "Cascade demo finished!"
        }
      }
    ]
  }
}
