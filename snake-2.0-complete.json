{
  "id": "snake-2.0",
  "name": "Snake 2.0",
  "description": "Classic snake game with power-ups",
  "icon": "🐍",
  "gameData": {
    "width": 20,
    "height": 18,
    "initialSpeed": 150,
    "snakeColor": "#223344",
    "foodColor": "#e42c64",
    "powerupColor": "#44aabb",
    "backgroundColor": "#8bac0f"
  },
  "initializeCode": "function(display) {\n  this.display = display;\n  this.canvas = document.createElement('canvas');\n  this.canvas.width = 280;\n  this.canvas.height = 248;\n  display.appendChild(this.canvas);\n  this.ctx = this.canvas.getContext('2d');\n  \n  this.width = this.gameData.width;\n  this.height = this.gameData.height;\n  this.cellSize = this.canvas.width / this.width;\n  \n  this.snake = [\n    {x: Math.floor(this.width/2), y: Math.floor(this.height/2)},\n    {x: Math.floor(this.width/2)-1, y: Math.floor(this.height/2)},\n    {x: Math.floor(this.width/2)-2, y: Math.floor(this.height/2)}\n  ];\n  \n  this.direction = 'right';\n  this.nextDirection = 'right';\n  this.score = 0;\n  this.food = this.generateFood();\n  this.powerup = null;\n  this.powerupActive = false;\n  this.powerupType = null;\n  this.powerupTimer = 0;\n  this.gameOver = false;\n  this.speed = this.gameData.initialSpeed;\n  this.inputQueue = [];\n  \n  this.render();\n}",
  "handleInputCode": "function(button, isPressed) {\n  if (isPressed) {\n    switch(button) {\n      case 'up':\n        if (this.direction !== 'down') {\n          this.inputQueue.push('up');\n        }\n        break;\n      case 'right':\n        if (this.direction !== 'left') {\n          this.inputQueue.push('right');\n        }\n        break;\n      case 'down':\n        if (this.direction !== 'up') {\n          this.inputQueue.push('down');\n        }\n        break;\n      case 'left':\n        if (this.direction !== 'right') {\n          this.inputQueue.push('left');\n        }\n        break;\n      case 'a':\n        if (this.gameOver) {\n          this.restart();\n        }\n        break;\n    }\n  }\n}",
  "updateCode": "function(deltaTime) {\n  if (this.gameOver) return;\n  \n  // Process the input queue\n  if (this.inputQueue.length > 0) {\n    const newDirection = this.inputQueue.shift();\n    // Check if the new direction is valid based on current direction\n    if ((this.direction === 'up' || this.direction === 'down') && \n      (newDirection === 'left' || newDirection === 'right')) {\n      this.nextDirection = newDirection;\n    } else if ((this.direction === 'left' || this.direction === 'right') && \n      (newDirection === 'up' || newDirection === 'down')) {\n      this.nextDirection = newDirection;\n    }\n  }\n  \n  // Only update at certain intervals based on speed\n  this.updateCounter = (this.updateCounter || 0) + deltaTime;\n  if (this.updateCounter < this.speed) return;\n  this.updateCounter = 0;\n  \n  this.direction = this.nextDirection;\n  \n  // Calculate new head position\n  const head = {...this.snake[0]};\n  \n  switch(this.direction) {\n    case 'up': head.y--; break;\n    case 'right': head.x++; break;\n    case 'down': head.y++; break;\n    case 'left': head.x--; break;\n  }\n  \n  // Check collision with walls\n  if (head.x < 0 || head.x >= this.width || head.y < 0 || head.y >= this.height) {\n    this.gameOver = true;\n    return;\n  }\n  \n  // Check collision with self (except for ghost powerup)\n  if (!this.powerupActive || this.powerupType !== 'ghost') {\n    for (let i = 0; i < this.snake.length; i++) {\n      if (head.x === this.snake[i].x && head.y === this.snake[i].y) {\n        this.gameOver = true;\n        return;\n      }\n    }\n  }\n  \n  // Add new head\n  this.snake.unshift(head);\n  \n  // Check if food is eaten\n  if (head.x === this.food.x && head.y === this.food.y) {\n    this.score++;\n    this.food = this.generateFood();\n    \n    // Possibly spawn a powerup (20% chance)\n    if (!this.powerup && Math.random() < 0.2) {\n      this.powerup = this.generatePowerup();\n    }\n  } else {\n    // Remove tail if no food was eaten\n    this.snake.pop();\n  }\n  \n  // Check if powerup is eaten\n  if (this.powerup && head.x === this.powerup.x && head.y === this.powerup.y) {\n    this.activatePowerup(this.powerup.type);\n    this.powerup = null;\n  }\n  \n  // Update powerup timer\n  if (this.powerupActive) {\n    this.powerupTimer--;\n    if (this.powerupTimer <= 0) {\n      this.deactivatePowerup();\n    }\n  }\n}",
  "renderCode": "function() {\n  // Clear canvas\n  this.ctx.fillStyle = this.gameData.backgroundColor;\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Draw snake\n  for (let i = 0; i < this.snake.length; i++) {\n    const segment = this.snake[i];\n    \n    let color = this.gameData.snakeColor;\n    if (this.powerupActive) {\n      if (this.powerupType === 'speed') {\n        color = '#ff9900';\n      } else if (this.powerupType === 'ghost') {\n        color = 'rgba(34, 51, 68, 0.5)';\n      } else if (this.powerupType === 'magnet') {\n        color = '#9900ff';\n      }\n    }\n    \n    this.ctx.fillStyle = i === 0 ? color : (color === 'rgba(34, 51, 68, 0.5)' ? color : `${color}88`);\n    this.ctx.fillRect(\n      segment.x * this.cellSize,\n      segment.y * this.cellSize,\n      this.cellSize,\n      this.cellSize\n    );\n  }\n  \n  // Draw food\n  this.ctx.fillStyle = this.gameData.foodColor;\n  this.ctx.beginPath();\n  this.ctx.arc(\n    this.food.x * this.cellSize + this.cellSize/2,\n    this.food.y * this.cellSize + this.cellSize/2,\n    this.cellSize/2,\n    0,\n    Math.PI * 2\n  );\n  this.ctx.fill();\n  \n  // Draw powerup if exists\n  if (this.powerup) {\n    this.ctx.fillStyle = this.gameData.powerupColor;\n    this.ctx.beginPath();\n    this.ctx.arc(\n      this.powerup.x * this.cellSize + this.cellSize/2,\n      this.powerup.y * this.cellSize + this.cellSize/2,\n      this.cellSize/2,\n      0,\n      Math.PI * 2\n    );\n    this.ctx.fill();\n    \n    // Add a special symbol based on the powerup type\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = `${this.cellSize * 0.7}px Arial`;\n    let symbol;\n    switch(this.powerup.type) {\n      case 'speed': symbol = '⚡'; break;\n      case 'ghost': symbol = '👻'; break;\n      case 'magnet': symbol = '🧲'; break;\n    }\n    this.ctx.fillText(\n      symbol,\n      this.powerup.x * this.cellSize + this.cellSize/2,\n      this.powerup.y * this.cellSize + this.cellSize/2\n    );\n  }\n  \n  // Draw score\n  this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, 20);\n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'top';\n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.fillText(`SCORE: ${this.score}`, 10, 5);\n  \n  // Draw powerup timer if active\n  if (this.powerupActive) {\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'right';\n    this.ctx.fillText(`${this.powerupType.toUpperCase()}: ${Math.ceil(this.powerupTimer / 10)}`, this.canvas.width - 10, 5);\n  }\n  \n  // Draw game over message\n  if (this.gameOver) {\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = '16px \"Press Start 2P\"';\n    this.ctx.fillText('GAME OVER', this.canvas.width/2, this.canvas.height/2 - 20);\n    this.ctx.font = '12px \"Press Start 2P\"';\n    this.ctx.fillText(`SCORE: ${this.score}`, this.canvas.width/2, this.canvas.height/2 + 10);\n    this.ctx.fillText('PRESS A TO RESTART', this.canvas.width/2, this.canvas.height/2 + 40);\n  }\n}",
  "cleanupCode": "function() {\n  if (this.canvas && this.canvas.parentNode) {\n    this.canvas.parentNode.removeChild(this.canvas);\n  }\n}",
  "additionalFunctions": {
    "generateFood": "function() {\n  // Generate food in a random position (not occupied by snake)\n  let x, y;\n  let validPosition = false;\n  \n  while (!validPosition) {\n    x = Math.floor(Math.random() * this.width);\n    y = Math.floor(Math.random() * this.height);\n    validPosition = true;\n    \n    // Check if the position overlaps with the snake\n    for (let i = 0; i < this.snake.length; i++) {\n      if (x === this.snake[i].x && y === this.snake[i].y) {\n        validPosition = false;\n        break;\n      }\n    }\n    \n    // Check if the position overlaps with existing powerup\n    if (this.powerup && x === this.powerup.x && y === this.powerup.y) {\n      validPosition = false;\n    }\n  }\n  \n  return {x, y};\n}",
    "generatePowerup": "function() {\n  // Generate powerup in a random position (not occupied by snake or food)\n  let x, y, type;\n  let validPosition = false;\n  \n  // Determine the powerup type\n  const types = ['speed', 'ghost', 'magnet'];\n  type = types[Math.floor(Math.random() * types.length)];\n  \n  while (!validPosition) {\n    x = Math.floor(Math.random() * this.width);\n    y = Math.floor(Math.random() * this.height);\n    validPosition = true;\n    \n    // Check if the position overlaps with the snake\n    for (let i = 0; i < this.snake.length; i++) {\n      if (x === this.snake[i].x && y === this.snake[i].y) {\n        validPosition = false;\n        break;\n      }\n    }\n    \n    // Check if the position overlaps with the food\n    if (x === this.food.x && y === this.food.y) {\n      validPosition = false;\n    }\n  }\n  \n  return {x, y, type};\n}",
    "activatePowerup": "function(type) {\n  this.powerupActive = true;\n  this.powerupType = type;\n  this.powerupTimer = 100; // 10 seconds at 10 updates per second\n  \n  switch(type) {\n    case 'speed':\n      this.originalSpeed = this.speed;\n      this.speed = this.speed / 1.5;\n      break;\n    case 'ghost':\n      // Ghost mode is handled in update logic\n      break;\n    case 'magnet':\n      // Magnet attracts food - handled in update logic\n      this.food = this.attractFood();\n      break;\n  }\n}",
    "deactivatePowerup": "function() {\n  if (this.powerupType === 'speed') {\n    this.speed = this.originalSpeed;\n  }\n  \n  this.powerupActive = false;\n  this.powerupType = null;\n  this.powerupTimer = 0;\n}",
    "attractFood": "function() {\n  // Find a position near the snake head\n  const head = this.snake[0];\n  const positions = [];\n  \n  // Check all positions within 3 cells of the head\n  for (let x = Math.max(0, head.x - 3); x <= Math.min(this.width - 1, head.x + 3); x++) {\n    for (let y = Math.max(0, head.y - 3); y <= Math.min(this.height - 1, head.y + 3); y++) {\n      // Skip positions occupied by the snake\n      let isOccupied = false;\n      for (let i = 0; i < this.snake.length; i++) {\n        if (x === this.snake[i].x && y === this.snake[i].y) {\n          isOccupied = true;\n          break;\n        }\n      }\n      \n      if (!isOccupied) {\n        positions.push({x, y});\n      }\n    }\n  }\n  \n  // Return a random position from the available ones,\n  // or a completely random position if none are available\n  if (positions.length > 0) {\n    return positions[Math.floor(Math.random() * positions.length)];\n  } else {\n    return this.generateFood();\n  }\n}",
    "restart": "function() {\n  this.snake = [\n    {x: Math.floor(this.width/2), y: Math.floor(this.height/2)},\n    {x: Math.floor(this.width/2)-1, y: Math.floor(this.height/2)},\n    {x: Math.floor(this.width/2)-2, y: Math.floor(this.height/2)}\n  ];\n  \n  this.direction = 'right';\n  this.nextDirection = 'right';\n  this.score = 0;\n  this.food = this.generateFood();\n  this.powerup = null;\n  this.powerupActive = false;\n  this.powerupType = null;\n  this.powerupTimer = 0;\n  this.gameOver = false;\n  this.speed = this.gameData.initialSpeed;\n  this.inputQueue = [];\n}"
  }
}
