{
  "id": "space-trader",
  "name": "Space Trader",
  "description": "Trade goods between planets and build your space fortune",
  "icon": "ðŸš€",
  "gameData": {
    "backgroundColor": "#000022",
    "textColor": "#FFFFFF",
    "uiColor": "#444466",
    "highlightColor": "#66AAFF",
    "planetColors": [
      "#FF5252", "#E91E63", "#9C27B0", "#673AB7", 
      "#3F51B5", "#2196F3", "#03A9F4", "#00BCD4", 
      "#009688", "#4CAF50", "#8BC34A", "#CDDC39"
    ],
    "goods": [
      {"name": "Food", "basePrice": 10, "variance": 8},
      {"name": "Medicine", "basePrice": 25, "variance": 15},
      {"name": "Electronics", "basePrice": 40, "variance": 25},
      {"name": "Minerals", "basePrice": 30, "variance": 20},
      {"name": "Luxuries", "basePrice": 100, "variance": 60},
      {"name": "Weapons", "basePrice": 80, "variance": 40},
      {"name": "Fuel", "basePrice": 15, "variance": 10}
    ],
    "startingCredits": 1000,
    "shipUpgrades": [
      {"name": "Small Freighter", "cost": 0, "capacity": 20},
      {"name": "Medium Hauler", "cost": 5000, "capacity": 50},
      {"name": "Large Cargo Ship", "cost": 20000, "capacity": 100},
      {"name": "Mega Transport", "cost": 75000, "capacity": 200}
    ],
    "numPlanets": 8,
    "maxDistance": 15,
    "fuelCostPerUnit": 5
  },
  "initializeCode": "function(display) {\n  this.display = display;\n  this.canvas = document.createElement('canvas');\n  this.canvas.width = 280;\n  this.canvas.height = 248;\n  display.appendChild(this.canvas);\n  this.ctx = this.canvas.getContext('2d');\n  \n  this.state = 'galaxy'; // galaxy, planet, trading, travel, info\n  this.selectedPlanet = null;\n  this.selectedGood = null;\n  this.tradeQuantity = 0;\n  this.tradeMode = 'buy'; // buy or sell\n  this.infoMessage = null;\n  this.cursorPosition = 0;\n  this.menuOptions = [];\n  \n  this.player = {\n    credits: this.gameData.startingCredits,\n    currentPlanet: null,\n    ship: this.gameData.shipUpgrades[0],\n    inventory: [],\n    fuel: 100\n  };\n  \n  this.days = 0;\n  this.gameOver = false;\n  this.gameWon = false;\n  \n  this.generateGalaxy();\n  this.player.currentPlanet = this.planets[0];\n  this.updatePrices();\n  \n  this.render();\n}",
  "handleInputCode": "function(button, isPressed) {\n  if (this.gameOver && isPressed && button === 'a') {\n    this.restart();\n    return;\n  }\n  \n  if (!isPressed) return; // Only handle button presses\n  \n  switch(this.state) {\n    case 'galaxy':\n      this.handleGalaxyInput(button);\n      break;\n    case 'planet':\n      this.handlePlanetInput(button);\n      break;\n    case 'trading':\n      this.handleTradingInput(button);\n      break;\n    case 'travel':\n      this.handleTravelInput(button);\n      break;\n    case 'info':\n      this.handleInfoInput(button);\n      break;\n  }\n  \n  this.render();\n}",
  "updateCode": "function(deltaTime) {\n  // No automatic updates needed for this turn-based game\n}",
  "renderCode": "function() {\n  // Clear canvas\n  this.ctx.fillStyle = this.gameData.backgroundColor;\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Call the right rendering function based on the current state\n  switch(this.state) {\n    case 'galaxy':\n      this.renderGalaxy();\n      break;\n    case 'planet':\n      this.renderPlanet();\n      break;\n    case 'trading':\n      this.renderTrading();\n      break;\n    case 'travel':\n      this.renderTravel();\n      break;\n    case 'info':\n      this.renderInfo();\n      break;\n  }\n  \n  // Always show status bar with player info\n  this.renderStatusBar();\n  \n  // Game over or win screen\n  if (this.gameOver) {\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = this.gameData.textColor;\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = '16px \"Press Start 2P\"';\n    \n    if (this.gameWon) {\n      this.ctx.fillText('YOU WON!', this.canvas.width / 2, this.canvas.height / 2 - 20);\n    } else {\n      this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 20);\n    }\n    \n    this.ctx.font = '10px \"Press Start 2P\"';\n    this.ctx.fillText(`Credits: ${this.player.credits}`, this.canvas.width / 2, this.canvas.height / 2 + 10);\n    this.ctx.fillText(`Days: ${this.days}`, this.canvas.width / 2, this.canvas.height / 2 + 30);\n    this.ctx.fillText('PRESS A TO RESTART', this.canvas.width / 2, this.canvas.height / 2 + 60);\n  }\n}",
  "cleanupCode": "function() {\n  if (this.canvas && this.canvas.parentNode) {\n    this.canvas.parentNode.removeChild(this.canvas);\n  }\n}",
  "additionalFunctions": {
    "generateGalaxy": "function() {\n  this.planets = [];\n  \n  for (let i = 0; i < this.gameData.numPlanets; i++) {\n    // Generate positions in a visually pleasing way\n    let x, y;\n    let isValidPosition = false;\n    let attempts = 0;\n    \n    while (!isValidPosition && attempts < 50) {\n      x = 20 + Math.random() * (this.canvas.width - 40);\n      y = 40 + Math.random() * (this.canvas.height - 80);\n      \n      // Check distances from other planets\n      isValidPosition = true;\n      for (let j = 0; j < this.planets.length; j++) {\n        const otherPlanet = this.planets[j];\n        const dx = x - otherPlanet.x;\n        const dy = y - otherPlanet.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < 30) {\n          isValidPosition = false;\n          break;\n        }\n      }\n      \n      attempts++;\n    }\n    \n    if (!isValidPosition) {\n      // Fallback: place along a circle\n      const angle = (i / this.gameData.numPlanets) * Math.PI * 2;\n      const radius = 80;\n      x = this.canvas.width / 2 + Math.cos(angle) * radius;\n      y = this.canvas.height / 2 + Math.sin(angle) * radius;\n    }\n    \n    // Generate production/consumption preferences\n    const preferences = {};\n    for (let j = 0; j < this.gameData.goods.length; j++) {\n      // Random value between -1 (consume) and 1 (produce)\n      preferences[j] = Math.random() * 2 - 1;\n    }\n    \n    this.planets.push({\n      id: i,\n      name: this.generatePlanetName(),\n      x: x,\n      y: y,\n      color: this.gameData.planetColors[i % this.gameData.planetColors.length],\n      size: 5 + Math.random() * 5,\n      preferences: preferences,\n      prices: {}\n    });\n  }\n  \n  // Calculate distances between planets\n  this.distances = {};\n  for (let i = 0; i < this.planets.length; i++) {\n    this.distances[i] = {};\n    for (let j = 0; j < this.planets.length; j++) {\n      if (i !== j) {\n        const dx = this.planets[i].x - this.planets[j].x;\n        const dy = this.planets[i].y - this.planets[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy) / 10;\n        this.distances[i][j] = Math.max(1, Math.min(this.gameData.maxDistance, Math.floor(distance)));\n      }\n    }\n  }\n}",
    "generatePlanetName": "function() {\n  const prefixes = ['Nova', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Omega', 'Proxima', 'Terra', 'Xeno', 'Cosmo'];\n  const suffixes = ['Prime', 'Minor', 'Major', 'IX', 'V', 'III', 'II', 'I', 'Zero', 'Ultima'];\n  \n  return prefixes[Math.floor(Math.random() * prefixes.length)] + ' ' + suffixes[Math.floor(Math.random() * suffixes.length)];\n}",
    "updatePrices": "function() {\n  for (let i = 0; i < this.planets.length; i++) {\n    const planet = this.planets[i];\n    \n    for (let j = 0; j < this.gameData.goods.length; j++) {\n      const good = this.gameData.goods[j];\n      const preference = planet.preferences[j];\n      \n      // Calculate price based on base price, variance, and planet's preference\n      let price = good.basePrice;\n      \n      // Adjust price based on preference\n      price *= (1 - preference * 0.5);\n      \n      // Add randomness\n      price += (Math.random() - 0.5) * good.variance;\n      \n      // Make sure price is positive and round to integers\n      planet.prices[j] = Math.max(1, Math.floor(price));\n    }\n  }\n}",
    "handleGalaxyInput": "function(button) {\n  switch(button) {\n    case 'up':\n      // Find closest planet in the up direction\n      this.selectPlanetInDirection(0, -1);\n      break;\n    case 'down':\n      // Find closest planet in the down direction\n      this.selectPlanetInDirection(0, 1);\n      break;\n    case 'left':\n      // Find closest planet in the left direction\n      this.selectPlanetInDirection(-1, 0);\n      break;\n    case 'right':\n      // Find closest planet in the right direction\n      this.selectPlanetInDirection(1, 0);\n      break;\n    case 'a':\n      // If a planet is selected, try to travel to it\n      if (this.selectedPlanet !== null) {\n        if (this.selectedPlanet === this.player.currentPlanet.id) {\n          // Already here - enter planet view\n          this.state = 'planet';\n        } else {\n          // Attempt travel\n          this.state = 'travel';\n          // No preparation needed for travel screen\n        }\n      }\n      break;\n    case 'b':\n      // Show info about selected planet\n      if (this.selectedPlanet !== null) {\n        this.state = 'info';\n        this.infoMessage = this.getPlanetInfo(this.planets[this.selectedPlanet]);\n      }\n      break;\n  }\n}",
    "selectPlanetInDirection": "function(dx, dy) {\n  const currentPlanet = this.selectedPlanet !== null ? \n    this.planets[this.selectedPlanet] : this.player.currentPlanet;\n  \n  let closestDistance = Infinity;\n  let closestPlanet = null;\n  \n  for (let i = 0; i < this.planets.length; i++) {\n    const planet = this.planets[i];\n    \n    // Calculate vector from current to this planet\n    const vx = planet.x - currentPlanet.x;\n    const vy = planet.y - currentPlanet.y;\n    \n    // Check if this planet is in the desired direction\n    const dotProduct = vx * dx + vy * dy;\n    \n    if (dotProduct > 0) {\n      // Calculate how far off-axis the planet is\n      const length = Math.sqrt(vx * vx + vy * vy);\n      const normalizedDot = dotProduct / length;\n      \n      // Factor in both distance and directness\n      const score = length / (normalizedDot * normalizedDot);\n      \n      if (score < closestDistance) {\n        closestDistance = score;\n        closestPlanet = i;\n      }\n    }\n  }\n  \n  if (closestPlanet !== null) {\n    this.selectedPlanet = closestPlanet;\n  }\n}",
    "handlePlanetInput": "function(button) {\n  // Cursor position navigation\n  if (button === 'up' && this.cursorPosition > 0) {\n    this.cursorPosition--;\n  } else if (button === 'down' && this.cursorPosition < this.menuOptions.length - 1) {\n    this.cursorPosition++;\n  } else if (button === 'a') {\n    // Select current option\n    switch(this.menuOptions[this.cursorPosition]) {\n      case 'buy':\n        this.state = 'trading';\n        this.tradeMode = 'buy';\n        this.cursorPosition = 0;\n        this.selectedGood = 0;\n        this.tradeQuantity = 0;\n        break;\n      case 'sell':\n        this.state = 'trading';\n        this.tradeMode = 'sell';\n        this.cursorPosition = 0;\n        this.selectedGood = this.player.inventory.length > 0 ? 0 : null;\n        this.tradeQuantity = 0;\n        break;\n      case 'upgrade':\n        this.upgradeShip();\n        break;\n      case 'refuel':\n        this.refuelShip();\n        break;\n      case 'leave':\n        this.state = 'galaxy';\n        this.cursorPosition = 0;\n        break;\n    }\n  } else if (button === 'b') {\n    // Exit to galaxy view\n    this.state = 'galaxy';\n    this.cursorPosition = 0;\n  }\n}",
    "handleTradingInput": "function(button) {\n  if (this.tradeMode === 'buy') {\n    // Buying mode\n    switch(button) {\n      case 'up':\n        if (this.selectedGood > 0) {\n          this.selectedGood--;\n          this.tradeQuantity = 0;\n        }\n        break;\n      case 'down':\n        if (this.selectedGood < this.gameData.goods.length - 1) {\n          this.selectedGood++;\n          this.tradeQuantity = 0;\n        }\n        break;\n      case 'left':\n        if (this.tradeQuantity > 0) {\n          this.tradeQuantity--;\n        }\n        break;\n      case 'right':\n        const goodPrice = this.player.currentPlanet.prices[this.selectedGood];\n        const maxAfford = Math.floor(this.player.credits / goodPrice);\n        const maxSpace = this.getTotalCargoSpace() - this.getTotalCargoUsed();\n        const maxBuy = Math.min(maxAfford, maxSpace);\n        if (this.tradeQuantity < maxBuy) {\n          this.tradeQuantity++;\n        }\n        break;\n      case 'a':\n        // Confirm purchase\n        this.buyGoods(this.selectedGood, this.tradeQuantity);\n        break;\n      case 'b':\n        // Back to planet menu\n        this.state = 'planet';\n        this.cursorPosition = 0;\n        break;\n    }\n  } else {\n    // Selling mode\n    switch(button) {\n      case 'up':\n        if (this.player.inventory.length > 0) {\n          let newIndex = this.selectedGood - 1;\n          if (newIndex < 0) newIndex = this.player.inventory.length - 1;\n          this.selectedGood = newIndex;\n          this.tradeQuantity = 0;\n        }\n        break;\n      case 'down':\n        if (this.player.inventory.length > 0) {\n          let newIndex = this.selectedGood + 1;\n          if (newIndex >= this.player.inventory.length) newIndex = 0;\n          this.selectedGood = newIndex;\n          this.tradeQuantity = 0;\n        }\n        break;\n      case 'left':\n        if (this.tradeQuantity > 0) {\n          this.tradeQuantity--;\n        }\n        break;\n      case 'right':\n        if (this.selectedGood !== null && this.player.inventory.length > 0) {\n          const inventoryItem = this.player.inventory[this.selectedGood];\n          if (this.tradeQuantity < inventoryItem.quantity) {\n            this.tradeQuantity++;\n          }\n        }\n        break;\n      case 'a':\n        // Confirm sale\n        if (this.selectedGood !== null && this.player.inventory.length > 0) {\n          this.sellGoods(this.selectedGood, this.tradeQuantity);\n          // Check win condition after selling\n          this.checkWinCondition();\n        }\n        break;\n      case 'b':\n        // Back to planet menu\n        this.state = 'planet';\n        this.cursorPosition = 0;\n        break;\n    }\n  }\n}",
    "handleTravelInput": "function(button) {\n  // In travel screen\n  if (button === 'a') {\n    const targetPlanet = this.planets[this.selectedPlanet];\n    const distance = this.distances[this.player.currentPlanet.id][targetPlanet.id];\n    const fuelNeeded = distance * this.gameData.fuelCostPerUnit;\n    \n    if (this.player.fuel >= fuelNeeded) {\n      // Travel is possible\n      this.player.fuel -= fuelNeeded;\n      this.player.currentPlanet = targetPlanet;\n      this.days += distance;\n      \n      // Update prices after travel\n      this.updatePrices();\n      \n      this.state = 'planet';\n      this.cursorPosition = 0;\n      \n      // Check win condition\n      this.checkWinCondition();\n    }\n  } else if (button === 'b') {\n    // Cancel travel\n    this.state = 'galaxy';\n  }\n}",
    "handleInfoInput": "function(button) {\n  // Any button dismisses info screen\n  this.state = 'galaxy';\n}",
    "getPlanetInfo": "function(planet) {\n  let info = `${planet.name}\\n\\n`;\n  \n  if (planet === this.player.currentPlanet) {\n    info += 'You are here.\\n\\n';\n  } else {\n    const distance = this.distances[this.player.currentPlanet.id][planet.id];\n    const fuelNeeded = distance * this.gameData.fuelCostPerUnit;\n    info += `Distance: ${distance} parsecs\\nFuel needed: ${fuelNeeded}\\n\\n`;\n  }\n  \n  info += 'Price Index:\\n';\n  \n  for (let i = 0; i < this.gameData.goods.length; i++) {\n    const good = this.gameData.goods[i];\n    const price = planet.prices[i];\n    const basePrice = good.basePrice;\n    const priceDiff = ((price - basePrice) / basePrice * 100).toFixed(0);\n    const arrow = price > basePrice ? 'â†‘' : price < basePrice ? 'â†“' : 'â‰ˆ';\n    \n    info += `${good.name}: ${price} cr (${arrow}${Math.abs(priceDiff)}%)\\n`;\n  }\n  \n  return info;\n}",
    "renderGalaxy": "function() {\n  // Draw galaxy map\n  // Draw lines between player's current planet and selected planet\n  if (this.selectedPlanet !== null && this.selectedPlanet !== this.player.currentPlanet.id) {\n    const currentPlanet = this.player.currentPlanet;\n    const targetPlanet = this.planets[this.selectedPlanet];\n    \n    this.ctx.strokeStyle = '#336699';\n    this.ctx.lineWidth = 1;\n    this.ctx.setLineDash([5, 3]);\n    this.ctx.beginPath();\n    this.ctx.moveTo(currentPlanet.x, currentPlanet.y);\n    this.ctx.lineTo(targetPlanet.x, targetPlanet.y);\n    this.ctx.stroke();\n    this.ctx.setLineDash([]);\n  }\n  \n  // Draw planets\n  for (let i = 0; i < this.planets.length; i++) {\n    const planet = this.planets[i];\n    \n    // Draw selection indicator\n    if (this.selectedPlanet === i) {\n      this.ctx.strokeStyle = this.gameData.highlightColor;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(planet.x, planet.y, planet.size + 5, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n    \n    // Draw planet\n    this.ctx.fillStyle = planet.color;\n    this.ctx.beginPath();\n    this.ctx.arc(planet.x, planet.y, planet.size, 0, Math.PI * 2);\n    this.ctx.fill();\n    \n    // Draw player position indicator\n    if (planet === this.player.currentPlanet) {\n      this.ctx.fillStyle = 'white';\n      this.ctx.beginPath();\n      this.ctx.arc(planet.x, planet.y, 2, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n  }\n  \n  // Draw selected planet name\n  if (this.selectedPlanet !== null) {\n    const planet = this.planets[this.selectedPlanet];\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'bottom';\n    this.ctx.font = '10px \"Press Start 2P\"';\n    this.ctx.fillText(planet.name, planet.x, planet.y - planet.size - 5);\n  }\n  \n  // Draw controls help\n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'bottom';\n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('A: Travel', 10, this.canvas.height - 10);\n  this.ctx.textAlign = 'right';\n  this.ctx.fillText('B: Info', this.canvas.width - 10, this.canvas.height - 10);\n}",
    "renderPlanet": "function() {\n  // Create menu options based on planet state\n  this.menuOptions = ['buy', 'sell', 'refuel', 'upgrade', 'leave'];\n  \n  // Draw planet view\n  this.ctx.fillStyle = this.player.currentPlanet.color;\n  this.ctx.beginPath();\n  this.ctx.arc(this.canvas.width / 2, 50, 30, 0, Math.PI * 2);\n  this.ctx.fill();\n  \n  // Draw planet name\n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'top';\n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.fillText(this.player.currentPlanet.name, this.canvas.width / 2, 90);\n  \n  // Draw menu\n  this.ctx.textAlign = 'left';\n  this.ctx.font = '10px \"Press Start 2P\"';\n  \n  for (let i = 0; i < this.menuOptions.length; i++) {\n    const y = 130 + i * 20;\n    \n    // Highlight selected option\n    if (i === this.cursorPosition) {\n      this.ctx.fillStyle = this.gameData.highlightColor;\n      this.ctx.fillText('> ' + this.menuOptions[i].toUpperCase(), 80, y);\n    } else {\n      this.ctx.fillStyle = 'white';\n      this.ctx.fillText(this.menuOptions[i].toUpperCase(), 80, y);\n    }\n  }\n}",
"renderTrading": "function() {\n  // Draw trading UI\n  const title = this.tradeMode === 'buy' ? 'BUY GOODS' : 'SELL GOODS';\n  \n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'top';\n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.fillText(title, this.canvas.width / 2, 20);\n  \n  this.ctx.textAlign = 'left';\n  this.ctx.font = '10px \"Press Start 2P\"';\n  \n  if (this.tradeMode === 'buy') {\n    // Draw goods list for buying\n    for (let i = 0; i < this.gameData.goods.length; i++) {\n      const good = this.gameData.goods[i];\n      const price = this.player.currentPlanet.prices[i];\n      const y = 50 + i * 15;\n      \n      // Highlight selected good\n      if (i === this.selectedGood) {\n        this.ctx.fillStyle = this.gameData.highlightColor;\n        this.ctx.fillText('> ' + good.name, 20, y);\n        this.ctx.textAlign = 'right';\n        this.ctx.fillText(price + ' cr', this.canvas.width - 20, y);\n        this.ctx.textAlign = 'left';\n      } else {\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillText(good.name, 20, y);\n        this.ctx.textAlign = 'right';\n        this.ctx.fillText(price + ' cr', this.canvas.width - 20, y);\n        this.ctx.textAlign = 'left';\n      }\n    }\n    \n    // Draw quantity selector\n    if (this.selectedGood !== null) {\n      const good = this.gameData.goods[this.selectedGood];\n      const price = this.player.currentPlanet.prices[this.selectedGood];\n      const total = price * this.tradeQuantity;\n      \n      this.ctx.fillStyle = 'white';\n      this.ctx.fillText('Quantity:', 20, 180);\n      this.ctx.textAlign = 'right';\n      this.ctx.fillText(this.tradeQuantity.toString(), this.canvas.width - 20, 180);\n      \n      this.ctx.fillText('Total:', 100, 200);\n      this.ctx.fillText(total + ' cr', this.canvas.width - 20, 200);\n      \n      // Draw cargo and credit limits\n      this.ctx.textAlign = 'left';\n      this.ctx.fillText('Cargo Space: ' + this.getTotalCargoUsed() + '/' + this.getTotalCargoSpace(), 20, 220);\n    }\n  } else {\n    // Draw inventory for selling\n    if (this.player.inventory.length === 0) {\n      this.ctx.fillStyle = 'white';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('NO GOODS TO SELL', this.canvas.width / 2, 100);\n    } else {\n      for (let i = 0; i < this.player.inventory.length; i++) {\n        const item = this.player.inventory[i];\n        const good = this.gameData.goods[item.goodId];\n        const price = this.player.currentPlanet.prices[item.goodId];\n        const y = 50 + i * 15;\n        \n        // Highlight selected good\n        if (i === this.selectedGood) {\n          this.ctx.fillStyle = this.gameData.highlightColor;\n          this.ctx.fillText('> ' + good.name + ' (' + item.quantity + ')', 20, y);\n          this.ctx.textAlign = 'right';\n          this.ctx.fillText(price + ' cr', this.canvas.width - 20, y);\n          this.ctx.textAlign = 'left';\n        } else {\n          this.ctx.fillStyle = 'white';\n          this.ctx.fillText(good.name + ' (' + item.quantity + ')', 20, y);\n          this.ctx.textAlign = 'right';\n          this.ctx.fillText(price + ' cr', this.canvas.width - 20, y);\n          this.ctx.textAlign = 'left';\n        }\n      }\n      \n      // Draw quantity selector\n      if (this.selectedGood !== null && this.player.inventory.length > 0) {\n        const item = this.player.inventory[this.selectedGood];\n        const good = this.gameData.goods[item.goodId];\n        const price = this.player.currentPlanet.prices[item.goodId];\n        const total = price * this.tradeQuantity;\n        \n        this.ctx.fillStyle = 'white';\n        this.ctx.fillText('Quantity:', 20, 180);\n        this.ctx.textAlign = 'right';\n        this.ctx.fillText(this.tradeQuantity.toString(), this.canvas.width - 20, 180);\n        \n        this.ctx.fillText('Total:', 100, 200);\n        this.ctx.fillText(total + ' cr', this.canvas.width - 20, 200);\n      }\n    }\n  }\n}",
    "renderTravel": "function() {\n  // Draw travel confirmation screen\n  const targetPlanet = this.planets[this.selectedPlanet];\n  const distance = this.distances[this.player.currentPlanet.id][targetPlanet.id];\n  const fuelNeeded = distance * this.gameData.fuelCostPerUnit;\n  \n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'top';\n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.fillText('CONFIRM TRAVEL', this.canvas.width / 2, 40);\n  \n  this.ctx.font = '10px \"Press Start 2P\"';\n  this.ctx.fillText('From: ' + this.player.currentPlanet.name, this.canvas.width / 2, 80);\n  this.ctx.fillText('To: ' + targetPlanet.name, this.canvas.width / 2, 100);\n  this.ctx.fillText('Distance: ' + distance + ' parsecs', this.canvas.width / 2, 120);\n  this.ctx.fillText('Fuel Required: ' + fuelNeeded, this.canvas.width / 2, 140);\n  \n  if (this.player.fuel >= fuelNeeded) {\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillText('Press A to confirm', this.canvas.width / 2, 180);\n  } else {\n    this.ctx.fillStyle = '#FF5252';\n    this.ctx.fillText('NOT ENOUGH FUEL!', this.canvas.width / 2, 180);\n  }\n  \n  this.ctx.fillStyle = 'white';\n  this.ctx.fillText('Press B to cancel', this.canvas.width / 2, 200);\n}",
    "renderInfo": "function() {\n  // Draw info screen\n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'top';\n  this.ctx.font = '8px \"Press Start 2P\"';\n  \n  const lineHeight = 12;\n  const lines = this.infoMessage.split('\\n');\n  \n  for (let i = 0; i < lines.length; i++) {\n    this.ctx.fillText(lines[i], 20, 20 + i * lineHeight);\n  }\n  \n  this.ctx.textAlign = 'center';\n  this.ctx.fillText('Press any button to continue', this.canvas.width / 2, 220);\n}",
    "renderStatusBar": "function() {\n  // Draw status bar at the bottom\n  this.ctx.fillStyle = this.gameData.uiColor;\n  this.ctx.fillRect(0, this.canvas.height - 20, this.canvas.width, 20);\n  \n  this.ctx.fillStyle = 'white';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'middle';\n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('CR: ' + this.player.credits, 5, this.canvas.height - 10);\n  \n  this.ctx.textAlign = 'center';\n  this.ctx.fillText(this.player.ship.name, this.canvas.width / 2, this.canvas.height - 10);\n  \n  this.ctx.textAlign = 'right';\n  this.ctx.fillText('FUEL: ' + this.player.fuel + '%', this.canvas.width - 5, this.canvas.height - 10);\n}",
    "getTotalCargoSpace": "function() {\n  return this.player.ship.capacity;\n}",
    "getTotalCargoUsed": "function() {\n  return this.player.inventory.reduce((total, item) => total + item.quantity, 0);\n}",
    "buyGoods": "function(goodId, quantity) {\n  if (quantity <= 0) return;\n  \n  const price = this.player.currentPlanet.prices[goodId];\n  const totalCost = price * quantity;\n  \n  // Check if player has enough credits\n  if (this.player.credits < totalCost) {\n    return;\n  }\n  \n  // Check if there's enough cargo space\n  if (this.getTotalCargoUsed() + quantity > this.getTotalCargoSpace()) {\n    return;\n  }\n  \n  // Update player's credits\n  this.player.credits -= totalCost;\n  \n  // Add goods to inventory\n  const existingIndex = this.player.inventory.findIndex(item => item.goodId === goodId);\n  if (existingIndex !== -1) {\n    this.player.inventory[existingIndex].quantity += quantity;\n  } else {\n    this.player.inventory.push({\n      goodId: goodId,\n      quantity: quantity,\n      purchasePrice: price\n    });\n  }\n  \n  // Reset trade quantity\n  this.tradeQuantity = 0;\n}",
    "sellGoods": "function(inventoryIndex, quantity) {\n  if (quantity <= 0 || inventoryIndex >= this.player.inventory.length) return;\n  \n  const item = this.player.inventory[inventoryIndex];\n  if (quantity > item.quantity) {\n    quantity = item.quantity;\n  }\n  \n  const price = this.player.currentPlanet.prices[item.goodId];\n  const totalValue = price * quantity;\n  \n  // Update player's credits\n  this.player.credits += totalValue;\n  \n  // Remove goods from inventory\n  item.quantity -= quantity;\n  if (item.quantity <= 0) {\n    this.player.inventory.splice(inventoryIndex, 1);\n    if (this.selectedGood >= this.player.inventory.length) {\n      this.selectedGood = this.player.inventory.length > 0 ? this.player.inventory.length - 1 : null;\n    }\n  }\n  \n  // Reset trade quantity\n  this.tradeQuantity = 0;\n  \n  // Check win condition after selling\n  this.checkWinCondition();\n}",
    "upgradeShip": "function() {\n  // Find next ship upgrade\n  let nextShipIndex = -1;\n  for (let i = 0; i < this.gameData.shipUpgrades.length; i++) {\n    if (this.gameData.shipUpgrades[i] === this.player.ship) {\n      nextShipIndex = i + 1;\n      break;\n    }\n  }\n  \n  if (nextShipIndex >= this.gameData.shipUpgrades.length) {\n    // Already have best ship\n    return;\n  }\n  \n  const nextShip = this.gameData.shipUpgrades[nextShipIndex];\n  \n  // Check if player can afford it\n  if (this.player.credits < nextShip.cost) {\n    return;\n  }\n  \n  // Check if current cargo would fit in new ship\n  if (this.getTotalCargoUsed() > nextShip.capacity) {\n    return;\n  }\n  \n  // Purchase the upgrade\n  this.player.credits -= nextShip.cost;\n  this.player.ship = nextShip;\n  \n  // Check win condition after purchasing ship\n  this.checkWinCondition();\n}",
    "refuelShip": "function() {\n  const missingFuel = 100 - this.player.fuel;\n  const fuelCost = 10; // cost per 1% of fuel\n  const totalCost = missingFuel * fuelCost;\n  \n  if (missingFuel <= 0) {\n    return; // Tank is full\n  }\n  \n  if (this.player.credits < totalCost) {\n    // Not enough credits - buy what you can afford\n    const affordableFuel = Math.floor(this.player.credits / fuelCost);\n    if (affordableFuel <= 0) return;\n    \n    this.player.fuel += affordableFuel;\n    this.player.credits -= affordableFuel * fuelCost;\n  } else {\n    // Fill up completely\n    this.player.fuel = 100;\n    this.player.credits -= totalCost;\n  }\n}",
    "checkWinCondition": "function() {\n  // Check if player has reached the win condition (100,000 credits)\n  if (this.player.credits >= 100000) {\n    this.gameOver = true;\n    this.gameWon = true;\n  }\n}",
    "restart": "function() {\n  this.state = 'galaxy';\n  this.selectedPlanet = null;\n  this.selectedGood = null;\n  this.tradeQuantity = 0;\n  this.tradeMode = 'buy';\n  this.infoMessage = null;\n  this.cursorPosition = 0;\n  this.menuOptions = [];\n  \n  this.player = {\n    credits: this.gameData.startingCredits,\n    currentPlanet: null,\n    ship: this.gameData.shipUpgrades[0],\n    inventory: [],\n    fuel: 100\n  };\n  \n  this.days = 0;\n  this.gameOver = false;\n  this.gameWon = false;\n  \n  this.generateGalaxy();\n  this.player.currentPlanet = this.planets[0];\n  this.updatePrices();\n}"
  }
}