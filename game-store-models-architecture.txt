================================================================================
GAME STORE MODELS - ARCHITECTURE DIAGRAM
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                          GAME STORE ARCHITECTURE                             │
└─────────────────────────────────────────────────────────────────────────────┘

                              ┌─────────────────┐
                              │   AppConfig     │
                              ├─────────────────┤
                              │ • repository    │
                              │ • categories    │
                              │ • storage keys  │
                              │ • animations    │
                              └─────────────────┘
                                      │
                      ┌───────────────┼───────────────┐
                      │               │               │
                      ▼               ▼               ▼

        ┌──────────────────┐  ┌──────────────────┐  ┌──────────────────┐
        │   Game Class     │  │  StateManager    │  │ StorageService   │
        ├──────────────────┤  ├──────────────────┤  ├──────────────────┤
        │ PROPERTIES:      │  │ STATE:           │  │ METHODS:         │
        │ • id             │  │ • games[]        │  │ • save()         │
        │ • name           │  │ • filteredGames[]│  │ • load()         │
        │ • description    │  │ • currentView    │  │ • remove()       │
        │ • icon           │  │ • currentCategory│  │ • saveLocal..()  │
        │ • category       │  │ • searchQuery    │  │ • loadLocal..()  │
        │ • url            │  │ • favorites      │  │ • saveFavorites()│
        │ • size           │  │ • installedGames │  │ • loadFavorites()│
        │ • isLocal        │  │ • selectedIndex  │  │ • clearAll()     │
        │ • code           │  │ • inputMode      │  │ • exportAll()    │
        │ • author         │  │                  │  │ • importAll()    │
        │ • version        │  │ METHODS:         │  │ • isAvailable()  │
        │                  │  │ • setState()     │  │ • getSize()      │
        │ METHODS:         │  │ • getState()     │  └──────────────────┘
        │ • toJSON()       │  │ • get()          │           │
        │ • isValid()      │  │ • subscribe()    │           │
        │ • clone()        │  │ • notify()       │           │
        └──────────────────┘  │ • reset()        │           │
                │             │ • clearSubs()    │           │
                │             └──────────────────┘           │
                │                      │                     │
                │                      │                     │
                │                      │                     ▼
                │                      │         ┌──────────────────────┐
                │                      │         │   LocalStorage       │
                │                      │         ├──────────────────────┤
                │                      │         │ steamDeck_          │
                │                      │         │ • favorites_v1      │
                │                      │         │ • installed_v1      │
                │                      │         │ • localGames_v1     │
                │                      │         │ • settings_v1       │
                │                      │         └──────────────────────┘
                │                      │
                └──────────┬───────────┘
                           │
                           ▼
              ┌─────────────────────────┐
              │     GameUtils           │
              ├─────────────────────────┤
              │ STATIC METHODS:         │
              │ • filterGames()         │
              │ • sortGames()           │
              │ • validateGameData()    │
              │ • generateGameId()      │
              │ • formatFileSize()      │
              └─────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                             DATA FLOW                                        │
└─────────────────────────────────────────────────────────────────────────────┘

  1. INITIALIZATION
     ┌──────────────────────────────────────────────────────────────┐
     │ App Starts → StateManager created → Load from LocalStorage   │
     └──────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
                    ┌──────────────────────────────┐
                    │ StorageService.loadLocalGames()│
                    │ StorageService.loadFavorites() │
                    │ StorageService.loadInstalled() │
                    └──────────────────────────────┘
                                    │
                                    ▼
                    ┌──────────────────────────────┐
                    │ stateManager.setState({      │
                    │   games, favorites, installed│
                    │ })                           │
                    └──────────────────────────────┘

  2. USER INTERACTION
     ┌──────────────────────────────────────────────────────────────┐
     │ User Action → Update State → Notify Subscribers → Update UI  │
     └──────────────────────────────────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ User creates/edits game        │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ new Game({ ... })              │
           │ GameUtils.validateGameData()   │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ stateManager.setState({        │
           │   games: [...games, newGame]   │
           │ })                             │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ Subscribers notified           │
           │ UI components re-render        │
           └────────────────────────────────┘

  3. PERSISTENCE
     ┌──────────────────────────────────────────────────────────────┐
     │ State Change → Save to LocalStorage → Persist                │
     └──────────────────────────────────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ StorageService.saveLocalGames()│
           │ StorageService.saveFavorites() │
           │ StorageService.saveInstalled() │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ Data persisted in localStorage │
           │ Available after page reload    │
           └────────────────────────────────┘

  4. FILTERING & SEARCH
     ┌──────────────────────────────────────────────────────────────┐
     │ Search/Filter → GameUtils → Update State → Re-render         │
     └──────────────────────────────────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ User searches or filters       │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ GameUtils.filterGames(games, { │
           │   category: 'puzzle',          │
           │   searchQuery: 'tetris'        │
           │ })                             │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ stateManager.setState({        │
           │   filteredGames: filtered      │
           │ })                             │
           └────────────────────────────────┘
                            │
                            ▼
           ┌────────────────────────────────┐
           │ UI updates to show filtered    │
           │ games                          │
           └────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                        SUBSCRIPTION PATTERN                                  │
└─────────────────────────────────────────────────────────────────────────────┘

              ┌──────────────────────────────────────┐
              │         StateManager                 │
              │                                      │
              │  state = {                           │
              │    games: [],                        │
              │    favorites: new Set()              │
              │  }                                   │
              │                                      │
              │  subscribers = Map {                 │
              │    'games': Set([callback1, ...])    │
              │    'favorites': Set([callback2, ...])│
              │  }                                   │
              └──────────────────────────────────────┘
                            │
          ┌─────────────────┼─────────────────┐
          │                 │                 │
          ▼                 ▼                 ▼
    ┌─────────┐      ┌─────────┐      ┌─────────┐
    │Component│      │Component│      │Component│
    │    1    │      │    2    │      │    3    │
    └─────────┘      └─────────┘      └─────────┘
         │                │                │
         │ subscribe()    │ subscribe()    │ subscribe()
         ▼                ▼                ▼
    Callback1        Callback2        Callback3

    When setState() is called:
    1. State is updated
    2. notify() iterates over subscribers
    3. Each callback is invoked with new value
    4. Components re-render/update


┌─────────────────────────────────────────────────────────────────────────────┐
│                        CLASS RELATIONSHIPS                                   │
└─────────────────────────────────────────────────────────────────────────────┘

    Game                StateManager           StorageService
      │                      │                       │
      │ creates              │                       │
      ├──────────────────────┤                       │
      │                      │ saves/loads           │
      │                      ├───────────────────────┤
      │                      │                       │
      │                      │                       │
    GameUtils                │                       │
      │                      │                       │
      │ validates/filters    │                       │
      ├──────────────────────┤                       │
      │                      │                       │
      │                      │                       │

    Dependencies:
    - Game: No dependencies (pure data class)
    - StateManager: No dependencies (self-contained)
    - StorageService: Depends on Game class for serialization
    - GameUtils: Depends on Game class and AppConfig


┌─────────────────────────────────────────────────────────────────────────────┐
│                          USAGE PATTERNS                                      │
└─────────────────────────────────────────────────────────────────────────────┘

  PATTERN 1: Initialize Application
  ──────────────────────────────────
  const stateManager = new StateManager();
  const games = StorageService.loadLocalGames();
  const favorites = StorageService.loadFavorites();
  stateManager.setState({ games, favorites });

  PATTERN 2: Create and Save Game
  ────────────────────────────────
  const game = new Game({ id: GameUtils.generateGameId(), ... });
  if (GameUtils.validateGameData(game).valid) {
    const games = [...stateManager.get('games'), game];
    stateManager.setState({ games });
    StorageService.saveLocalGames(games);
  }

  PATTERN 3: Reactive UI Update
  ──────────────────────────────
  stateManager.subscribe('filteredGames', (games) => {
    renderGameGrid(games);
  });

  PATTERN 4: Filter and Search
  ─────────────────────────────
  const filtered = GameUtils.filterGames(allGames, {
    category: stateManager.get('currentCategory'),
    searchQuery: stateManager.get('searchQuery')
  });
  stateManager.setState({ filteredGames: filtered });

  PATTERN 5: Toggle Favorite
  ──────────────────────────
  const favorites = new Set(stateManager.get('favorites'));
  favorites.has(id) ? favorites.delete(id) : favorites.add(id);
  stateManager.setState({ favorites });
  StorageService.saveFavorites(favorites);


┌─────────────────────────────────────────────────────────────────────────────┐
│                        EXTENSION POINTS                                      │
└─────────────────────────────────────────────────────────────────────────────┘

  1. Add new Game properties:
     - Extend Game class constructor
     - Update toJSON() method
     - Add to validation in GameUtils

  2. Add new state properties:
     - Add to StateManager initial state
     - Create subscription handlers
     - Add save/load methods if persistent

  3. Add new storage types:
     - Add new methods to StorageService
     - Add new keys to AppConfig.storage
     - Update exportAllData/importAllData

  4. Add new filter/sort options:
     - Extend GameUtils.filterGames()
     - Extend GameUtils.sortGames()
     - Update UI to expose new options

  5. Add remote sync:
     - Create RemoteSyncService class
     - Implement sync methods
     - Add sync state to StateManager


================================================================================
                            END OF ARCHITECTURE
================================================================================
