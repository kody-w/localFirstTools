<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="WoWmon - An accessible Warcraft-themed creature collection game inspired by Pokemon">
    <title>WoWmon - Pocket Creatures of Azeroth</title>
    <style>
        /* CSS Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: monospace;
            background: #2d2d2d;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }

        /* Game Boy Color Palette */
        :root {
            --gb-darkest: #0f380f;
            --gb-dark: #306230;
            --gb-light: #8bac0f;
            --gb-lightest: #9bbc0f;
            --screen-width: 320px;
            --screen-height: 288px;
            --pixel-size: 2;
        }

        /* Main Container */
        .game-container {
            background: #8b956d;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            position: relative;
        }

        /* Screen */
        .game-screen {
            width: var(--screen-width);
            height: var(--screen-height);
            background: var(--gb-lightest);
            position: relative;
            border: 20px solid #556b2f;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
        }

        /* Canvas */
        #gameCanvas {
            width: 100%;
            height: 100%;
            display: block;
            image-rendering: pixelated;
        }

        /* UI Overlays */
        .ui-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .text-box {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--gb-lightest);
            border: 4px solid var(--gb-darkest);
            padding: 8px;
            font-size: 16px;
            color: var(--gb-darkest);
            min-height: 60px;
            display: none;
            font-family: monospace;
        }

        .text-box.active {
            display: block;
            pointer-events: all;
        }

        .menu {
            position: absolute;
            background: var(--gb-lightest);
            border: 4px solid var(--gb-darkest);
            padding: 8px;
            display: none;
            color: var(--gb-darkest);
            min-width: 120px;
        }

        .menu.active {
            display: block;
            pointer-events: all;
        }

        .menu-option {
            padding: 4px;
            cursor: pointer;
            font-family: monospace;
        }

        .menu-option.selected {
            background: var(--gb-darkest);
            color: var(--gb-lightest);
        }

        /* Controls */
        .controls {
            margin-top: 30px;
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }

        .control-group {
            display: flex;
            gap: 10px;
        }

        .btn {
            background: #4a5a3a;
            border: none;
            color: #8b956d;
            padding: 15px 20px;
            border-radius: 50%;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 4px 0 #2d3a1d;
            transition: all 0.1s;
            font-family: monospace;
            font-size: 14px;
            user-select: none;
        }

        .btn:active {
            transform: translateY(2px);
            box-shadow: 0 2px 0 #2d3a1d;
        }

        .dpad {
            display: grid;
            grid-template-columns: 40px 40px 40px;
            grid-template-rows: 40px 40px 40px;
            gap: 2px;
        }

        .dpad-btn {
            background: #4a5a3a;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            box-shadow: 0 2px 0 #2d3a1d;
            user-select: none;
        }

        .dpad-btn:active {
            transform: translateY(1px);
            box-shadow: 0 1px 0 #2d3a1d;
        }

        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }

        /* Cartridge Controls */
        .cartridge-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 10px;
        }

        .cartridge-btn {
            background: #4a5a3a;
            border: none;
            color: #8b956d;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            box-shadow: 0 2px 0 #2d3a1d;
            font-family: monospace;
        }

        .cartridge-btn:active {
            transform: translateY(1px);
            box-shadow: 0 1px 0 #2d3a1d;
        }

        /* File input hidden */
        #cartridgeInput, #saveInput {
            display: none;
        }

        /* Battle UI */
        .battle-ui {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: none;
            pointer-events: none;
        }

        .battle-ui.active {
            display: block;
        }

        .creature-info {
            position: absolute;
            background: var(--gb-lightest);
            border: 2px solid var(--gb-darkest);
            padding: 4px;
            font-size: 12px;
            font-family: monospace;
        }

        .player-info {
            bottom: 60px;
            right: 10px;
        }

        .enemy-info {
            top: 10px;
            left: 10px;
        }

        .hp-bar {
            width: 100px;
            height: 4px;
            background: var(--gb-darkest);
            margin: 2px 0;
        }

        .hp-fill {
            height: 100%;
            background: var(--gb-dark);
            transition: width 0.3s;
        }

        .hp-fill.low {
            background: #8b0000;
        }

        /* Loading Screen */
        .loading-screen {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--gb-darkest);
            color: var(--gb-lightest);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            font-size: 16px;
            font-family: monospace;
        }

        .loading-screen.hidden {
            display: none;
        }

        /* Move Selection Menu */
        .move-menu {
            position: absolute;
            bottom: 10px;
            left: 10px;
            right: 10px;
            background: var(--gb-lightest);
            border: 4px solid var(--gb-darkest);
            padding: 8px;
            display: none;
        }

        .move-menu.active {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            pointer-events: all;
        }

        .move-option {
            padding: 8px;
            border: 2px solid var(--gb-darkest);
            cursor: pointer;
            font-family: monospace;
            font-size: 12px;
            text-align: center;
        }

        .move-option.selected {
            background: var(--gb-darkest);
            color: var(--gb-lightest);
        }

        .move-option small {
            display: block;
            font-size: 10px;
            opacity: 0.8;
        }

        /* Accessibility Enhancements */

        /* Focus indicators for keyboard navigation */
        button:focus,
        .menu-option:focus,
        .move-option:focus,
        .dpad-btn:focus,
        .btn:focus,
        .cartridge-btn:focus {
            outline: 3px solid #ffcc00;
            outline-offset: 2px;
            z-index: 1000;
        }

        /* Skip to content link */
        .skip-link {
            position: absolute;
            top: -40px;
            left: 0;
            background: #000;
            color: #fff;
            padding: 8px;
            text-decoration: none;
            z-index: 10000;
        }

        .skip-link:focus {
            top: 0;
        }

        /* Screen reader only content */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border-width: 0;
        }

        /* Live region for screen reader announcements */
        .live-region {
            position: absolute;
            left: -10000px;
            width: 1px;
            height: 1px;
            overflow: hidden;
        }

        /* Accessibility Settings Panel */
        .accessibility-panel {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #8b956d;
            border: 4px solid #2d3a1d;
            padding: 20px;
            border-radius: 10px;
            display: none;
            z-index: 10000;
            min-width: 300px;
            max-width: 90vw;
            color: #0f380f;
        }

        .accessibility-panel.active {
            display: block;
        }

        .accessibility-panel h2 {
            margin-bottom: 15px;
            font-size: 18px;
            color: #0f380f;
        }

        .accessibility-option {
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .accessibility-option label {
            cursor: pointer;
            font-size: 14px;
        }

        .accessibility-option input[type="checkbox"],
        .accessibility-option input[type="range"] {
            cursor: pointer;
        }

        .accessibility-option input[type="range"] {
            flex: 1;
        }

        /* High contrast mode */
        body.high-contrast {
            background: #000;
        }

        body.high-contrast .game-container {
            background: #fff;
            border: 4px solid #000;
        }

        body.high-contrast .game-screen {
            border-color: #000;
        }

        body.high-contrast .btn,
        body.high-contrast .dpad-btn,
        body.high-contrast .cartridge-btn {
            background: #000;
            color: #fff;
            border: 2px solid #fff;
        }

        body.high-contrast .text-box,
        body.high-contrast .menu {
            background: #fff;
            border-color: #000;
            color: #000;
        }

        /* Reduced motion */
        @media (prefers-reduced-motion: reduce) {
            *,
            *::before,
            *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        body.reduced-motion * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }

        /* Large text mode */
        body.large-text {
            font-size: 120%;
        }

        body.large-text .text-box,
        body.large-text .menu-option,
        body.large-text .move-option {
            font-size: 18px;
        }

        body.large-text .btn,
        body.large-text .cartridge-btn {
            font-size: 16px;
            padding: 18px 24px;
        }

        /* Button with proper tabindex styling */
        [tabindex]:focus {
            outline: 3px solid #ffcc00;
            outline-offset: 2px;
        }

        /* Better focus for menu options */
        .menu-option[tabindex]:focus,
        .move-option[tabindex]:focus {
            outline: 3px solid #ffcc00;
            outline-offset: -2px;
        }

        .close-panel-btn {
            background: #4a5a3a;
            border: none;
            color: #8b956d;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 15px;
            box-shadow: 0 2px 0 #2d3a1d;
            font-family: monospace;
        }

        .close-panel-btn:active {
            transform: translateY(1px);
            box-shadow: 0 1px 0 #2d3a1d;
        }

        /* Mobile Fullscreen Toggle */
        .fullscreen-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: #4a5a3a;
            border: none;
            color: #8b956d;
            padding: 12px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 18px;
            box-shadow: 0 3px 0 #2d3a1d;
            z-index: 1000;
            display: none;
            user-select: none;
            font-family: monospace;
        }

        .fullscreen-btn:active {
            transform: translateY(2px);
            box-shadow: 0 1px 0 #2d3a1d;
        }

        /* Mobile-specific styles */
        @media (max-width: 768px) {
            body {
                padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
                align-items: flex-start;
                overflow-x: hidden;
            }

            .fullscreen-btn {
                display: block;
            }

            .game-container {
                padding: 15px;
                margin: 10px;
                width: calc(100% - 20px);
                max-width: 100%;
                border-radius: 10px;
            }

            .game-screen {
                width: 100%;
                max-width: 400px;
                height: auto;
                aspect-ratio: 10 / 9;
                border: 10px solid #556b2f;
            }

            #gameCanvas {
                touch-action: none;
            }

            .controls {
                margin-top: 20px;
                gap: 15px;
                flex-wrap: wrap;
                justify-content: center;
            }

            .dpad {
                grid-template-columns: 48px 48px 48px;
                grid-template-rows: 48px 48px 48px;
                gap: 4px;
            }

            .dpad-btn {
                min-width: 48px;
                min-height: 48px;
                font-size: 18px;
                touch-action: manipulation;
            }

            .btn {
                min-width: 64px;
                min-height: 64px;
                padding: 20px 24px;
                font-size: 16px;
                touch-action: manipulation;
            }

            .cartridge-controls {
                position: relative;
                top: 0;
                right: 0;
                flex-direction: column;
                gap: 8px;
                margin-bottom: 15px;
                width: 100%;
            }

            .cartridge-btn {
                min-height: 48px;
                padding: 12px 16px;
                font-size: 14px;
                width: 100%;
                touch-action: manipulation;
            }

            .menu-option {
                padding: 12px;
                font-size: 16px;
                min-height: 48px;
                display: flex;
                align-items: center;
            }

            .move-option {
                padding: 12px;
                font-size: 14px;
                min-height: 56px;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }

            .text-box {
                font-size: 14px;
                padding: 12px;
                min-height: 80px;
            }

            .creature-info {
                font-size: 11px;
                padding: 6px;
            }

            .hp-bar {
                width: 80px;
                height: 6px;
            }
        }

        @media (max-width: 768px) and (orientation: portrait) {
            body {
                align-items: flex-start;
                padding-top: max(10px, env(safe-area-inset-top));
            }

            .game-container {
                margin-top: 5px;
            }

            .controls {
                width: 100%;
            }

            .control-group {
                flex: 1;
                justify-content: center;
            }
        }

        @media (max-width: 932px) and (orientation: landscape) {
            body {
                padding: 5px;
                align-items: center;
            }

            .game-container {
                display: flex;
                flex-direction: row;
                gap: 15px;
                padding: 15px;
                margin: 5px;
                max-height: 95vh;
            }

            .game-screen {
                max-width: 60%;
                height: auto;
                max-height: 80vh;
            }

            .controls {
                flex-direction: column;
                margin-top: 0;
                gap: 10px;
                justify-content: center;
            }

            .cartridge-controls {
                position: absolute;
                top: 5px;
                right: 5px;
                flex-direction: row;
                flex-wrap: wrap;
                width: auto;
                max-width: 300px;
            }

            .cartridge-btn {
                width: auto;
                font-size: 11px;
                padding: 8px 10px;
                min-height: 36px;
            }
        }

        @media (max-width: 480px) {
            .game-container {
                padding: 10px;
                margin: 5px;
            }

            .game-screen {
                border: 5px solid #556b2f;
            }

            .cartridge-btn {
                font-size: 12px;
                padding: 10px 12px;
            }

            .dpad {
                grid-template-columns: 44px 44px 44px;
                grid-template-rows: 44px 44px 44px;
            }

            .dpad-btn {
                min-width: 44px;
                min-height: 44px;
                font-size: 16px;
            }

            .btn {
                min-width: 56px;
                min-height: 56px;
                padding: 16px 20px;
                font-size: 14px;
            }

            .fullscreen-btn {
                padding: 10px 12px;
                font-size: 16px;
                top: 5px;
                left: 5px;
            }
        }

        body.fullscreen {
            padding: 0;
        }

        body.fullscreen .game-container {
            width: 100vw;
            height: 100vh;
            max-width: 100vw;
            max-height: 100vh;
            margin: 0;
            border-radius: 0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
        }

        body.fullscreen .game-screen {
            max-width: 100%;
            flex: 1;
            height: auto;
            border-width: 5px;
        }

        body.fullscreen .fullscreen-btn {
            position: absolute;
            z-index: 2000;
        }

        .btn:active,
        .dpad-btn:active,
        .cartridge-btn:active,
        .menu-option:active,
        .move-option:active {
            opacity: 0.8;
        }

        .game-container,
        .controls,
        .btn,
        .dpad-btn,
        .menu-option,
        .move-option {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

    </style>
</head>
<body>
    <!-- Mobile Fullscreen Toggle -->
    <button class="fullscreen-btn" onclick="game.toggleFullscreen()" title="Toggle Fullscreen">⛶</button>

    <!-- Accessibility Features -->
    <a href="#game-screen" class="skip-link">Skip to game content</a>

    <!-- Screen reader live region for announcements -->
    <div class="live-region" role="status" aria-live="polite" aria-atomic="true" id="liveRegion"></div>

    <!-- Accessibility Settings Panel -->
    <div class="accessibility-panel" id="accessibilityPanel" role="dialog" aria-labelledby="a11y-panel-title" aria-hidden="true">
        <h2 id="a11y-panel-title">Accessibility Settings</h2>
        <div class="accessibility-option">
            <input type="checkbox" id="highContrastToggle" aria-label="Enable high contrast mode">
            <label for="highContrastToggle">High Contrast Mode</label>
        </div>
        <div class="accessibility-option">
            <input type="checkbox" id="reducedMotionToggle" aria-label="Enable reduced motion">
            <label for="reducedMotionToggle">Reduced Motion</label>
        </div>
        <div class="accessibility-option">
            <input type="checkbox" id="largeTextToggle" aria-label="Enable large text">
            <label for="largeTextToggle">Large Text (120%)</label>
        </div>
        <div class="accessibility-option">
            <input type="checkbox" id="screenReaderMode" aria-label="Enable enhanced screen reader announcements">
            <label for="screenReaderMode">Enhanced Screen Reader</label>
        </div>
        <div class="accessibility-option">
            <label for="textSpeedRange">Text Speed:</label>
            <input type="range" id="textSpeedRange" min="1" max="5" value="3" aria-label="Adjust text display speed">
            <span id="textSpeedValue" aria-live="polite">3</span>
        </div>
        <button class="close-panel-btn" onclick="game.toggleAccessibilityPanel()" aria-label="Close accessibility settings">Close</button>
    </div>


    <div class="game-container">
        <!-- Cartridge Controls -->
        <div class="cartridge-controls">
            <button class="cartridge-btn" onclick="game.loadCartridge()" aria-label="Load game cartridge from file">Load Game</button>
            <button class="cartridge-btn" onclick="game.autoLoadWoWmon()" aria-label="Load WoWmon game automatically">Load WoWmon</button>
            <button class="cartridge-btn" onclick="game.exportSave()" aria-label="Export save game data to file">Export Save</button>
            <button class="cartridge-btn" onclick="game.importSave()" aria-label="Import save game data from file">Import Save</button>
            <input type="file" id="cartridgeInput" accept=".json" onchange="game.handleCartridgeLoad(event)">
            <input type="file" id="saveInput" accept=".json" onchange="game.handleSaveLoad(event)">
        </div>

        <!-- Game Screen -->
        <div class="game-screen" id="game-screen" role="application" aria-label="WoWmon game screen">
            <canvas id="gameCanvas" width="160" height="144" aria-label="Game canvas - visual game display" role="img"></canvas>
            
            <!-- Loading Screen -->
            <div class="loading-screen" id="loadingScreen">
                <h2>WoWmon</h2>
                <p>Pocket Creatures of Azeroth</p>
                <br>
                <p style="font-size: 12px;">Click "Load WoWmon" to start!</p>
            </div>
            
            <!-- UI Overlays -->
            <div class="ui-overlay">
                <!-- Text Box -->
                <div class="text-box" id="textBox" role="dialog" aria-live="polite" aria-label="Game dialogue">
                    <div id="textContent"></div>
                </div>
                
                <!-- Battle UI -->
                <div class="battle-ui" id="battleUI" role="complementary" aria-label="Battle status information">
                    <div class="creature-info enemy-info">
                        <div id="enemyName">ENEMY</div>
                        <div>Lv.<span id="enemyLevel">5</span></div>
                        <div class="hp-bar">
                            <div class="hp-fill" id="enemyHP" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="creature-info player-info">
                        <div id="playerName">PLAYER</div>
                        <div>Lv.<span id="playerLevel">5</span></div>
                        <div class="hp-bar">
                            <div class="hp-fill" id="playerHP" style="width: 100%"></div>
                        </div>
                        <div>HP: <span id="playerHPText">20/20</span></div>
                    </div>
                </div>
                
                <!-- Move Selection Menu -->
                <div class="move-menu" id="moveMenu" role="menu" aria-label="Move selection menu">
                    <div class="move-option selected" data-move-index="0">
                        <span id="move0Name">MOVE 1</span>
                        <small>PP: <span id="move0PP">10/10</span></small>
                    </div>
                    <div class="move-option" data-move-index="1">
                        <span id="move1Name">MOVE 2</span>
                        <small>PP: <span id="move1PP">10/10</span></small>
                    </div>
                    <div class="move-option" data-move-index="2">
                        <span id="move2Name">MOVE 3</span>
                        <small>PP: <span id="move2PP">10/10</span></small>
                    </div>
                    <div class="move-option" data-move-index="3">
                        <span id="move3Name">MOVE 4</span>
                        <small>PP: <span id="move3PP">10/10</span></small>
                    </div>
                </div>
                
                <!-- Menus -->
                <div class="menu" id="mainMenu" role="menu" aria-label="Main game menu" style="top: 10px; right: 10px;">
                    <div class="menu-option selected" role="menuitem" tabindex="0" aria-label="View creatures">CREATURES</div>
                    <div class="menu-option" role="menuitem" tabindex="-1" aria-label="Open bag">BAG</div>
                    <div class="menu-option" role="menuitem" tabindex="-1" aria-label="Save game">SAVE</div>
                    <div class="menu-option" role="menuitem" tabindex="-1" aria-label="Exit menu">EXIT</div>
                </div>
                
                <div class="menu" id="battleMenu" role="menu" aria-label="Battle menu" style="bottom: 70px; right: 10px;">
                    <div class="menu-option selected" role="menuitem" tabindex="0" aria-label="Choose fight action">FIGHT</div>
                
                <div class="menu" id="statsMenu" style="top: 10px; left: 10px; right: 10px; max-height: 250px; overflow-y: auto;">
                    <div id="statsContent" style="font-size: 10px; line-height: 1.4;">
                        <strong>STATS</strong><br>
                        Battles Won: <span id="statBattlesWon">0</span><br>
                        Creatures Caught: <span id="statCreaturesCaught">0</span><br>
                        Unique Species: <span id="statUniqueSpecies">0</span><br>
                        Highest Level: <span id="statHighestLevel">0</span><br>
                        Win Streak: <span id="statWinStreak">0</span><br>
                        Max Win Streak: <span id="statMaxWinStreak">0</span><br>
                        Play Time: <span id="statPlayTime">0:00:00</span><br>
                        <br><strong>ACHIEVEMENTS</strong><br>
                        <span id="achievementList">None unlocked</span>
                    </div>
                </div>

                <div class="menu" id="journalMenu" style="top: 10px; left: 10px; right: 10px; max-height: 250px; overflow-y: auto;">
                    <div id="journalContent" style="font-size: 10px; line-height: 1.4;">
                        <strong>JOURNAL</strong><br>
                        <div id="journalEntries">No entries yet</div>
                    </div>
                </div>
                    <div class="menu-option">CREATURES</div>
                    <div class="menu-option">RUN</div>
                </div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <div class="control-group">
                <div class="dpad">
                    <button class="dpad-btn" id="up" data-key="ArrowUp" aria-label="Move up">▲</button>
                    <button class="dpad-btn" id="left" data-key="ArrowLeft" aria-label="Move left">◄</button>
                    <button class="dpad-btn" id="right" data-key="ArrowRight" aria-label="Move right">►</button>
                    <button class="dpad-btn" id="down" data-key="ArrowDown" aria-label="Move down">▼</button>
                </div>
            </div>
            <div class="control-group">
                <button class="btn" data-key="z" aria-label="Action button A - Confirm and interact">A</button>
                <button class="btn" data-key="x" aria-label="Action button B - Cancel and go back">B</button>
            </div>
            <div class="control-group">
                <button class="btn" data-key="Enter" aria-label="Start button - Open main menu">START</button>
                <button class="btn" data-key="Shift" aria-label="Select button - Open creature quick menu">SELECT</button>
            </div>
        </div>
    </div>

    <script>
        // WoWmon Game Engine
        class GameEngine {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.ctx.imageSmoothingEnabled = false;
                
                this.cartridge = null;
                this.saveData = null;
                this.isRunning = false;
                
                this.state = 'LOADING';
                this.previousState = null;
                this.player = null;
                this.map = null;
                this.creatures = [];
                
                this.keys = {};
                this.lastFrame = 0;
                this.frameCount = 0;
                
                this.tileSize = 8;
                this.screenTilesX = 20;
                this.screenTilesY = 18;
                
                // Movement
                this.moveTimer = 0;
                this.moveDelay = 150; // ms between moves
                this.isMoving = false;
                
                // Battle state
                this.battle = null;
                this.battleMenuIndex = 0;
                this.moveMenuIndex = 0;
                this.showingMoves = false;
                
                // Menu state
                this.menuIndex = 0;
                
                // Text state
                this.textQueue = [];
                this.currentText = null;
                this.textTimer = 0;
                
                this.init();
            }
            
            init() {
                this.setupInput();
                this.showLoadingScreen();
                this.initializeAccessibility();
                this.gameLoop();
            }
            
            setupInput() {
                // Keyboard input
                document.addEventListener('keydown', (e) => {
                    if (!this.keys[e.key]) {
                        this.keys[e.key] = true;
                        this.handleKeyPress(e.key);
                    }
                    e.preventDefault();
                });
                
                document.addEventListener('keyup', (e) => {
                    this.keys[e.key] = false;
                    e.preventDefault();
                });
                
                // Button input
                document.querySelectorAll('[data-key]').forEach(btn => {
                    btn.addEventListener('mousedown', () => {
                        if (!this.keys[btn.dataset.key]) {
                            this.keys[btn.dataset.key] = true;
                            this.handleKeyPress(btn.dataset.key);
                        }
                    });
                    btn.addEventListener('mouseup', () => {
                        this.keys[btn.dataset.key] = false;
                    });
                    btn.addEventListener('touchstart', (e) => {
                        e.preventDefault();
                        if (!this.keys[btn.dataset.key]) {
                            this.keys[btn.dataset.key] = true;
                            this.handleKeyPress(btn.dataset.key);
                            this.vibrate(10);
                        }
                    });
                    btn.addEventListener('touchend', (e) => {
                        e.preventDefault();
                        this.keys[btn.dataset.key] = false;
                    });
                });

                // Canvas touch/swipe controls for mobile
                this.setupCanvasTouch();
            }

            vibrate(duration = 10) {
                if (navigator.vibrate) {
                    navigator.vibrate(duration);
                }
            }

            setupCanvasTouch() {
                const canvas = this.canvas;
                let touchStartX = 0;
                let touchStartY = 0;
                let touchStartTime = 0;
                const SWIPE_THRESHOLD = 30;
                const TAP_TIME_THRESHOLD = 200;
                const TAP_DISTANCE_THRESHOLD = 10;

                canvas.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    if (e.touches.length === 1) {
                        const touch = e.touches[0];
                        touchStartX = touch.clientX;
                        touchStartY = touch.clientY;
                        touchStartTime = Date.now();
                    }
                }, { passive: false });

                canvas.addEventListener('touchmove', (e) => {
                    e.preventDefault();
                }, { passive: false });

                canvas.addEventListener('touchend', (e) => {
                    e.preventDefault();
                    if (e.changedTouches.length === 1) {
                        const touch = e.changedTouches[0];
                        const touchEndX = touch.clientX;
                        const touchEndY = touch.clientY;
                        const touchEndTime = Date.now();

                        const deltaX = touchEndX - touchStartX;
                        const deltaY = touchEndY - touchStartY;
                        const deltaTime = touchEndTime - touchStartTime;
                        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                        // Detect tap
                        if (distance < TAP_DISTANCE_THRESHOLD && deltaTime < TAP_TIME_THRESHOLD) {
                            this.handleKeyPress('z');
                            this.vibrate(15);
                            return;
                        }

                        // Detect swipe
                        if (distance > SWIPE_THRESHOLD) {
                            const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;

                            if (angle > -45 && angle <= 45) {
                                this.handleKeyPress('ArrowRight');
                                this.vibrate(10);
                            } else if (angle > 45 && angle <= 135) {
                                this.handleKeyPress('ArrowDown');
                                this.vibrate(10);
                            } else if (angle > 135 || angle <= -135) {
                                this.handleKeyPress('ArrowLeft');
                                this.vibrate(10);
                            } else if (angle > -135 && angle <= -45) {
                                this.handleKeyPress('ArrowUp');
                                this.vibrate(10);
                            }
                        }
                    }
                }, { passive: false });

                // Two-finger tap for menu
                canvas.addEventListener('touchstart', (e) => {
                    if (e.touches.length === 2) {
                        e.preventDefault();
                        setTimeout(() => {
                            if (e.touches.length === 2) {
                                this.handleKeyPress('Enter');
                                this.vibrate(20);
                            }
                        }, 100);
                    }
                }, { passive: false });
            }

            toggleFullscreen() {
                if (!document.fullscreenElement) {
                    document.body.requestFullscreen().then(() => {
                        document.body.classList.add('fullscreen');
                        this.vibrate(15);
                        const btn = document.querySelector('.fullscreen-btn');
                        if (btn) btn.textContent = '✕';
                    }).catch(err => {
                        console.log('Fullscreen error:', err);
                    });
                } else {
                    document.exitFullscreen().then(() => {
                        document.body.classList.remove('fullscreen');
                        this.vibrate(15);
                        const btn = document.querySelector('.fullscreen-btn');
                        if (btn) btn.textContent = '⛶';
                    });
                }
            }

            handleKeyPress(key) {
                // Handle immediate actions based on state
                switch (this.state) {
                    case 'BATTLE':
                        this.handleBattleInput(key);
                        break;
                    case 'MENU':
                        this.handleMenuInput(key);
                        break;
                    case 'TEXT':
                        if (key === 'z' || key === 'Enter') {
                            this.advanceText();
                        }
                        break;
                }
            }
            
            autoLoadWoWmon() {
                // Embed the WoWmon cartridge data directly
                this.cartridge = {
                    "name": "WoWmon",
                    "version": "1.0",
                    "author": "Blizzard & Nintendo",
                    "description": "Pocket Creatures of Azeroth - A Warcraft-themed creature collection game",
                    "startingMap": "goldshire",
                    "starters": ["murloc", "wisp", "imp"],
                    
                    "tiles": {
                        "0": { "id": 0, "name": "void", "walkable": false, "color": "#0f380f", "symbol": "" },
                        "1": { "id": 1, "name": "grass", "walkable": true, "color": "#8bac0f", "symbol": "," },
                        "2": { "id": 2, "name": "tree", "walkable": false, "color": "#306230", "symbol": "♠" },
                        "3": { "id": 3, "name": "water", "walkable": false, "color": "#306230", "symbol": "≈" },
                        "4": { "id": 4, "name": "stone", "walkable": false, "color": "#556b2f", "symbol": "█" },
                        "5": { "id": 5, "name": "path", "walkable": true, "color": "#9bbc0f", "symbol": "." },
                        "6": { "id": 6, "name": "building", "walkable": false, "color": "#556b2f", "symbol": "⌂" },
                        "7": { "id": 7, "name": "door", "walkable": true, "color": "#8b956d", "symbol": "▢" },
                        "8": { "id": 8, "name": "sign", "walkable": false, "color": "#8b956d", "symbol": "!" },
                        "9": { "id": 9, "name": "tall_grass", "walkable": true, "encounter": true, "color": "#556b2f", "symbol": "w" },
                        "10": { "id": 10, "name": "flower", "walkable": true, "color": "#9bbc0f", "symbol": "✿" }
                    },
                    
                    "creatures": {
                        "murloc": {
                            "id": "murloc",
                            "name": "MURLOC",
                            "type": ["water", "beast"],
                            "baseHp": 45,
                            "baseAttack": 49,
                            "baseDefense": 49,
                            "baseSpeed": 45,
                            "evolveLevel": 16,
                            "evolveTo": "murloc_warrior",
                            "moves": ["tackle", "bubble", "water_gun", "bite"],
                            "description": "The amphibious Murloc makes strange gurgling sounds."
                        },
                        "murloc_warrior": {
                            "id": "murloc_warrior",
                            "name": "MURLOCWARRIOR",
                            "type": ["water", "beast"],
                            "baseHp": 60,
                            "baseAttack": 62,
                            "baseDefense": 63,
                            "baseSpeed": 60,
                            "evolveLevel": 32,
                            "evolveTo": "murloc_king",
                            "moves": ["tackle", "bubble", "water_gun", "bite"],
                            "description": "Armed with a spear, this Murloc has mastered combat."
                        },
                        "murloc_king": {
                            "id": "murloc_king",
                            "name": "MURLOCKING",
                            "type": ["water", "beast", "magic"],
                            "baseHp": 80,
                            "baseAttack": 82,
                            "baseDefense": 83,
                            "baseSpeed": 80,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["hydro_pump", "ice_beam", "thunderbolt", "recover"],
                            "description": "The ruler of all Murlocs, commanding both sea and magic."
                        },
                        e­í,
                            "baseSpeed": 70,
                            "evolveLevel": 18,
                            "evolveTo": "ancient_wisp",
                            "moves": ["glow", "nature_power", "sleep_powder", "magical_leaf"],
                            "description": "A spirit of the forest that glows with ethereal light."
                        },
                        "ancient_wisp": {
                            "id": "ancient_wisp",
                            "name": "ANCIENTWISP",
                            "type": ["nature", "spirit"],
                            "baseHp": 65,
                            "baseAttack": 65,
                            "baseDefense": 65,
                            "baseSpeed": 90,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["solar_beam", "heal_pulse", "energy_ball", "psychic"],
                            "description": "An ancient forest spirit with immense natural power."
                        },
                        "imp": {
                            "id": "imp",
                            "name": "IMP",
                            "type": ["fire", "demon"],
                            "baseHp": 40,
                            "baseAttack": 55,
                            "baseDefense": 35,
                            "baseSpeed": 55,
                            "evolveLevel": 20,
                            "evolveTo": "felguard",
                            "moves": ["firebolt", "scratch", "ember", "confuse_ray"],
                            "description": "A mischievous demon that loves to cause chaos."
                        },
                        "felguard": {
                            "id": "felguard",
                            "name": "FELGUARD",
                            "type": ["fire", "demon"],
                            "baseHp": 70,
                            "baseAttack": 85,
                            "baseDefense": 65,
                            "baseSpeed": 65,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["inferno", "shadow_ball", "drain_life", "dark_pulse"],
                            "description": "A powerful demon warrior from the Burning Legion."
                        },
                        "gnoll": {
                            "id": "gnoll",
                            "name": "GNOLL",
                            "type": ["beast"],
                            "baseHp": 45,
                            "baseAttack": 60,
                            "baseDefense": 45,
                            "baseSpeed": 50,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["bite", "howl", "slash", "crunch"],
                            "description": "A hyena-like humanoid that hunts in packs."
                        },
                        h­õ,
                            "baseSpeed": 40,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["dig", "rock_throw", "candle_light", "tackle"],
                            "description": "You no take candle! A mining creature of the deep."
                        },
                        "wolf": {
                            "id": "wolf",
                            "name": "WOLF",
                            "type": ["beast"],
                            "baseHp": 50,
                            "baseAttack": 65,
                            "baseDefense": 50,
                            "baseSpeed": 65,
                            "evolveLevel": 30,
                            "evolveTo": "dire_wolf",
                            "moves": ["bite", "howl", "quick_attack", "tackle"],
                            "description": "A loyal predator of the wild."
                        },
                        "dire_wolf": {
                            "id": "dire_wolf",
                            "name": "DIREWOLF",
                            "type": ["beast", "shadow"],
                            "baseHp": 75,
                            "baseAttack": 90,
                            "baseDefense": 70,
                            "baseSpeed": 85,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["crunch", "shadow_claw", "ice_fang", "iron_tail"],
                            "description": "An alpha predator with supernatural strength."
                        },
                        },
                            "baseDefense": 90,
                            "baseSpeed": 30,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["vine_whip", "root", "wood_hammer", "synthesis"],
                            "description": "An ancient tree given life by druidic magic."
                        },
                        "naga": {
                            "id": "naga",
                            "name": "NAGA",
                            "type": ["water", "magic"],
                            "baseHp": 65,
                            "baseAttack": 75,
                            "baseDefense": 65,
                            "baseSpeed": 75,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["water_pulse", "frost_shock", "lightning_bolt", "tidal_wave"],
                            "description": "Former night elves transformed by the sea."
                        },
                        "elemental": {
                            "id": "elemental",
                            "name": "ELEMENTAL",
                            "type": ["magic"],
                            "baseHp": 60,
                            "baseAttack": 65,
                            "baseDefense": 60,
                            "baseSpeed": 60,
                            "evolveLevel": null,
                            "evolveTo": null,
                            "moves": ["elemental_blast", "barrier", "explosion", "cosmic_power"],
                            "description": "Pure magical energy given form."
                        }
                    },
                    
                    "moves": {
                        "tackle": { "name": "Tackle", "power": 40, "accuracy": 100, "pp": 35, "type": "normal" },
                        "bubble": { "name": "Bubble", "power": 40, "accuracy": 100, "pp": 30, "type": "water" },
                        "water_gun": { "name": "Water Gun", "power": 40, "accuracy": 100, "pp": 25, "type": "water" },
                        "bite": { "name": "Bite", "power": 60, "accuracy": 100, "pp": 25, "type": "beast" },
                        "scratch": { "name": "Scratch", "power": 40, "accuracy": 100, "pp": 35, "type": "normal" },
                        "ember": { "name": "Ember", "power": 40, "accuracy": 100, "pp": 25, "type": "fire" },
                        "firebolt": { "name": "Firebolt", "power": 50, "accuracy": 100, "pp": 20, "type": "fire" },
                        "glow": { "name": "Glow", "power": 0, "accuracy": 100, "pp": 20, "type": "nature", "effect": "lower_accuracy" },
                        "nature_power": { "name": "Nature Power", "power": 50, "accuracy": 100, "pp": 20, "type": "nature" },
                        "howl": { "name": "Howl", "power": 0, "accuracy": 100, "pp": 40, "type": "beast", "effect": "raise_attack" },
                        "dig": { "name": "Dig", "power": 80, "accuracy": 100, "pp": 10, "type": "earth" },
                        "rock_throw": { "name": "Rock Throw", "power": 50, "accuracy": 90, "pp": 15, "type": "earth" },
                        "vine_whip": { "name": "Vine Whip", "power": 45, "accuracy": 100, "pp": 25, "type": "nature" },
                        "hydro_pump": { "name": "Hydro Pump", "power": 110, "accuracy": 80, "pp": 5, "type": "water" },
                        "ice_beam": { "name": "Ice Beam", "power": 90, "accuracy": 100, "pp": 10, "type": "ice" },
                        "earthquake": { "name": "Earthquake", "power": 100, "accuracy": 100, "pp": 10, "type": "earth" },
                        "psychic": { "name": "Psychic", "power": 90, "accuracy": 100, "pp": 10, "type": "magic" },
                        "moonbeam": { "name": "Moonbeam", "power": 95, "accuracy": 100, "pp": 15, "type": "nature" },
                        "inferno": { "name": "Inferno", "power": 100, "accuracy": 50, "pp": 5, "type": "fire" },
                        "shadow_ball": { "name": "Shadow Ball", "power": 80, "accuracy": 100, "pp": 15, "type": "shadow" },
                        "candle_light": { "name": "Candle Light", "power": 40, "accuracy": 100, "pp": 20, "type": "fire" },
                        "sleep_powder": { "name": "Sleep Powder", "power": 0, "accuracy": 75, "pp": 15, "type": "nature", "effect": "sleep" },
                        "magical_leaf": { "name": "Magical Leaf", "power": 60, "accuracy": 100, "pp": 20, "type": "nature" },
                        "heal_pulse": { "name": "Heal Pulse", "power": 0, "accuracy": 100, "pp": 10, "type": "nature", "effect": "heal" },
                        "energy_ball": { "name": "Energy Ball", "power": 80, "accuracy": 100, "pp": 10, "type": "nature" },
                        "confuse_ray": { "name": "Confuse Ray", "power": 0, "accuracy": 100, "pp": 10, "type": "magic", "effect": "confuse" },
                        "dark_pulse": { "name": "Dark Pulse", "power": 80, "accuracy": 100, "pp": 15, "type": "shadow" },
                        "slash": { "name": "Slash", "power": 70, "accuracy": 100, "pp": 20, "type": "normal" },
                        "crunch": { "name": "Crunch", "power": 80, "accuracy": 100, "pp": 15, "type": "beast" },
                        "quick_attack": { "name": "Quick Attack", "power": 40, "accuracy": 100, "pp": 30, "type": "normal", "priority": 1 },
                        "shadow_claw": { "name": "Shadow Claw", "power": 70, "accuracy": 100, "pp": 15, "type": "shadow" },
                        "ice_fang": { "name": "Ice Fang", "power": 65, "accuracy": 95, "pp": 15, "type": "ice" },
                        "hyper_fang": { "name": "Hyper Fang", "power": 80, "accuracy": 90, "pp": 15, "type": "normal" },
                        "root": { "name": "Root", "power": 0, "accuracy": 100, "pp": 20, "type": "nature", "effect": "trap" },
                        "wood_hammer": { "name": "Wood Hammer", "power": 120, "accuracy": 100, "pp": 15, "type": "nature" },
                        "synthesis": { "name": "Synthesis", "power": 0, "accuracy": 100, "pp": 5, "type": "nature", "effect": "heal" },
                        "water_pulse": { "name": "Water Pulse", "power": 60, "accuracy": 100, "pp": 20, "type": "water" },
                        "frost_shock": { "name": "Frost Shock", "power": 40, "accuracy": 100, "pp": 30, "type": "ice" },
                        "lightning_bolt": { "name": "Lightning Bolt", "power": 90, "accuracy": 100, "pp": 15, "type": "electric" },
                        "tidal_wave": { "name": "Tidal Wave", "power": 90, "accuracy": 100, "pp": 10, "type": "water" },
                        "elemental_blast": { "name": "Elemental Blast", "power": 90, "accuracy": 100, "pp": 10, "type": "magic" },
                        "barrier": { "name": "Barrier", "power": 0, "accuracy": 100, "pp": 20, "type": "magic", "effect": "defense_up" },
                        "explosion": { "name": "Explosion", "power": 250, "accuracy": 100, "pp": 5, "type": "fire" },
                        "cosmic_power": { "name": "Cosmic Power", "power": 0, "accuracy": 100, "pp": 20, "type": "magic", "effect": "stats_up" }
                    },
                    
                    "items": {
                        "health_potion": {
                            "name": "Health Potion",
                            "type": "medicine",
                            "price": 300,
                            "effect": "heal_20hp",
                            "description": "Restores 20 HP to one creature."
                        },
                        "greater_health_potion": {
                            "name": "Greater Health Potion",
                            "type": "medicine",
                            "price": 700,
                            "effect": "heal_50hp",
                            "description": "Restores 50 HP to one creature."
                        },
                        "soul_stone": {
                            "name": "Soul Stone",
                            "type": "capture",
                            "price": 200,
                            "catchRate": 1.0,
                            "description": "A magical stone used to capture creatures."
                        },
                        "greater_soul_stone": {
                            "name": "Greater Soul Stone",
                            "type": "capture",
                            "price": 600,
                            "catchRate": 1.5,
                            "description": "A higher quality stone for capturing creatures."
                        },
                        "hearthstone": {
                            "name": "Hearthstone",
                            "type": "key_item",
                            "price": 0,
                            "effect": "teleport_home",
                            "description": "Returns you to the last inn visited."
                        },
                        "fishing_rod": {
                            "name": "Fishing Rod",
                            "type": "key_item",
                            "price": 0,
                            "effect": "fish",
                            "description": "Allows you to fish for water creatures."
                        }
                    },
                    
                    "trainers": {
                        "gym1": {
                            "name": "MURADIN",
                            "title": "The Forge Master",
                            "sprite": 1,
                            "team": ["kobold", "kobold", "elemental"],
                            "reward": 1000,
                            "badge": "Forge Badge",
                            "dialogue": "By hammer and anvil! Let's see what ye're made of!"
                        },

                    "achievements": {
                        "first_catch": {
                            "id": "first_catch",
                            "name": "First Catch",
                            "description": "Capture your first creature",
                            "reward": { "type": "money", "amount": 500 },
                            "condition": { "type": "creatures_caught", "count": 1 }
                        },
                        "collector": {
                            "id": "collector",
                            "name": "Collector",
                            "description": "Capture 10 different creatures",
                            "reward": { "type": "item", "item": "greater_soul_stone", "count": 5 },
                            "condition": { "type": "unique_creatures", "count": 10 }
                        },
                        "master_collector": {
                            "id": "master_collector",
                            "name": "Master Collector",
                            "description": "Capture all 25 creatures",
                            "reward": { "type": "item", "item": "lucky_charm", "count": 1 },
                            "condition": { "type": "unique_creatures", "count": 25 }
                        },
                        "dragon_tamer": {
                            "id": "dragon_tamer",
                            "name": "Dragon Tamer",
                            "description": "Capture a fully evolved dragon",
                            "reward": { "type": "item", "item": "dragon_scale", "count": 1 },
                            "condition": { "type": "catch_species", "species": "dragon" }
                        },
                        "first_victory": {
                            "id": "first_victory",
                            "name": "First Victory",
                            "description": "Win your first battle",
                            "reward": { "type": "money", "amount": 300 },
                            "condition": { "type": "battles_won", "count": 1 }
                        },
                        "battle_veteran": {
                            "id": "battle_veteran",
                            "name": "Battle Veteran",
                            "description": "Win 50 battles",
                            "reward": { "type": "item", "item": "power_band", "count": 1 },
                            "condition": { "type": "battles_won", "count": 50 }
                        },
                        "gym_challenger": {
                            "id": "gym_challenger",
                            "name": "Gym Challenger",
                            "description": "Defeat your first gym leader",
                            "reward": { "type": "money", "amount": 1000 },
                            "condition": { "type": "badges", "count": 1 }
                        },
                        "gym_master": {
                            "id": "gym_master",
                            "name": "Gym Master",
                            "description": "Collect all 4 badges",
                            "reward": { "type": "item", "item": "focus_sash", "count": 1 },
                            "condition": { "type": "badges", "count": 4 }
                        },
                        "evolution_expert": {
                            "id": "evolution_expert",
                            "name": "Evolution Expert",
                            "description": "Evolve a creature for the first time",
                            "reward": { "type": "money", "amount": 750 },
                            "condition": { "type": "evolutions", "count": 1 }
                        },
                        "level_master": {
                            "id": "level_master",
                            "name": "Level Master",
                            "description": "Train a creature to level 50",
                            "reward": { "type": "item", "item": "full_restore", "count": 3 },
                            "condition": { "type": "max_level", "level": 50 }
                        },
                        "undead_hunter": {
                            "id": "undead_hunter",
                            "name": "Undead Hunter",
                            "description": "Defeat 20 undead type creatures",
                            "reward": { "type": "item", "item": "shadow_essence", "count": 1 },
                            "condition": { "type": "type_defeated", "creatureType": "undead", "count": 20 }
                        },
                        "champion": {
                            "id": "champion",
                            "name": "Champion",
                            "description": "Defeat the Elite Four",
                            "reward": { "type": "title", "title": "Champion" },
                            "condition": { "type": "elite_four_cleared", "count": 1 }
                        },
                        "legendary_trainer": {
                            "id": "legendary_trainer",
                            "name": "Legendary Trainer",
                            "description": "Win 100 battles without losing",
                            "reward": { "type": "money", "amount": 10000 },
                            "condition": { "type": "win_streak", "count": 100 }
                        },
                        "speed_runner": {
                            "id": "speed_runner",
                            "name": "Speed Runner",
                            "description": "Defeat all gym leaders in under 2 hours",
                            "reward": { "type": "item", "item": "lucky_charm", "count": 1 },
                            "condition": { "type": "time_challenge", "time": 7200 }
                        },
                        "wealthy": {
                            "id": "wealthy",
                            "name": "Wealthy",
                            "description": "Accumulate 50,000 gold",
                            "reward": { "type": "title", "title": "Tycoon" },
                            "condition": { "type": "money", "amount": 50000 }
                        }
                    },
                        "gym2": {
                            "name": "MALFURION",
                            "title": "The Archdruid",
                            "sprite": 2,
                            "team": ["wisp", "ancient_wisp", "treant"],
                            "reward": 2000,
                            "badge": "Nature Badge",
                            "dialogue": "Nature will test your resolve."
                        },
                        "gym3": {
                            "name": "JAINA",
                            "title": "The Frost Mage",
                            "sprite": 3,
                            "team": ["elemental", "naga", "naga"],
                            "reward": 3000,
                            "badge": "Frost Badge",
                            "dialogue": "Let's see if you can handle the cold!"
                        },
                        "gym4": {
                            "name": "THRALL",
                            "title": "The Warchief",
                            "sprite": 4,
                            "team": ["wolf", "dire_wolf", "elemental"],
                            "reward": 4000,
                            "badge": "Storm Badge",
                            "dialogue": "The elements will test you!"
                        }
                    },
                    
                    "maps": {
                        "goldshire": {
                            "name": "Goldshire",
                            "width": 20,
                            "height": 15,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,10,10,1,1,1,1,1,5,5,1,1,1,1,10,10,1,1,2,
                                2,1,10,10,1,1,6,6,6,5,5,6,6,6,1,10,10,1,1,2,
                                2,1,1,1,1,1,6,8,6,5,5,6,7,6,1,1,1,1,1,2,
                                2,1,1,1,1,1,6,6,6,5,5,6,6,6,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,6,6,6,1,1,1,1,5,5,1,1,1,6,6,6,1,1,2,
                                2,1,6,7,6,1,1,1,1,5,5,1,1,1,6,7,6,1,1,2,
                                2,1,6,6,6,1,1,1,1,5,5,1,1,1,6,6,6,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,2,2,2,2,2,2,2,2,7,7,2,2,2,2,2,2,2,2,2,
                                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                            ],
                            "npcs": [
                                {
                                    "id": "professor",
                                    "x": 7,
                                    "y": 4,
                                    "sprite": 1,
                                    "dialogue": "Welcome to the world of WoWmon! Choose your starter wisely!"
                                },
                                {
                                    "id": "mom",
                                    "x": 14,
                                    "y": 10,
                                    "sprite": 2,
                                    "dialogue": "Be careful on your adventure! Come back if you need healing!"
                                }
                            ],
                            "warps": [
                                { "x": 9, "y": 13, "toMap": "route1", "toX": 10, "toY": 1 },
                                { "x": 10, "y": 13, "toMap": "route1", "toX": 10, "toY": 1 },
                                { "x": 3, "y": 10, "toMap": "house1", "toX": 3, "toY": 5 },
                                { "x": 15, "y": 10, "toMap": "house2", "toX": 3, "toY": 5 },
                                { "x": 12, "y": 4, "toMap": "lab", "toX": 5, "toY": 8 }
                            ],
                            "encounters": []
                        },
                        "route1": {
                            "name": "Route 1",
                            "width": 20,
                            "height": 30,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,1,1,1,1,1,2,1,1,5,5,1,1,2,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,1,1,1,1,1,2,1,1,5,5,1,1,2,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,9,9,9,1,1,1,1,1,5,5,1,1,1,1,9,9,9,1,2,
                                2,1,1,1,1,1,2,1,1,5,5,1,1,2,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,2,
                                2,2,2,2,2,2,2,2,2,5,5,2,2,2,2,2,2,2,2,2,
                                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                            ],
                            "npcs": [
                                {
                                    "id": "youngster1",
                                    "x": 10,
                                    "y": 5,
                                    "sprite": 3,
                                    "dialogue": "My creatures are the best!",
                                    "trainer": true,
                                    "team": ["gnoll", "kobold"]
                                },
                                {
                                    "id": "lass1",
                                    "x": 10,
                                    "y": 15,
                                    "sprite": 4,
                                    "dialogue": "I love cute creatures!",
                                    "trainer": true,
                                    "team": ["wisp", "wisp"]
                                }
                            ],
                            "warps": [
                                { "x": 9, "y": 0, "toMap": "goldshire", "toX": 9, "toY": 12 },
                                { "x": 10, "y": 0, "toMap": "goldshire", "toX": 10, "toY": 12 },
                                { "x": 9, "y": 28, "toMap": "stormwind", "toX": 15, "toY": 1 },
                                { "x": 10, "y": 28, "toMap": "stormwind", "toX": 15, "toY": 1 }
                            ],
                            "encounters": ["gnoll", "kobold", "wolf", "wisp"]
                        },
                        "stormwind": {
                            "name": "Stormwind City",
                            "width": 30,
                            "height": 25,
                            "tiles": [
                                4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,6,6,6,6,5,5,6,6,6,6,5,5,5,5,5,5,6,6,6,6,5,5,6,6,6,6,5,4,
                                4,5,6,8,8,6,5,5,6,8,8,6,5,5,5,5,5,5,6,8,8,6,5,5,6,8,8,6,5,4,
                                4,5,6,7,7,6,5,5,6,7,7,6,5,5,5,5,5,5,6,7,7,6,5,5,6,7,7,6,5,4,
                                4,5,6,6,6,6,5,5,6,6,6,6,5,5,5,5,5,5,6,6,6,6,5,5,6,6,6,6,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,6,6,6,6,6,6,6,6,5,5,5,3,3,3,3,5,5,5,6,6,6,6,6,6,6,6,5,4,
                                4,5,6,8,8,8,8,8,8,6,5,5,3,3,3,3,3,3,5,5,6,8,8,8,8,8,8,6,5,4,
                                4,5,6,8,8,8,8,8,8,6,5,5,3,3,3,3,3,3,5,5,6,8,8,8,8,8,8,6,5,4,
                                4,5,6,8,8,7,8,8,8,6,5,5,3,3,3,3,3,3,5,5,6,8,8,7,8,8,8,6,5,4,
                                4,5,6,8,8,8,8,8,8,6,5,5,3,3,3,3,3,3,5,5,6,8,8,8,8,8,8,6,5,4,
                                4,5,6,6,6,6,6,6,6,6,5,5,5,3,3,3,3,5,5,5,6,6,6,6,6,6,6,6,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,6,6,6,6,5,5,6,6,6,6,5,5,5,5,5,5,6,6,6,6,5,5,6,6,6,6,5,4,
                                4,5,6,8,8,6,5,5,6,8,8,6,5,5,5,5,5,5,6,8,8,6,5,5,6,8,8,6,5,4,
                                4,5,6,7,7,6,5,5,6,7,7,6,5,5,5,5,5,5,6,7,7,6,5,5,6,7,7,6,5,4,
                                4,5,6,6,6,6,5,5,6,6,6,6,5,5,5,5,5,5,6,6,6,6,5,5,6,6,6,6,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
                            ],
                            "npcs": [
                                {
                                    "id": "nurse",
                                    "x": 3,
                                    "y": 4,
                                    "sprite": 5,
                                    "dialogue": "Welcome to the Healing Center! We'll heal your creatures!"
                                },
                                {
                                    "id": "shopkeeper",
                                    "x": 9,
                                    "y": 4,
                                    "sprite": 6,
                                    "dialogue": "Welcome to the Item Shop! We have potions and soul stones!"
                                },
                                {
                                    "id": "gym_guide",
                                    "x": 5,
                                    "y": 12,
                                    "sprite": 7,
                                    "dialogue": "The Gym Leader uses Earth and Metal type creatures!"
                                }
                            ],
                            "warps": [
                                { "x": 14, "y": 0, "toMap": "route1", "toX": 9, "toY": 27 },
                                { "x": 15, "y": 0, "toMap": "route1", "toX": 10, "toY": 27 },
                                { "x": 3, "y": 4, "toMap": "pokemon_center", "toX": 3, "toY": 7 },
                                { "x": 4, "y": 4, "toMap": "pokemon_center", "toX": 4, "toY": 7 },
                                { "x": 9, "y": 4, "toMap": "item_shop", "toX": 3, "toY": 7 },
                                { "x": 10, "y": 4, "toMap": "item_shop", "toX": 4, "toY": 7 },
                                { "x": 5, "y": 12, "toMap": "gym1", "toX": 7, "toY": 14 },
                                { "x": 23, "y": 12, "toMap": "gym2", "toX": 7, "toY": 14 }
                            ],
                            "encounters": []
                        },
                        "pokemon_center": {
                            "name": "Healing Center",
                            "width": 8,
                            "height": 8,
                            "tiles": [
                                6,6,6,6,6,6,6,6,
                                6,5,5,5,5,5,5,6,
                                6,5,8,8,8,8,5,6,
                                6,5,8,8,8,8,5,6,
                                6,5,5,5,5,5,5,6,
                                6,5,5,5,5,5,5,6,
                                6,5,5,5,5,5,5,6,
                                6,6,6,7,7,6,6,6
                            ],
                            "npcs": [
                                {
                                    "id": "nurse_joy",
                                    "x": 3,
                                    "y": 2,
                                    "sprite": 5,
                                    "dialogue": "Your creatures have been healed to perfect health!"
                                }
                            ],
                            "warps": [
                                { "x": 3, "y": 7, "toMap": "stormwind", "toX": 3, "toY": 5 },
                                { "x": 4, "y": 7, "toMap": "stormwind", "toX": 4, "toY": 5 }
                            ],
                            "encounters": []
                        },
                        "item_shop": {
                            "name": "Item Shop",
                            "width": 8,
                            "height": 8,
                            "tiles": [
                                6,6,6,6,6,6,6,6,
                                6,5,5,5,5,5,5,6,
                                6,5,8,8,8,8,5,6,
                                6,5,5,5,5,5,5,6,
                                6,5,8,8,8,8,5,6,
                                6,5,8,8,8,8,5,6,
                                6,5,5,5,5,5,5,6,
                                6,6,6,7,7,6,6,6
                            ],
                            "npcs": [
                                {
                                    "id": "shopkeeper",
                                    "x": 3,
                                    "y": 2,
                                    "sprite": 6,
                                    "dialogue": "Welcome! What would you like to buy?"
                                }
                            ],
                            "warps": [
                                { "x": 3, "y": 7, "toMap": "stormwind", "toX": 9, "toY": 5 },
                                { "x": 4, "y": 7, "toMap": "stormwind", "toX": 10, "toY": 5 }
                            ],
                            "encounters": []
                        },
                        "gym1": {
                            "name": "Forge Gym",
                            "width": 15,
                            "height": 15,
                            "tiles": [
                                4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,4,4,4,5,5,5,5,5,4,4,4,5,4,
                                4,5,4,5,5,5,5,5,5,5,5,5,4,5,4,
                                4,5,4,5,4,4,4,5,4,4,4,5,4,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,4,5,4,5,5,5,5,5,4,5,4,5,4,
                                4,5,4,5,4,5,8,8,8,5,4,5,4,5,4,
                                4,5,4,5,4,5,8,8,8,5,4,5,4,5,4,
                                4,5,5,5,5,5,8,8,8,5,5,5,5,5,4,
                                4,5,4,4,4,5,5,5,5,5,4,4,4,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,4,4,4,4,4,4,7,4,4,4,4,4,4,4
                            ],
                            "npcs": [
                                {
                                    "id": "gym1_trainer1",
                                    "x": 3,
                                    "y": 3,
                                    "sprite": 3,
                                    "dialogue": "You'll never reach our leader!",
                                    "trainer": true,
                                    "team": ["kobold", "kobold"]
                                },
                                {
                                    "id": "gym1_trainer2",
                                    "x": 11,
                                    "y": 3,
                                    "sprite": 3,
                                    "dialogue": "My earth creatures are unbeatable!",
                                    "trainer": true,
                                    "team": ["kobold", "elemental"]
                                },
                                {
                                    "id": "gym1_leader",
                                    "x": 7,
                                    "y": 7,
                                    "sprite": 8,
                                    "dialogue": "I am Muradin! Show me your strength!",
                                    "trainer": true,
                                    "gymLeader": "gym1"
                                }
                            ],
                            "warps": [
                                { "x": 7, "y": 14, "toMap": "stormwind", "toX": 5, "toY": 13 }
                            ],
                            "encounters": []
                        },
                        "house1": {
                            "name": "Your House",
                            "width": 7,
                            "height": 7,
                            "tiles": [
                                6,6,6,6,6,6,6,
                                6,5,5,5,5,5,6,
                                6,5,8,8,8,5,6,
                                6,5,5,5,5,5,6,
                                6,5,8,8,8,5,6,
                                6,5,5,5,5,5,6,
                                6,6,6,7,6,6,6
                            ],
                            "npcs": [],
                            "warps": [
                                { "x": 3, "y": 6, "toMap": "goldshire", "toX": 3, "toY": 11 }
                            ],
                            "encounters": []
                        },
                        "house2": {
                            "name": "Rival's House",
                            "width": 7,
                            "height": 7,
                            "tiles": [
                                6,6,6,6,6,6,6,
                                6,5,5,5,5,5,6,
                                6,5,8,8,8,5,6,
                                6,5,5,5,5,5,6,
                                6,5,8,8,8,5,6,
                                6,5,5,5,5,5,6,
                                6,6,6,7,6,6,6
                            ],
                            "npcs": [
                                {
                                    "id": "rival_sister",
                                    "x": 3,
                                    "y": 2,
                                    "sprite": 4,
                                    "dialogue": "My brother went to challenge the gym leaders!"
                                }
                            ],
                            "warps": [
                                { "x": 3, "y": 6, "toMap": "goldshire", "toX": 15, "toY": 11 }
                            ],
                            "encounters": []
                        },
                        "lab": {
                            "name": "Professor's Lab",
                            "width": 10,
                            "height": 10,
                            "tiles": [
                                6,6,6,6,6,6,6,6,6,6,
                                6,5,5,5,5,5,5,5,5,6,
                                6,5,8,8,5,5,8,8,5,6,
                                6,5,8,8,5,5,8,8,5,6,
                                6,5,5,5,5,5,5,5,5,6,
                                6,5,8,8,8,8,8,8,5,6,
                                6,5,5,5,5,5,5,5,5,6,
                                6,5,5,5,5,5,5,5,5,6,
                                6,5,5,5,5,5,5,5,5,6,
                                6,6,6,6,6,7,6,6,6,6
                            ],
                            "npcs": [
                                {
                                    "id": "professor",
                                    "x": 5,
                                    "y": 2,
                                    "sprite": 1,
                                    "dialogue": "Study the creatures well! Here, take this encyclopedia!"
                                },
                                {
                                    "id": "assistant",
                                    "x": 2,
                                    "y": 5,
                                    "sprite": 3,
                                    "dialogue": "The professor studies creature evolution patterns."
                                }
                            ],
                            "warps": [
                                { "x": 5, "y": 9, "toMap": "goldshire", "toX": 12, "toY": 5 }
                            ],
                            "encounters": []
                        },
                        "gym2": {
                            "name": "Nature Gym",
                            "width": 15,
                            "height": 15,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,2,2,2,1,1,1,1,1,2,2,2,1,2,
                                2,1,2,10,10,1,1,1,1,1,10,10,2,1,2,
                                2,1,2,10,10,1,1,1,1,1,10,10,2,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,2,1,2,1,1,1,1,1,2,1,2,1,2,
                                2,1,2,1,2,1,8,8,8,1,2,1,2,1,2,
                                2,1,2,1,2,1,8,8,8,1,2,1,2,1,2,
                                2,1,1,1,1,1,8,8,8,1,1,1,1,1,2,
                                2,1,2,2,2,1,1,1,1,1,2,2,2,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,2,2,2,2,2,2,7,2,2,2,2,2,2,2
                            ],
                            "npcs": [
                                {
                                    "id": "gym2_trainer1",
                                    "x": 3,
                                    "y": 3,
                                    "sprite": 4,
                                    "dialogue": "Nature's power flows through us!",
                                    "trainer": true,
                                    "team": ["wisp", "wisp"]
                                },
                                {
                                    "id": "gym2_leader",
                                    "x": 7,
                                    "y": 7,
                                    "sprite": 8,
                                    "dialogue": "I am Malfurion. Nature will test you!",
                                    "trainer": true,
                                    "gymLeader": "gym2"
                                }
                            ],
                            "warps": [
                                { "x": 7, "y": 14, "toMap": "stormwind", "toX": 23, "toY": 13 }
                            ],
                            "encounters": []
                        ,
                        ,
                        "dragonblight": {
                            "name": "Dragonblight",
                            "width": 25,
                            "height": 20,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                2,1,1,1,1,1,1,9,9,9,1,1,1,1,9,9,9,1,1,1,1,1,1,1,2,
                                2,1,10,10,1,1,1,9,9,9,1,1,1,1,9,9,9,1,1,10,10,1,1,1,2,
                                2,1,10,10,1,1,1,9,9,9,1,1,1,1,9,9,9,1,1,10,10,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,2,2,2,2,2,1,1,1,1,2,2,2,2,2,1,1,1,1,1,2,
                                2,1,9,9,1,2,4,4,4,2,1,1,1,1,2,4,4,4,2,1,9,9,1,1,2,
                                2,1,9,9,1,2,4,4,4,2,1,1,1,1,2,4,4,4,2,1,9,9,1,1,2,
                                2,1,9,9,1,2,4,4,4,2,1,1,1,1,2,4,4,4,2,1,9,9,1,1,2,
                                2,1,1,1,1,2,2,2,2,2,1,1,1,1,2,2,2,2,2,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,
                                2,1,1,10,10,1,1,2,6,6,6,6,6,6,6,2,1,1,10,10,1,1,1,1,2,
                                2,1,1,10,10,1,1,2,6,5,5,5,5,5,6,2,1,1,10,10,1,1,1,1,2,
                                2,1,1,1,1,1,1,2,6,5,5,7,5,5,6,2,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
                            ],
                            "npcs": [
                                {
                                    "id": "dragon_master",
                                    "x": 12,
                                    "y": 17,
                                    "sprite": 14,
                                    "dialogue": "The dragons here are powerful. Are you ready?",
                                    "trainer": true,
                                    "team": ["whelp", "drake", "dragon"]
                                }
                            ],
                            "warps": [
                                { "x": 12, "y": 17, "toMap": "stormwind", "toX": 15, "toY": 15 }
                            ],
                            "encounters": [
                                { "id": "whelp", "rate": 40 },
                                { "id": "drake", "rate": 25 },
                                { "id": "dragon", "rate": 5 },
                                { "id": "phoenix", "rate": 15 },
                                { "id": "elemental", "rate": 15 }
                            ]
                        },
                        "plaguelands": {
                            "name": "Eastern Plaguelands",
                            "width": 25,
                            "height": 20,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                2,9,9,9,9,9,9,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,2,
                                2,9,9,9,9,9,9,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,2,
                                2,9,9,9,9,9,9,1,1,6,6,6,6,6,1,1,9,9,9,9,9,9,9,9,2,
                                2,1,1,1,1,1,1,1,1,6,4,4,4,6,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,6,4,4,4,6,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,2,2,2,1,1,1,6,4,4,4,6,1,1,1,2,2,2,1,1,1,1,2,
                                2,1,1,2,4,2,1,1,1,6,6,7,6,6,1,1,1,2,4,2,1,1,1,1,2,
                                2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,9,9,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,1,1,2,
                                2,9,9,9,1,1,6,6,6,6,6,1,1,6,6,6,6,6,1,9,9,9,1,1,2,
                                2,9,9,9,1,1,6,4,4,4,6,1,1,6,4,4,4,6,1,9,9,9,1,1,2,
                                2,1,1,1,1,1,6,4,4,4,6,1,1,6,4,4,4,6,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,6,4,4,4,6,1,1,6,4,4,4,6,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,6,6,6,6,6,1,1,6,6,6,6,6,1,1,1,1,1,1,2,
                                2,1,1,9,9,9,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,1,1,9,9,9,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,1,1,9,9,9,1,1,1,1,1,7,1,1,1,1,1,1,9,9,9,1,1,1,2,
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
                            ],
                            "npcs": [
                                {
                                    "id": "necromancer",
                                    "x": 12,
                                    "y": 7,
                                    "sprite": 15,
                                    "dialogue": "The undead shall rise!",
                                    "trainer": true,
                                    "team": ["skeleton", "skeleton", "ghoul", "abomination"]
                                }
                            ],
                            "warps": [
                                { "x": 12, "y": 19, "toMap": "stormwind", "toX": 18, "toY": 15 }
                            ],
                            "encounters": [
                                { "id": "skeleton", "rate": 35 },
                                { "id": "ghoul", "rate": 30 },
                                { "id": "abomination", "rate": 15 },
                                { "id": "banshee", "rate": 15 },
                                { "id": "spider", "rate": 5 }
                            ]
                        },
                        "silithus": {
                            "name": "Silithus Desert",
                            "width": 30,
                            "height": 20,
                            "tiles": [
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,9,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,1,1,1,1,1,2,
                                2,1,1,1,9,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,9,9,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,9,9,1,1,2,
                                2,1,9,9,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,9,9,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1,2,
                                2,1,1,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1,2,
                                2,1,1,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,9,9,1,1,1,1,1,1,1,1,9,9,1,1,1,1,1,1,1,1,1,2,
                                2,1,1,1,1,1,1,1,9,9,1,1,1,1,7,1,1,1,9,9,1,1,1,1,1,1,1,1,1,2,
                                2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
                            ],
                            "npcs": [
                                {
                                    "id": "qiraji_commander",
                                    "x": 15,
                                    "y": 10,
                                    "sprite": 16,
                                    "dialogue": "The silithid swarm awaits!",
                                    "trainer": true,
                                    "team": ["spider", "nerubian", "nerubian", "infernal"]
                                }
                            ],
                            "warps": [
                                { "x": 15, "y": 18, "toMap": "stormwind", "toX": 20, "toY": 15 }
                            ],
                            "encounters": [
                                { "id": "spider", "rate": 40 },
                                { "id": "nerubian", "rate": 25 },
                                { "id": "quilboar", "rate": 20 },
                                { "id": "infernal", "rate": 10 },
                                { "id": "felhound", "rate": 5 }
                            ]
                        },
                        "elite_four": {
                            "name": "Champion's Arena",
                            "width": 20,
                            "height": 20,
                            "tiles": [
                                4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,8,8,8,8,8,8,8,5,5,8,8,8,8,8,8,8,5,4,
                                4,5,8,6,6,6,6,6,8,5,5,8,6,6,6,6,6,8,5,4,
                                4,5,8,6,5,5,5,6,8,5,5,8,6,5,5,5,6,8,5,4,
                                4,5,8,6,5,5,5,6,8,5,5,8,6,5,5,5,6,8,5,4,
                                4,5,8,6,6,7,6,6,8,5,5,8,6,6,7,6,6,8,5,4,
                                4,5,8,8,8,8,8,8,8,5,5,8,8,8,8,8,8,8,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,4,
                                4,5,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,5,4,
                                4,5,8,6,5,5,5,5,5,5,5,5,5,5,5,5,6,8,5,4,
                                4,5,8,6,5,5,5,5,5,5,5,5,5,5,5,5,6,8,5,4,
                                4,5,8,6,5,5,5,5,5,5,5,5,5,5,5,5,6,8,5,4,
                                4,5,8,6,5,5,5,5,5,5,5,5,5,5,5,5,6,8,5,4,
                                4,5,8,6,6,6,6,6,6,7,7,6,6,6,6,6,6,8,5,4,
                                4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,
                                4,4,4,4,4,4,4,4,4,7,7,4,4,4,4,4,4,4,4,4
                            ],
                            "npcs": [
                                {
                                    "id": "elite_warrior",
                                    "x": 5,
                                    "y": 5,
                                    "sprite": 9,
                                    "dialogue": "I am Grom, master of warriors!",
                                    "trainer": true,
                                    "eliteFour": true,
                                    "team": ["orc_warlord", "orc_grunt", "wolf", "dire_wolf"]
                                },
                                {
                                    "id": "elite_mage",
                                    "x": 14,
                                    "y": 5,
                                    "sprite": 10,
                                    "dialogue": "I am Khadgar, archmage of Dalaran!",
                                    "trainer": true,
                                    "eliteFour": true,
                                    "team": ["elemental", "elemental", "phoenix", "dragon"]
                                },
                                {
                                    "id": "elite_necromancer",
                                    "x": 5,
                                    "y": 15,
                                    "sprite": 11,
                                    "dialogue": "I am Kel'Thuzad, lich of the Scourge!",
                                    "trainer": true,
                                    "eliteFour": true,
                                    "team": ["skeleton", "ghoul", "abomination", "banshee", "nerubian"]
                                },
                                {
                                    "id": "elite_ranger",
                                    "x": 14,
                                    "y": 15,
                                    "sprite": 12,
                                    "dialogue": "I am Sylvanas, Ranger-General!",
                                    "trainer": true,
                                    "eliteFour": true,
                                    "team": ["wolf", "dire_wolf", "phoenix", "banshee"]
                                },
                                {
                                    "id": "champion",
                                    "x": 10,
                                    "y": 10,
                                    "sprite": 13,
                                    "dialogue": "I am Arthas, the Lich King. Face your doom!",
                                    "trainer": true,
                                    "champion": true,
                                    "team": ["dragon", "infernal", "abomination", "phoenix", "nerubian", "dire_wolf"]
                                }
                            ],
                            "warps": [
                                { "x": 9, "y": 19, "toMap": "stormwind", "toX": 10, "toY": 10 },
                                { "x": 10, "y": 19, "toMap": "stormwind", "toX": 10, "toY": 10 }
                            ],
                            "encounters": []
                        }
                    }
                    }
                };
                
                this.startGame();
            }
            
            loadCartridge() {
                document.getElementById('cartridgeInput').click();
            }
            
            handleCartridgeLoad(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        this.cartridge = JSON.parse(e.target.result);
                        this.startGame();
                    } catch (error) {
                        alert('Invalid cartridge file!');
                        console.error(error);
                    }
                };
                reader.readAsText(file);
            }
            
            exportSave() {
                if (!this.player) {
                    alert('No save data!');
                    return;
                }

            showSaveSlotMenu() {
                const slots = this.getSaveSlots();
                let menu = 'SELECT SAVE SLOT:

';
                for (let i = 1; i <= 3; i++) {
                    const slot = slots[`slot${i}`];
                    if (slot) {
                        menu += `SLOT ${i}: ${slot.player.name} - Badges: ${slot.player.badges.length}
`;
                    } else {
                        menu += `SLOT ${i}: [EMPTY]
`;
                    }
                }
                return menu;
            }

            getSaveSlots() {
                const saved = localStorage.getItem('wowmon_saves');
                return saved ? JSON.parse(saved) : {};
            }

            saveToSlot(slotNumber) {
                if (!this.player) {
                    alert('No game data to save!');
                    return;
                }

                const slots = this.getSaveSlots();
                slots[`slot${slotNumber}`] = {
                    version: '1.0',
                    timestamp: Date.now(),
                    player: this.player,
                    gameState: {
                        currentMap: this.currentMapId,
                        position: { x: this.player.x, y: this.player.y },
                        flags: this.flags || {},
                        defeatedTrainers: Array.from(this.defeatedTrainers || [])
                    }
                };

                localStorage.setItem('wowmon_saves', JSON.stringify(slots));
                this.showText(`Game saved to Slot ${slotNumber}!`);
            }

            loadFromSlot(slotNumber) {
                const slots = this.getSaveSlots();
                const slot = slots[`slot${slotNumber}`];

                if (!slot) {
                    alert('No save data in this slot!');
                    return;
                }

                this.loadSaveData(slot);
                this.showText(`Game loaded from Slot ${slotNumber}!`);
            }

            autoSave() {
                // Auto-save to current slot or slot 1
                const currentSlot = this.currentSaveSlot || 1;
                this.saveToSlot(currentSlot);
            }
            
                
                const saveData = {
                    version: '1.0',
                    timestamp: Date.now(),
                    player: this.player,
                    gameState: {
                        currentMap: this.currentMapId,
                        position: { x: this.player.x, y: this.player.y },
                        flags: this.flags || {},
                        defeatedTrainers: Array.from(this.defeatedTrainers || [])
                    }
                };
                
                const dataStr = JSON.stringify(saveData, null, 2);
                const dataBlob = new Blob([dataStr], {type: 'application/json'});
                const url = URL.createObjectURL(dataBlob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `${this.cartridge?.name || 'game'}-save.json`;
                link.click();
                URL.revokeObjectURL(url);
            }
            
            importSave() {
                document.getElementById('saveInput').click();
            }
            
            handleSaveLoad(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const saveData = JSON.parse(e.target.result);
                        this.loadSaveData(saveData);
                        this.showText('Save loaded successfully!');
                    } catch (error) {
                        alert('Invalid save file!');
                        console.error(error);
                    }
                };
                reader.readAsText(file);
            }
            
            loadSaveData(saveData) {
                if (!this.cartridge) {
                    alert('Load a game cartridge first!');
                    return;
                }
                
                this.player = saveData.player;
                this.currentMapId = saveData.gameState.currentMap;
                this.player.x = saveData.gameState.position.x;
                this.player.y = saveData.gameState.position.y;
                this.flags = saveData.gameState.flags || {};
                this.defeatedTrainers = new Set(saveData.gameState.defeatedTrainers || []);
                
                // Initialize creature PP if not present
                this.player.creatures.forEach(creature => {
                    if (!creature.pp) {
                        creature.pp = {};
                        creature.moves.forEach(moveId => {
                            const move = this.cartridge.moves[moveId];
                            if (move) {
                                creature.pp[moveId] = move.pp;
                            }
                        });
                    }
                });
                
                this.loadMap(this.currentMapId);
                this.state = 'OVERWORLD';
            }
            
            startGame() {
                if (!this.cartridge) return;
                
                document.getElementById('loadingScreen').classList.add('hidden');
                
                // Initialize game from cartridge
                this.initializeFromCartridge();
                
                // Start in overworld
                this.state = 'OVERWORLD';
                this.isRunning = true;
            }
            
            initializeFromCartridge() {
                // Create new player if none exists
                if (!this.player) {
                    this.player = {
                        name: 'PLAYER',
                        x: 10,
                        y: 10,
                        facing: 'down',
                        creatures: [],
                        bag: {
                            'health_potion': 5,
                            'soul_stone': 10
                        }

            checkAchievements() {
                if (!this.cartridge.achievements || !this.player) return;

                Object.values(this.cartridge.achievements).forEach(achievement => {
                    // Skip if already unlocked
                    if (this.player.achievements[achievement.id]) return;

                    let unlocked = false;
                    const cond = achievement.condition;

                    switch (cond.type) {
                        case 'creatures_caught':
                            unlocked = this.player.stats.creaturesCaught >= cond.count;
                            break;
                        case 'unique_creatures':
                            unlocked = this.player.stats.uniqueCreaturesCaught.length >= cond.count;
                            break;
                        case 'catch_species':
                            unlocked = this.player.creatures.some(c => c.id === cond.species);
                            break;
                        case 'battles_won':
                            unlocked = this.player.stats.battlesWon >= cond.count;
                            break;
                        case 'badges':
                            unlocked = this.player.badges.length >= cond.count;
                            break;
                        case 'evolutions':
                            unlocked = this.player.stats.evolutions >= cond.count;
                            break;
                        case 'max_level':
                            unlocked = this.player.creatures.some(c => c.level >= cond.level);
                            break;
                        case 'type_defeated':
                            const count = this.player.stats.typesDefeated[cond.creatureType] || 0;
                            unlocked = count >= cond.count;
                            break;
                        case 'win_streak':
                            unlocked = this.player.stats.winStreak >= cond.count;
                            break;
                        case 'money':
                            unlocked = this.player.money >= cond.amount;
                            break;
                    }

                    if (unlocked) {
                        this.unlockAchievement(achievement);
                    }
                });
            }

            unlockAchievement(achievement) {
                this.player.achievements[achievement.id] = {
                    unlocked: true,
                    timestamp: Date.now()
                };

                // Apply reward
                const reward = achievement.reward;
                if (reward.type === 'money') {
                    this.player.money += reward.amount;
                    this.showText(`Achievement Unlocked: ${achievement.name}!
Reward: ${reward.amount} gold`);
                } else if (reward.type === 'item') {
                    this.player.bag[reward.item] = (this.player.bag[reward.item] || 0) + reward.count;
                    this.showText(`Achievement Unlocked: ${achievement.name}!
Reward: ${reward.item} x${reward.count}`);
                } else if (reward.type === 'title') {
                    if (!this.player.titles) this.player.titles = [];
                    this.player.titles.push(reward.title);
                    this.showText(`Achievement Unlocked: ${achievement.name}!
Title Earned: ${reward.title}`);
                }

                // Add journal entry
                if (this.player.journal) {
                    this.player.journal.entries.push({
                        type: 'achievement',
                        achievement: achievement.name,
                        timestamp: Date.now()
                    });
                }

                // Auto-save after achievement
                this.autoSave();
            }
            ,
                        money: 3000,
                        badges: []
                    };
                    
                    // Give starter creature
                    if (this.cartridge.starters && this.cartridge.starters.length > 0) {
                        const starterId = this.cartridge.starters[0];
                        const starter = this.cartridge.creatures[starterId];
                        const starterCreature = {
                            id: starter.id,
                            name: starter.name,
                            level: 5,
                            hp: starter.baseHp,
                            maxHp: starter.baseHp,
                            attack: starter.baseAttack,
                            defense: starter.baseDefense,
                            speed: starter.baseSpeed,
                            exp: 0,
                            moves: starter.moves.slice(0, 4),
                            pp: {}
                        };
                        
                        // Initialize PP for moves
                        starterCreature.moves.forEach(moveId => {
                            const move = this.cartridge.moves[moveId];
                            if (move) {
                                starterCreature.pp[moveId] = move.pp;
                            }
                        });
                        
                        this.player.creatures.push(starterCreature);
                    // Initialize player stats tracking
                    if (!this.player.stats) {
                        this.player.stats = {
                            battlesWon: 0,
                            battlesLost: 0,
                            creaturesCaught: 0,
                            uniqueCreaturesCaught: [],
                            evolutions: 0,
                            stepsWalked: 0,
                            playTime: 0,
                            startTime: Date.now(),
                            typesDefeated: {},
                            highestLevel: 0,
                            moneyEarned: 0,
                            itemsUsed: 0,
                            winStreak: 0,
                            maxWinStreak: 0
                        };
                    }

                    // Initialize achievements
                    if (!this.player.achievements) {
                        this.player.achievements = {};
                    }

                    // Initialize journal
                    if (!this.player.journal) {
                        this.player.journal = {
                            entries: [],
                            discoveries: []
                        };
                    }

                    // Initialize trading data
                    if (!this.player.tradingData) {
                        this.player.tradingData = {
                            tradesCompleted: 0,
                            friendCode: this.generateFriendCode(),
                            offeredCreatures: []
                        };
                    }
                    
                    }
                }
                
                // Load starting map
                this.currentMapId = this.cartridge.startingMap || 'goldshire';
                this.loadMap(this.currentMapId);
                
                // Initialize game state
                this.defeatedTrainers = new Set();
                this.flags = {};
            }
            
            loadMap(mapId) {
                const mapData = this.cartridge.maps[mapId];
                if (!mapData) {
                    console.error(`Map ${mapId}

            generateFriendCode() {
                // Generate a 12-digit friend code for trading
                const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
                let code = '';
                for (let i = 0; i < 12; i++) {
                    if (i > 0 && i % 4 === 0) code += '-';
                    code += chars[Math.floor(Math.random() * chars.length)];
                }
                return code;
            }
             not found!`);
                    return;
                }
                
                this.map = {
                    id: mapId,
                    name: mapData.name,
                    width: mapData.width,
                    height: mapData.height,
                    tiles: mapData.tiles,
                    npcs: mapData.npcs || [],
                    warps: mapData.warps || [],
                    encounters: mapData.encounters || []
                };
            }
            
            showLoadingScreen() {
                this.ctx.fillStyle = '#0f380f';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                this.ctx.fillStyle = '#9bbc0f';
                this.ctx.font = '16px monospace';
                this.ctx.textAlign = 'center';
                this.ctx.fillText('WOWMON', this.canvas.width/2, 60);
                this.ctx.font = '8px monospace';
                this.ctx.fillText('Pocket Creatures of Azeroth', this.canvas.width/2, 80);
            }
            
            gameLoop(timestamp = 0) {
                const deltaTime = timestamp - this.lastFrame;
                this.lastFrame = timestamp;
                this.frameCount++;
                
                if (this.isRunning) {
                    this.update(deltaTime);
                    this.render();
                }
                
                requestAnimationFrame((t) => this.gameLoop(t));
            }
            
            update(deltaTime) {
                // Update timers
                if (this.moveTimer > 0) {
                    this.moveTimer -= deltaTime;
                }
                
                switch (this.state) {
                    case 'OVERWORLD':
                        this.updateOverworld(deltaTime);
                        break;
                    case 'BATTLE':
                        this.updateBattle();
                        break;
                    case 'MENU':
                        this.updateMenu();
                        break;
                    case 'TEXT':
                        this.updateText();
                        break;
                }
            }
            
            updateOverworld(deltaTime) {
                // Player movement
                if (this.moveTimer <= 0) {
                    let dx = 0, dy = 0;
                    
                    if (this.keys['ArrowUp']) {
                        dy = -1;
                        this.player.facing = 'up';
                    } else if (this.keys['ArrowDown']) {
                        dy = 1;
                        this.player.facing = 'down';
                    } else if (this.keys['ArrowLeft']) {
                        dx = -1;
                        this.player.facing = 'left';
                    } else if (this.keys['ArrowRight']) {
                        dx = 1;
                        this.player.facing = 'right';
                    }
                    
                    if (dx || dy) {
                        const newX = this.player.x + dx;
                        const newY = this.player.y + dy;
                        
                        if (this.canMove(newX, newY)) {
                            this.player.x = newX;
                            this.player.y = newY;
                            this.moveTimer = this.moveDelay;
                            
                            // Check for encounters
                            this.checkEncounters();
                            
                            // Check for warps
                            this.checkWarps();
                        }
                    }
                }
                
                // Menu
                if (this.keys['Enter']) {
                    this.state = 'MENU';
                    this.menuIndex = 0;
                    this.keys['Enter'] = false;
                    document.getElementById('mainMenu').classList.add('active');
                }
                
                // Interact
                if (this.keys['z']) {
                    this.interact();
                    this.keys['z'] = false;
                }
            }
            
            canMove(x, y) {
                if (x < 0 || x >= this.map.width || y < 0 || y >= this.map.height) {
                    return false;
                }
                
                const tile = this.map.tiles[y * this.map.width + x];
                const tileData = this.cartridge.tiles[tile];
                
                // Check for NPC collision
                const npcCollision = this.map.npcs.some(npc => npc.x === x && npc.y === y);
                if (npcCollision) return false;
                
                return tileData && tileData.walkable;
            }
            
            checkEncounters() {
                const tile = this.map.tiles[this.player.y * this.map.width + this.player.x];
                const tileData = this.cartridge.tiles[tile];
                
                if (tileData && tileData.encounter && Math.random() < 0.1) {
                    const possibleCreatures = this.map.encounters;
                    if (possibleCreatures && possibleCreatures.length > 0) {
                        const encounterId = possibleCreatures[Math.floor(Math.random() * possibleCreatures.length)];
                        this.startBattle('wild', encounterId);
                    }
                }
            }
            
            checkWarps() {
                const warp = this.map.warps.find(w => 
                    w.x === this.player.x && w.y === this.player.y
                );
                
                if (warp) {
                    this.loadMap(warp.toMap);
                    this.player.x = warp.toX;
                    this.player.y = warp.toY;
                }
            }
            
            interact() {
                // Check for NPC in front of player
                const facingX = this.player.x + (this.player.facing === 'left' ? -1 : this.player.facing === 'right' ? 1 : 0);
                const facingY = this.player.y + (this.player.facing === 'up' ? -1 : this.player.facing === 'down' ? 1 : 0);
                
                const npc = this.map.npcs.find(n => n.x === facingX && n.y === facingY);
                if (npc) {
                    this.showText(npc.dialogue || 'Hello!');
                    
                    // Check for special NPCs
                    if (npc.id === 'nurse_joy') {
                        this.healParty();
                    } else if (npc.trainer && !this.defeatedTrainers.has(npc.id)) {
                        setTimeout(() => {
                            this.startTrainerBattle(npc);
                        }, 2000);
                    } else if (npc.gymLeader && !this.defeatedTrainers.has(npc.id)) {
                        const gymData = this.cartridge.trainers[npc.gymLeader];
                        if (gymData) {
                            setTimeout(() => {
                                this.startGymBattle(npc, gymData);
                            }, 2000);
                        }
                    }
                }
            }
            
            healParty() {
                this.player.creatures.forEach(creature => {
                    creature.hp = creature.maxHp;
                    // Restore PP
                    creature.moves.forEach(moveId => {
                        const move = this.cartridge.moves[moveId];
                        if (move) {
                            creature.pp[moveId] = move.pp;
                        }
                    });
                });
                setTimeout(() => {
                    this.showText('Your creatures are fully healed!');
                }, 1500);
            }
            
            showText(text) {
                this.state = 'TEXT';
                this.currentText = text;
                const textBox = document.getElementById('textBox');
                const textContent = document.getElementById('textContent');
                textContent.textContent = text;
                textBox.classList.add('active');
            }
            
            advanceText() {
                const textBox = document.getElementById('textBox');
                textBox.classList.remove('active');
                this.state = 'OVERWORLD';
                this.currentText = null;
            }
            
            updateText() {
                // Text is handled through DOM
            }
            
            startBattle(type, enemyId) {
                // Find first healthy creature
                const healthyCreature = this.player.creatures.find(c => c.hp > 0);
                if (!healthyCreature) {
                    this.showText('All your creatures have fainted!');
                    return;
                }
                
                this.state = 'BATTLE';
                this.battle = {
                    type: type,
                    enemyId: enemyId,
                    turn: 'player',
                    playerCreature: healthyCreature,
                    enemyCreature: this.createEnemyCreature(enemyId),
                    actionQueue: [],
                    waitingForInput: true
                };
                
                this.battleMenuIndex = 0;
                this.showingMoves = false;
                
                document.getElementById('battleUI').classList.add('active');
                document.getElementById('battleMenu').classList.add('active');
                this.updateBattleUI();
                
                // Show battle start message
                this.showText(`Wild ${this.battle.enemyCreature.name} appeared!`);
                setTimeout(() => {
                    this.advanceText();
                }, 1500);
            }
            
            startTrainerBattle(npc) {
                const healthyCreature = this.player.creatures.find(c => c.hp > 0);
                if (!healthyCreature) {
                    this.showText('All your creatures have fainted!');
                    return;
                }
                
                this.state = 'BATTLE';
                this.battle = {
                    type: 'trainer',
                    trainerId: npc.id,
                    trainerTeam: npc.team || ['gnoll'],
                    currentEnemyIndex: 0,
                    turn: 'player',
                    playerCreature: healthyCreature,
                    enemyCreature: this.createEnemyCreature(npc.team[0]),
                    actionQueue: [],
                    waitingForInput: true
                };
                
                this.battleMenuIndex = 0;
                this.showingMoves = false;
                
                document.getElementById('battleUI').classList.add('active');
                document.getElementById('battleMenu').classList.add('active');
                this.updateBattleUI();
                
                this.showText(`Trainer wants to battle!`);
                setTimeout(() => {
                    this.advanceText();
                }, 1500);
            }
            
            startGymBattle(npc, gymData) {
                const healthyCreature = this.player.creatures.find(c => c.hp > 0);
                if (!healthyCreature) {
                    this.showText('All your creatures have fainted!');
                    return;
                }
                
                this.state = 'BATTLE';
                this.battle = {
                    type: 'gym',
                    trainerId: npc.id,
                    gymLeader: npc.gymLeader,
                    gymData: gymData,
                    trainerTeam: gymData.team,
                    currentEnemyIndex: 0,
                    turn: 'player',
                    playerCreature: healthyCreature,
                    enemyCreature: this.createEnemyCreature(gymData.team[0], 10 + (this.player.badges.length * 5)),
                    actionQueue: [],
                    waitingForInput: true
                };
                
                this.battleMenuIndex = 0;
                this.showingMoves = false;
                
                document.getElementById('battleUI').classList.add('active');
                document.getElementById('battleMenu').classList.add('active');
                this.updateBattleUI();
                
                this.showText(`${gymData.name} ${gymData.title} wants to battle!`);
                setTimeout(() => {
                    this.advanceText();
                }, 1500);
            }
            
            createEnemyCreature(id, baseLevel = 5) {
                const creatureData = this.cartridge.creatures[id] || this.cartridge.creatures['gnoll'];
                const level = baseLevel + Math.floor(Math.random() * 5) - 1;
                const creature = {
                    id: id,
                    name: creatureData.name,
                    level: level,
                    hp: Math.floor(creatureData.baseHp * (1 + level * 0.1)),
                    maxHp: Math.floor(creatureData.baseHp * (1 + level * 0.1)),
                    attack: Math.floor(creatureData.baseAttack * (1 + level * 0.1)),
                    defense: Math.floor(creatureData.baseDefense * (1 + level * 0.1)),
                    speed: Math.floor(creatureData.baseSpeed * (1 + level * 0.1)),
                    moves: creatureData.moves.slice(0, Math.min(4, 1 + Math.floor(level / 10))),
                    pp: {}
                };
                
                // Initialize PP
                creature.moves.forEach(moveId => {
                    const move = this.cartridge.moves[moveId];
                    if (move) {
                        creature.pp[moveId] = move.pp;
                    }
                });
                
                return creature;
            }
            
            handleBattleInput(key) {
                if (!this.battle || !this.battle.waitingForInput) return;
                
                if (this.showingMoves) {
                    // Move selection
                    const moveOptions = document.querySelectorAll('.move-option');
                    
                    if (key === 'ArrowUp') {
                        if (this.moveMenuIndex >= 2) this.moveMenuIndex -= 2;
                    } else if (key === 'ArrowDown') {
                        if (this.moveMenuIndex < 2) this.moveMenuIndex += 2;
                    } else if (key === 'ArrowLeft') {
                        if (this.moveMenuIndex % 2 === 1) this.moveMenuIndex--;
                    } else if (key === 'ArrowRight') {
                        if (this.moveMenuIndex % 2 === 0 && this.moveMenuIndex < moveOptions.length - 1) this.moveMenuIndex++;
                    } else if (key === 'z' || key === 'Enter') {
                        this.selectMove(this.moveMenuIndex);
                    } else if (key === 'x') {
                        this.showingMoves = false;
                        document.getElementById('moveMenu').classList.remove('active');
                        document.getElementById('battleMenu').classList.add('active');
                    }
                    
                    // Update selection
                    moveOptions.forEach((option, index) => {
                        option.classList.toggle('selected', index === this.moveMenuIndex);
                    });
                } else {
                    // Main battle menu
                    const menuOptions = document.querySelectorAll('#battleMenu .menu-option');
                    
                    if (key === 'ArrowUp') {
                        this.battleMenuIndex = Math.max(0, this.battleMenuIndex - 1);
                    } else if (key === 'ArrowDown') {
                        this.battleMenuIndex = Math.min(menuOptions.length - 1, this.battleMenuIndex + 1);
                    } else if (key === 'z' || key === 'Enter') {
                        this.selectBattleOption(this.battleMenuIndex);
                    }
                    
                    // Update selection
                    menuOptions.forEach((option, index) => {
                        option.classList.toggle('selected', index === this.battleMenuIndex);
                    });
                }
            }
            
            selectBattleOption(index) {
                switch (index) {
                    case 0: // FIGHT
                        this.showMoveSelection();
                        break;
                    case 1: // CREATURES
                        this.showText('Not implemented yet!');
                        setTimeout(() => this.advanceText(), 1000);
                        break;
                    case 2: // RUN
                        if (this.battle.type === 'wild') {
                            this.showText('Got away safely!');
                            setTimeout(() => {
                                this.endBattle();
                            }, 1000);
                        } else {
                            this.showText("Can't run from trainer battles!");
                            setTimeout(() => this.advanceText(), 1000);
                        }
                        break;
                }
            }
            
            showMoveSelection() {
                this.showingMoves = true;
                this.moveMenuIndex = 0;
                document.getElementById('battleMenu').classList.remove('active');
                document.getElementById('moveMenu').classList.add('active');
                
                // Update move display
                const creature = this.battle.playerCreature;
                creature.moves.forEach((moveId, index) => {
                    const move = this.cartridge.moves[moveId];
                    if (move) {
                        document.getElementById(`move${index}Name`).textContent = move.name.toUpperCase();
                        document.getElementById(`move${index}PP`).textContent = `${creature.pp[moveId]}/${move.pp}`;
                    }
                });
                
                // Update initial selection
                document.querySelectorAll('.move-option').forEach((option, index) => {
                    option.classList.toggle('selected', index === 0);
                });
            }
            
            selectMove(index) {
                const moveId = this.battle.playerCreature.moves[index];
                const move = this.cartridge.moves[moveId];
                
                if (!move || this.battle.playerCreature.pp[moveId] <= 0) {
                    this.showText('No PP left for this move!');
                    setTimeout(() => this.advanceText(), 1000);
                    return;
                }
                
                this.showingMoves = false;
                document.getElementById('moveMenu').classList.remove('active');
                
                // Execute battle turn
                this.executeTurn(moveId);
            }
            
            executeTurn(playerMoveId) {
                this.battle.waitingForInput = false;
                
                // Determine turn order based on speed
                const playerFirst = this.battle.playerCreature.speed >= this.battle.enemyCreature.speed;
                
                // Choose enemy move
                const enemyMoves = this.battle.enemyCreature.moves.filter(moveId => 
                    this.battle.enemyCreature.pp[moveId] > 0
                );
                const enemyMoveId = enemyMoves[Math.floor(Math.random() * enemyMoves.length)];
                
                if (playerFirst) {
                    this.executeMove(this.battle.playerCreature, this.battle.enemyCreature, playerMoveId, true);
                    setTimeout(() => {
                        if (this.battle && this.battle.enemyCreature.hp > 0) {
                            this.executeMove(this.battle.enemyCreature, this.battle.playerCreature, enemyMoveId, false);
                        }
                    }, 2000);
                } else {
                    this.executeMove(this.battle.enemyCreature, this.battle.playerCreature, enemyMoveId, false);
                    setTimeout(() => {
                        if (this.battle && this.battle.playerCreature.hp > 0) {
                            this.executeMove(this.battle.playerCreature, this.battle.enemyCreature, playerMoveId, true);
                        }
                    }, 2000);
                }
            }
            
            executeMove(attacker, defender, moveId, isPlayer) {
                const move = this.cartridge.moves[moveId];
                if (!move) return;
                
                // Deduct PP
                attacker.pp[moveId]--;
                
                // Show move text
                this.showText(`${attacker.name} used ${move.name}!`);
                
                setTimeout(() => {
                    this.advanceText();
                    
                    // Calculate damage
                    if (move.power > 0) {
                        const levelMod = (2 * attacker.level + 10) / 250;
                        const attackDefenseRatio = attacker.attack / defender.defense;
                        const baseDamage = levelMod * attackDefenseRatio * move.power + 2;
                        const randomMod = (85 + Math.random() * 15) / 100;
                        const damage = Math.floor(baseDamage * randomMod);
                        
                        defender.hp = Math.max(0, defender.hp - damage);
                        
                        this.updateBattleUI();
                        
                        // Check for fainting
                        if (defender.hp === 0) {
                            setTimeout(() => {
                                this.handleFaint(isPlayer ? false : true);
                            }, 1000);
                        } else {
                            // Continue battle
                            setTimeout(() => {
                                if (this.battle) {
                                    this.battle.waitingForInput = true;
                                    document.getElementById('battleMenu').classList.add('active');
                                }
                            }, 1000);
                        }
                    } else {
                        // Status move
                        this.showText('Status moves not implemented yet!');
                        setTimeout(() => {
                            this.advanceText();
                            if (this.battle) {
                                this.battle.waitingForInput = true;
                                document.getElementById('battleMenu').classList.add('active');
                            }
                        }, 1000);
                    }
                }, 1000);
            }
            
            handleFaint(playerFainted) {
                if (playerFainted) {
                    this.showText(`${this.battle.playerCreature.name} fainted!`);
                    
                    // Check for more creatures
                    const nextCreature = this.player.creatures.find(c => c.hp > 0 && c !== this.battle.playerCreature);
                    if (nextCreature) {
                        setTimeout(() => {
                            this.battle.playerCreature = nextCreature;
                            this.updateBattleUI();
                            this.showText(`Go, ${nextCreature.name}!`);
                            setTimeout(() => {
                                this.advanceText();
                                this.battle.waitingForInput = true;
                                document.getElementById('battleMenu').classList.add('active');
                            }, 1500);
                        }, 2000);
                    } else {
                        setTimeout(() => {
                            this.showText('You have no more creatures!');
                            setTimeout(() => {
                                this.endBattle(false);
                            }, 2000);
                        }, 2000);
                    }
                } else {
                    this.showText(`${this.battle.enemyCreature.name} fainted!`);
                    
                    // Award experience
                    const expGained = this.battle.enemyCreature.level * 10;
                    this.battle.playerCreature.exp = (this.battle.playerCreature.exp || 0) + expGained;
                    
                    setTimeout(() => {
                        this.showText(`${this.battle.playerCreature.name} gained ${expGained} EXP!`);
                        
                        // Check for level up
                        const expNeeded = this.battle.playerCreature.level * 100;
                        if (this.battle.playerCreature.exp >= expNeeded) {
                            this.battle.playerCreature.level++;
                            this.battle.playerCreature.exp -= expNeeded;
                            
                            // Increase stats
                            const creatureData = this.cartridge.creatures[this.battle.playerCreature.id];
                            this.battle.playerCreature.maxHp += 5;
                            this.battle.playerCreature.hp += 5;
                            this.battle.playerCreature.attack += 3;
                            this.battle.playerCreature.defense += 3;
                            this.battle.playerCreature.speed += 2;
                            
                            setTimeout(() => {
                                this.showText(`${this.battle.playerCreature.name} grew to level ${this.battle.playerCreature.level}!`);
                                
                                // Check evolution
                                if (creatureData.evolveLevel && this.battle.playerCreature.level >= creatureData.evolveLevel) {
                                    setTimeout(() => {
                                        this.evolveCreature(this.battle.playerCreature, creatureData.evolveTo);
                                    }, 2000);
                                } else {
                                    setTimeout(() => {
                                        this.checkBattleEnd();
                                    }, 2000);
                                }
                            }, 2000);
                        } else {
                            setTimeout(() => {
                                this.checkBattleEnd();
                            }, 2000);
                        }
                    }, 2000);
                }
            }
            
            evolveCreature(creature, evolveToId) {
                const evolvedData = this.cartridge.creatures[evolveToId];
                if (!evolvedData) {
                    this.checkBattleEnd();
                    return;
                }
                
                this.showText(`What? ${creature.name} is evolving!`);
                
                setTimeout(() => {
                    creature.id = evolvedData.id;
                    creature.name = evolvedData.name;
                    creature.maxHp += 10;
                    creature.hp += 10;
                    creature.attack += 5;
                    creature.defense += 5;
                    creature.speed += 5;
                    
                    // Learn new moves
                    const newMoves = evolvedData.moves.filter(m => !creature.moves.includes(m));
                    if (newMoves.length > 0 && creature.moves.length < 4) {
                        const newMove = newMoves[0];
                        creature.moves.push(newMove);
                        const move = this.cartridge.moves[newMove];
                        if (move) {
                            creature.pp[newMove] = move.pp;
                        }
                    }
                    
                    this.updateBattleUI();
                    this.showText(`${creature.name} evolved into ${evolvedData.name}!`);
                    
                    setTimeout(() => {
                        this.checkBattleEnd();
                    }, 2000);
                }, 2000);
            }
            
            checkBattleEnd() {
                if (this.battle.type === 'trainer' || this.battle.type === 'gym') {
                    // Check for more enemy creatures
                    if (this.battle.currentEnemyIndex < this.battle.trainerTeam.length - 1) {
                        this.battle.currentEnemyIndex++;
                        const nextCreatureId = this.battle.trainerTeam[this.battle.currentEnemyIndex];
                        this.battle.enemyCreature = this.createEnemyCreature(
                            nextCreatureId,
                            this.battle.type === 'gym' ? 10 + (this.player.badges.length * 5) : 5
                        );
                        
                        this.updateBattleUI();
                        this.showText(`Trainer sent out ${this.battle.enemyCreature.name}!`);
                        
                        setTimeout(() => {
                            this.advanceText();
                            this.battle.waitingForInput = true;
                            document.getElementById('battleMenu').classList.add('active');
                        }, 2000);
                    } else {
                        // Trainer defeated
                        if (this.battle.type === 'gym') {
                            const gymData = this.battle.gymData;
                            this.player.badges.push(gymData.badge);
                            this.player.money += gymData.reward;
                            
                            this.showText(`You defeated ${gymData.name}!`);
                            setTimeout(() => {
                                this.showText(`You received the ${gymData.badge}!`);
                                setTimeout(() => {
                                    this.endBattle(true);
                                }, 2000);
                            }, 2000);
                        } else {
                            this.showText('You defeated the trainer!');
                            setTimeout(() => {
                                this.endBattle(true);
                            }, 2000);
                        }
                    }
                } else {
                    // Wild battle ended
                    this.endBattle(true);
                }
            }
            
            updateBattle() {
                // Battle logic is handled through event system
            }
            
            updateBattleUI() {
                if (!this.battle) return;
                
                // Update enemy info
                document.getElementById('enemyName').textContent = this.battle.enemyCreature.name;
                document.getElementById('enemyLevel').textContent = this.battle.enemyCreature.level;
                const enemyHPPercent = (this.battle.enemyCreature.hp / this.battle.enemyCreature.maxHp) * 100;
                document.getElementById('enemyHP').style.width = `${enemyHPPercent}%`;
                document.getElementById('enemyHP').classList.toggle('low', enemyHPPercent < 25);
                
                // Update player info
                document.getElementById('playerName').textContent = this.battle.playerCreature.name;
                document.getElementById('playerLevel').textContent = this.battle.playerCreature.level;
                const playerHPPercent = (this.battle.playerCreature.hp / this.battle.playerCreature.maxHp) * 100;
                document.getElementById('playerHP').style.width = `${playerHPPercent}%`;
                document.getElementById('playerHP').classList.toggle('low', playerHPPercent < 25);
                document.getElementById('playerHPText').textContent = 
                    `${this.battle.playerCreature.hp}/${this.battle.playerCreature.maxHp}`;
            }
            
            endBattle(won = false) {
                this.state = 'OVERWORLD';
                document.getElementById('battleUI').classList.remove('active');
                document.getElementById('battleMenu').classList.remove('active');
                document.getElementById('moveMenu').classList.remove('active');
                
                if (won && this.battle) {
                    if (this.battle.trainerId) {
                        this.defeatedTrainers.add(this.battle.trainerId);
                    }
                }
                
                this.battle = null;
                this.advanceText();
            }
            
            handleMenuInput(key) {
                const menuOptions = document.querySelectorAll('#mainMenu .menu-option');
                
                if (key === 'ArrowUp') {
                    this.menuIndex = Math.max(0, this.menuIndex - 1);
                } else if (key === 'ArrowDown') {
                    this.menuIndex = Math.min(menuOptions.length - 1, this.menuIndex + 1);
                } else if (key === 'z' || key === 'Enter') {
                    this.selectMenuOption(this.menuIndex);
                } else if (key === 'x' || key === 'Escape') {
                    this.closeMenu();
                }
                
                // Update selection
                menuOptions.forEach((option, index) => {
                    option.classList.toggle('selected', index === this.menuIndex);
                });
            }
            
            selectMenuOption(index) {
                switch (index) {
                    case 0: // CREATURES
                        this.showText('Creatures menu not implemented yet!');
                        this.closeMenu();
                        break;
                    case 1: // BAG
                        this.showText('Bag not implemented yet!');
                        this.closeMenu();
                        break;
                    case 2: // SAVE
                        this.exportSave();
                        this.showText('Game saved!');
                        this.closeMenu();
                        break;
                    case 3: // EXIT
                        this.closeMenu();
                        break;
                }
            }
            
            closeMenu() {
                this.state = 'OVERWORLD';
                document.getElementById('mainMenu').classList.remove('active');
            }
            
            updateMenu() {
                // Menu is handled through event system
            }
            
            render() {
                // Clear screen
                this.ctx.fillStyle = '#9bbc0f';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                
                switch (this.state) {
                    case 'LOADING':
                        this.showLoadingScreen();
                        break;
                    case 'OVERWORLD':
                    case 'MENU':
                    case 'TEXT':
                        this.renderOverworld();
                        break;
                    case 'BATTLE':
                        this.renderBattle();
                        break;
                }
            }
            
            renderOverworld() {
                if (!this.map) return;
                
                // Calculate camera offset
                const cameraX = Math.max(0, Math.min(
                    this.player.x - Math.floor(this.screenTilesX / 2),
                    this.map.width - this.screenTilesX
                ));
                const cameraY = Math.max(0, Math.min(
                    this.player.y - Math.floor(this.screenTilesY / 2),
                    this.map.height - this.screenTilesY
                ));
                
                // Render tiles
                for (let y = 0; y < this.screenTilesY; y++) {
                    for (let x = 0; x < this.screenTilesX; x++) {
                        const worldX = x + cameraX;
                        const worldY = y + cameraY;
                        
                        if (worldX < this.map.width && worldY < this.map.height) {
                            const tileIndex = worldY * this.map.width + worldX;
                            const tile = this.map.tiles[tileIndex];
                            const tileData = this.cartridge.tiles[tile];
                            
                            if (tileData) {
                                // Draw tile background
                                this.ctx.fillStyle = tileData.color || '#8bac0f';
                                this.ctx.fillRect(
                                    x * this.tileSize,
                                    y * this.tileSize,
                                    this.tileSize,
                                    this.tileSize
                                );
                                
                                // Draw tile symbol
                                if (tileData.symbol) {
                                    this.ctx.fillStyle = '#0f380f';
                                    this.ctx.font = '8px monospace';
                                    this.ctx.textAlign = 'center';
                                    this.ctx.fillText(
                                        tileData.symbol,
                                        x * this.tileSize + 4,
                                        y * this.tileSize + 7
                                    );
                                }
                            }
                        }
                    }
                }
                
                // Render NPCs
                this.map.npcs.forEach(npc => {
                    const screenX = npc.x - cameraX;
                    const screenY = npc.y - cameraY;
                    
                    if (screenX >= 0 && screenX < this.screenTilesX && 
                        screenY >= 0 && screenY < this.screenTilesY) {
                        
                        // Draw NPC
                        this.ctx.fillStyle = '#306230';
                        this.ctx.fillRect(
                            screenX * this.tileSize + 1,
                            screenY * this.tileSize + 1,
                            this.tileSize - 2,
                            this.tileSize - 2
                        );
                        
                        // Draw sprite indicator
                        this.ctx.fillStyle = '#0f380f';
                        this.ctx.font = '6px monospace';
                        this.ctx.textAlign = 'center';
                        this.ctx.fillText(
                            npc.trainer ? '!' : npc.gymLeader ? 'G' : 'N',
                            screenX * this.tileSize + 4,
                            screenY * this.tileSize + 6
                        );
                    }
                });
                
                // Render player
                const playerScreenX = this.player.x - cameraX;
                const playerScreenY = this.player.y - cameraY;
                
                if (playerScreenX >= 0 && playerScreenX < this.screenTilesX && 
                    playerScreenY >= 0 && playerScreenY < this.screenTilesY) {
                    
                    // Player shadow
                    this.ctx.fillStyle = 'rgba(0,0,0,0.3)';
                    this.ctx.fillRect(
                        playerScreenX * this.tileSize + 1,
                        playerScreenY * this.tileSize + 2,
                        this.tileSize - 2,
                        this.tileSize - 2
                    );
                    
                    // Player sprite
                    this.ctx.fillStyle = '#0f380f';
                    this.ctx.fillRect(
                        playerScreenX * this.tileSize + 1,
                        playerScreenY * this.tileSize + 1,
                        this.tileSize - 2,
                        this.tileSize - 2
                    );
                    
                    // Direction indicator
                    this.ctx.fillStyle = '#9bbc0f';
                    const dirX = playerScreenX * this.tileSize + 4;
                    const dirY = playerScreenY * this.tileSize + 4;
                    
                    switch (this.player.facing) {
                        case 'up':
                            this.ctx.fillRect(dirX - 1, dirY - 2, 2, 2);
                            break;
                        case 'down':
                            this.ctx.fillRect(dirX - 1, dirY + 2, 2, 2);
                            break;
                        case 'left':
                            this.ctx.fillRect(dirX - 3, dirY - 1, 2, 2);
                            break;
                        case 'right':
                            this.ctx.fillRect(dirX + 1, dirY - 1, 2, 2);
                            break;
                    }
                }
                
                // Render HUD
                this.renderHUD();
            }
            
            renderHUD() {
                // Map name
                this.ctx.fillStyle = 'rgba(15, 56, 15, 0.8)';
                this.ctx.fillRect(2, 2, this.map.name.length * 6 + 4, 12);
                this.ctx.fillStyle = '#9bbc0f';
                this.ctx.font = '8px monospace';
                this.ctx.textAlign = 'left';
                this.ctx.fillText(this.map.name, 4, 10);
                
                // Player info
                const infoText = `$${this.player.money} B:${this.player.badges.length}`;
                this.ctx.fillStyle = 'rgba(15, 56, 15, 0.8)';
                this.ctx.fillRect(this.canvas.width - infoText.length * 6 - 6, 2, infoText.length * 6 + 4, 12);
                this.ctx.fillStyle = '#9bbc0f';
                this.ctx.textAlign = 'right';
                this.ctx.fillText(infoText, this.canvas.width - 4, 10);
            }
            
            renderBattle() {
                // Battle background
                this.ctx.fillStyle = '#8bac0f';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                
                // Ground
                this.ctx.fillStyle = '#556b2f';
                this.ctx.fillRect(0, this.canvas.height * 0.6, this.canvas.width, this.canvas.height * 0.4);
                
                // Battle platforms
                // Enemy platform
                this.ctx.fillStyle = '#306230';
                this.ctx.beginPath();
                this.ctx.ellipse(this.canvas.width * 0.75, this.canvas.height * 0.4, 35, 15, 0, 0, Math.PI * 2);
                this.ctx.fill();
                
                // Player platform
                this.ctx.fillStyle = '#306230';
                this.ctx.beginPath();
                this.ctx.ellipse(this.canvas.width * 0.25, this.canvas.height * 0.75, 35, 15, 0, 0, Math.PI * 2);
                this.ctx.fill();
                
                // Creatures
                if (this.battle) {
                    // Enemy creature
                    this.renderCreature(
                        this.battle.enemyCreature,
                        this.canvas.width * 0.75,
                        this.canvas.height * 0.35,
                        false
                    );
                    
                    // Player creature
                    this.renderCreature(
                        this.battle.playerCreature,
                        this.canvas.width * 0.25,
                        this.canvas.height * 0.7,
                        true
                    );
                }
            }
            
            renderCreature(creature, x, y, isPlayer) {
                // Simple creature rendering
                const size = isPlayer ? 30 : 25;
                
                // Shadow
                this.ctx.fillStyle = 'rgba(0,0,0,0.3)';
                this.ctx.beginPath();
                this.ctx.ellipse(x, y + size/2, size/2, size/4, 0, 0, Math.PI * 2);
                this.ctx.fill();
                
                // Creature body (simple rectangle for now)
                this.ctx.fillStyle = '#0f380f';
                this.ctx.fillRect(x - size/2, y - size/2, size, size);
                
                // Creature details
                this.ctx.fillStyle = '#9bbc0f';
                this.ctx.font = '6px monospace';
                this.ctx.textAlign = 'center';
                this.ctx.fillText(creature.name.substring(0, 3), x, y + 2);
                
                // Animation based on HP
                if (creature.hp < creature.maxHp * 0.25) {
                    // Shake effect for low HP
                    const shakeX = Math.sin(this.frameCount * 0.3) * 2;
                    this.ctx.translate(shakeX, 0);
                    this.ctx.fillRect(x - size/2, y - size/2, size, size);
                    this.ctx.translate(-shakeX, 0);
                }
            }
        }
        


            // Accessibility Features

            announce(message, priority = 'polite') {
                // Announce to screen readers
                const liveRegion = document.getElementById('liveRegion');
                if (liveRegion) {
                    liveRegion.setAttribute('aria-live', priority);
                    liveRegion.textContent = message;

                    // Clear after announcement
                    setTimeout(() => {
                        liveRegion.textContent = '';
                    }, 100);
                }

                // Also log for debugging
                if (this.accessibilitySettings && this.accessibilitySettings.screenReaderMode) {
                    console.log('[Screen Reader]:', message);
                }
            }

            toggleAccessibilityPanel() {
                const panel = document.getElementById('accessibilityPanel');
                const isActive = panel.classList.contains('active');

                if (isActive) {
                    panel.classList.remove('active');
                    panel.setAttribute('aria-hidden', 'true');
                    this.announce('Accessibility settings closed');
                } else {
                    panel.classList.add('active');
                    panel.setAttribute('aria-hidden', 'false');
                    document.getElementById('highContrastToggle').focus();
                    this.announce('Accessibility settings opened');
                }
            }

            initializeAccessibility() {
                // Initialize accessibility settings
                this.accessibilitySettings = {
                    highContrast: false,
                    reducedMotion: false,
                    largeText: false,
                    screenReaderMode: false,
                    textSpeed: 3
                };

                // Load saved accessibility preferences
                const saved = localStorage.getItem('wowmon_accessibility');
                if (saved) {
                    try {
                        this.accessibilitySettings = JSON.parse(saved);
                        this.applyAccessibilitySettings();
                    } catch (e) {
                        console.error('Failed to load accessibility settings:', e);
                    }
                }

                // High Contrast Toggle
                const highContrastToggle = document.getElementById('highContrastToggle');
                if (highContrastToggle) {
                    highContrastToggle.checked = this.accessibilitySettings.highContrast;
                    highContrastToggle.addEventListener('change', (e) => {
                        this.accessibilitySettings.highContrast = e.target.checked;
                        document.body.classList.toggle('high-contrast', e.target.checked);
                        this.saveAccessibilitySettings();
                        this.announce(e.target.checked ? 'High contrast mode enabled' : 'High contrast mode disabled');
                    });
                }

                // Reduced Motion Toggle
                const reducedMotionToggle = document.getElementById('reducedMotionToggle');
                if (reducedMotionToggle) {
                    reducedMotionToggle.checked = this.accessibilitySettings.reducedMotion;
                    reducedMotionToggle.addEventListener('change', (e) => {
                        this.accessibilitySettings.reducedMotion = e.target.checked;
                        document.body.classList.toggle('reduced-motion', e.target.checked);
                        this.saveAccessibilitySettings();
                        this.announce(e.target.checked ? 'Reduced motion enabled' : 'Reduced motion disabled');
                    });
                }

                // Large Text Toggle
                const largeTextToggle = document.getElementById('largeTextToggle');
                if (largeTextToggle) {
                    largeTextToggle.checked = this.accessibilitySettings.largeText;
                    largeTextToggle.addEventListener('change', (e) => {
                        this.accessibilitySettings.largeText = e.target.checked;
                        document.body.classList.toggle('large-text', e.target.checked);
                        this.saveAccessibilitySettings();
                        this.announce(e.target.checked ? 'Large text enabled' : 'Large text disabled');
                    });
                }

                // Screen Reader Mode Toggle
                const screenReaderMode = document.getElementById('screenReaderMode');
                if (screenReaderMode) {
                    screenReaderMode.checked = this.accessibilitySettings.screenReaderMode;
                    screenReaderMode.addEventListener('change', (e) => {
                        this.accessibilitySettings.screenReaderMode = e.target.checked;
                        this.saveAccessibilitySettings();
                        this.announce(e.target.checked ? 'Enhanced screen reader mode enabled' : 'Enhanced screen reader mode disabled');
                    });
                }

                // Text Speed Range
                const textSpeedRange = document.getElementById('textSpeedRange');
                const textSpeedValue = document.getElementById('textSpeedValue');
                if (textSpeedRange && textSpeedValue) {
                    textSpeedRange.value = this.accessibilitySettings.textSpeed;
                    textSpeedValue.textContent = this.accessibilitySettings.textSpeed;
                    textSpeedRange.addEventListener('input', (e) => {
                        this.accessibilitySettings.textSpeed = parseInt(e.target.value);
                        textSpeedValue.textContent = e.target.value;
                        this.saveAccessibilitySettings();
                        this.announce('Text speed set to ' + e.target.value);
                    });
                }

                // Keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    // Alt+A opens accessibility panel
                    if (e.altKey && e.key.toLowerCase() === 'a') {
                        e.preventDefault();
                        this.toggleAccessibilityPanel();
                    }

                    // Escape closes accessibility panel
                    if (e.key === 'Escape') {
                        const panel = document.getElementById('accessibilityPanel');
                        if (panel && panel.classList.contains('active')) {
                            this.toggleAccessibilityPanel();
                        }
                    }
                });

                // Add focus management for menus
                this.setupMenuAccessibility();

                // Announce game state changes
                this.announceGameState();
            }

            setupMenuAccessibility() {
                // Add keyboard navigation to menu options
                const addMenuNavigation = (menuId) => {
                    const menu = document.getElementById(menuId);
                    if (!menu) return;

                    const options = menu.querySelectorAll('.menu-option, .move-option');
                    options.forEach((option, index) => {
                        option.setAttribute('tabindex', index === 0 ? '0' : '-1');
                        option.setAttribute('role', 'menuitem');

                        option.addEventListener('keydown', (e) => {
                            let newIndex = index;

                            if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {
                                e.preventDefault();
                                newIndex = (index + 1) % options.length;
                            } else if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') {
                                e.preventDefault();
                                newIndex = (index - 1 + options.length) % options.length;
                            } else if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                option.click();
                                return;
                            }

                            if (newIndex !== index) {
                                options[newIndex].focus();
                                options[newIndex].setAttribute('tabindex', '0');
                                option.setAttribute('tabindex', '-1');

                                // Announce the focused option
                                this.announce(options[newIndex].textContent.trim());
                            }
                        });
                    });
                };

                addMenuNavigation('mainMenu');
                addMenuNavigation('battleMenu');
                addMenuNavigation('moveMenu');
            }

            announceGameState() {
                // Override state changes to announce them
                const originalState = this.state;
                Object.defineProperty(this, '_state', {
                    writable: true,
                    value: originalState
                });

                Object.defineProperty(this, 'state', {
                    get() {
                        return this._state;
                    },
                    set(newState) {
                        const oldState = this._state;
                        this._state = newState;

                        if (this.accessibilitySettings && this.accessibilitySettings.screenReaderMode && oldState !== newState) {
                            switch (newState) {
                                case 'WORLD':
                                    this.announce('Exploring the world');
                                    break;
                                case 'BATTLE':
                                    this.announce('Battle started');
                                    break;
                                case 'MENU':
                                    this.announce('Menu opened');
                                    break;
                                case 'TEXT':
                                    this.announce('Dialogue displayed');
                                    break;
                            }
                        }
                    }
                });
            }

            saveAccessibilitySettings() {
                localStorage.setItem('wowmon_accessibility', JSON.stringify(this.accessibilitySettings));
            }

            applyAccessibilitySettings() {
                if (this.accessibilitySettings.highContrast) {
                    document.body.classList.add('high-contrast');
                }
                if (this.accessibilitySettings.reducedMotion) {
                    document.body.classList.add('reduced-motion');
                }
                if (this.accessibilitySettings.largeText) {
                    document.body.classList.add('large-text');
                }
            }

                // Initialize game engine
        const game = new GameEngine();
    </script>
</body>
</html>