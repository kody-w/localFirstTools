{
  "id": "space-invaders",
  "name": "Space Invaders",
  "description": "Classic arcade game where you defend against alien invaders",
  "icon": "ðŸ‘¾",
  "gameData": {
    "playerWidth": 26,
    "playerHeight": 16,
    "playerSpeed": 4,
    "playerColor": "#00FF00",
    "bulletWidth": 3,
    "bulletHeight": 10,
    "bulletSpeed": 7,
    "bulletColor": "#FFFFFF",
    "invaderWidth": 24,
    "invaderHeight": 16,
    "invaderTypes": 3,
    "invaderRows": 5,
    "invaderCols": 8,
    "invaderPadding": 10,
    "invaderTopOffset": 30,
    "invaderSideOffset": 15,
    "invaderMoveSpeed": 20,
    "invaderDropAmount": 15,
    "invaderFireRate": 0.01,
    "invaderBulletSpeed": 3,
    "shieldCount": 4,
    "shieldWidth": 40,
    "shieldHeight": 30,
    "shieldTopOffset": 170,
    "colors": {
      "background": "#000000",
      "invaders": ["#FF0000", "#FF00FF", "#00FFFF"],
      "invaderBullet": "#FF0000",
      "shields": "#00AA00",
      "text": "#FFFFFF",
      "stars": "#FFFFFF"
    }
  },
  "initializeCode": "function(display) {\n  this.display = display;\n  this.canvas = document.createElement('canvas');\n  this.canvas.width = 280;\n  this.canvas.height = 248;\n  display.appendChild(this.canvas);\n  this.ctx = this.canvas.getContext('2d');\n  \n  // Initialize game state\n  this.resetGame();\n  \n  // Create stars for the background\n  this.stars = [];\n  for (let i = 0; i < 50; i++) {\n    this.stars.push({\n      x: Math.random() * this.canvas.width,\n      y: Math.random() * this.canvas.height,\n      size: Math.random() * 2 + 1,\n      opacity: Math.random() * 0.8 + 0.2\n    });\n  }\n  \n  // Start the game loop\n  this.lastTime = performance.now();\n  this.animationFrame = 0;\n  this.animationCounter = 0;\n  \n  this.render();\n}",
  "handleInputCode": "function(button, isPressed) {\n  if (this.gameOver) {\n    if (isPressed && button === 'a') {\n      this.resetGame();\n    }\n    return;\n  }\n  \n  if (this.levelComplete) {\n    if (isPressed && button === 'a') {\n      this.startNextLevel();\n    }\n    return;\n  }\n  \n  if (this.paused) {\n    if (isPressed && button === 'b') {\n      this.paused = false;\n    }\n    return;\n  }\n  \n  if (isPressed && button === 'b') {\n    this.paused = true;\n    return;\n  }\n  \n  if (!this.gameStarted && isPressed && (button === 'a' || button === 'left' || button === 'right')) {\n    this.gameStarted = true;\n  }\n  \n  if (button === 'left') {\n    this.leftPressed = isPressed;\n  }\n  else if (button === 'right') {\n    this.rightPressed = isPressed;\n  }\n  else if (isPressed && button === 'a' && !this.playerBullet) {\n    this.firePlayerBullet();\n  }\n}",
  "updateCode": "function(deltaTime) {\n  if (this.gameOver || this.levelComplete || this.paused || !this.gameStarted) {\n    return;\n  }\n  \n  const dt = Math.min(deltaTime, 32) / 16.67; // Cap at ~60fps\n  \n  // Update animation counters\n  this.animationCounter += dt;\n  if (this.animationCounter >= 15) {\n    this.animationCounter = 0;\n    this.animationFrame = (this.animationFrame + 1) % 2;\n  }\n  \n  // Update player movement\n  if (this.rightPressed && this.playerX < this.canvas.width - this.gameData.playerWidth) {\n    this.playerX += this.gameData.playerSpeed * dt;\n  }\n  if (this.leftPressed && this.playerX > 0) {\n    this.playerX -= this.gameData.playerSpeed * dt;\n  }\n  \n  // Update invader movement\n  this.updateInvaders(dt);\n  \n  // Update player bullet\n  this.updatePlayerBullet(dt);\n  \n  // Update invader bullets\n  this.updateInvaderBullets(dt);\n  \n  // Sometimes invaders fire\n  this.maybeFireInvaderBullet();\n  \n  // Check for level completion\n  if (this.invaders.length === 0) {\n    this.levelComplete = true;\n  }\n}",
  "renderCode": "function() {\n  // Clear canvas\n  this.ctx.fillStyle = this.gameData.colors.background;\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Draw stars\n  this.drawStars();\n  \n  // Draw shields\n  this.drawShields();\n  \n  // Draw player\n  this.drawPlayer();\n  \n  // Draw invaders\n  this.drawInvaders();\n  \n  // Draw player bullet\n  if (this.playerBullet) {\n    this.drawBullet(this.playerBullet.x, this.playerBullet.y, \n                   this.gameData.bulletWidth, this.gameData.bulletHeight, \n                   this.gameData.bulletColor);\n  }\n  \n  // Draw invader bullets\n  for (let bullet of this.invaderBullets) {\n    this.drawBullet(bullet.x, bullet.y, \n                   this.gameData.bulletWidth, this.gameData.bulletHeight, \n                   this.gameData.colors.invaderBullet);\n  }\n  \n  // Draw UI (score, lives, level)\n  this.drawUI();\n  \n  // Draw start screen if the game hasn't started\n  if (!this.gameStarted) {\n    this.drawStartScreen();\n  }\n  \n  // Draw pause overlay\n  if (this.paused) {\n    this.drawPauseScreen();\n  }\n  \n  // Draw level complete overlay\n  if (this.levelComplete) {\n    this.drawLevelCompleteScreen();\n  }\n  \n  // Draw game over overlay\n  if (this.gameOver) {\n    this.drawGameOverScreen();\n  }\n}",
  "cleanupCode": "function() {\n  if (this.canvas && this.canvas.parentNode) {\n    this.canvas.parentNode.removeChild(this.canvas);\n  }\n}",
  "additionalFunctions": {
    "resetGame": "function() {\n  // Reset game state\n  this.gameStarted = false;\n  this.gameOver = false;\n  this.levelComplete = false;\n  this.paused = false;\n  this.score = 0;\n  this.highScore = this.highScore || 0;\n  this.lives = 3;\n  this.level = 1;\n  \n  // Reset player\n  this.playerX = (this.canvas.width - this.gameData.playerWidth) / 2;\n  this.leftPressed = false;\n  this.rightPressed = false;\n  \n  // Reset bullets\n  this.playerBullet = null;\n  this.invaderBullets = [];\n  \n  // Initialize shields\n  this.initShields();\n  \n  // Initialize invaders\n  this.initInvaders();\n  \n  // Set initial invader movement\n  this.invaderDirection = 1; // 1 for right, -1 for left\n  this.invaderSpeed = this.gameData.invaderMoveSpeed / (1 + (this.level - 1) * 0.1);\n  this.invaderMoveCounter = 0;\n}",
    "initInvaders": "function() {\n  this.invaders = [];\n  \n  for (let row = 0; row < this.gameData.invaderRows; row++) {\n    for (let col = 0; col < this.gameData.invaderCols; col++) {\n      this.invaders.push({\n        x: col * (this.gameData.invaderWidth + this.gameData.invaderPadding) + this.gameData.invaderSideOffset,\n        y: row * (this.gameData.invaderHeight + this.gameData.invaderPadding) + this.gameData.invaderTopOffset,\n        type: row % this.gameData.invaderTypes,\n        alive: true\n      });\n    }\n  }\n}",
    "initShields": "function() {\n  this.shields = [];\n  \n  const shieldSpacing = this.canvas.width / (this.gameData.shieldCount + 1);\n  \n  for (let i = 0; i < this.gameData.shieldCount; i++) {\n    const shield = {\n      x: (i + 1) * shieldSpacing - this.gameData.shieldWidth / 2,\n      y: this.gameData.shieldTopOffset,\n      width: this.gameData.shieldWidth,\n      height: this.gameData.shieldHeight,\n      pixels: []\n    };\n    \n    // Initialize shield pixels (8x8 grid of pixels for each shield)\n    const pixelWidth = shield.width / 8;\n    const pixelHeight = shield.height / 8;\n    \n    for (let y = 0; y < 8; y++) {\n      shield.pixels[y] = [];\n      for (let x = 0; x < 8; x++) {\n        // Create shield shape (inverted U shape)\n        let pixelActive = true;\n        \n        // Empty space in middle bottom\n        if (y >= 5 && x >= 2 && x <= 5) {\n          pixelActive = false;\n        }\n        \n        shield.pixels[y][x] = pixelActive;\n      }\n    }\n    \n    this.shields.push(shield);\n  }\n}",
    "startNextLevel": "function() {\n  this.level++;\n  this.levelComplete = false;\n  \n  // Reset player position\n  this.playerX = (this.canvas.width - this.gameData.playerWidth) / 2;\n  \n  // Reset bullets\n  this.playerBullet = null;\n  this.invaderBullets = [];\n  \n  // Reinitialize invaders\n  this.initInvaders();\n  \n  // Increase invader speed with level (up to a point)\n  this.invaderDirection = 1;\n  this.invaderSpeed = this.gameData.invaderMoveSpeed / (1 + (this.level - 1) * 0.1);\n  this.invaderMoveCounter = 0;\n  \n  // Add bonus points for completing the level\n  this.score += 100 * this.level;\n}",
    "firePlayerBullet": "function() {\n  this.playerBullet = {\n    x: this.playerX + this.gameData.playerWidth / 2 - this.gameData.bulletWidth / 2,\n    y: this.canvas.height - this.gameData.playerHeight - this.gameData.bulletHeight,\n    width: this.gameData.bulletWidth,\n    height: this.gameData.bulletHeight\n  };\n}",
    "maybeFireInvaderBullet": "function() {\n  // Randomly decide if an invader should fire\n  if (this.invaders.length > 0 && Math.random() < this.gameData.invaderFireRate * this.level * this.invaders.length / 30) {\n    // Pick a random invader that's in the lowest position of its column\n    const columns = {};\n    \n    for (let invader of this.invaders) {\n      const col = Math.floor((invader.x - this.gameData.invaderSideOffset) / (this.gameData.invaderWidth + this.gameData.invaderPadding));\n      \n      if (!columns[col] || invader.y > columns[col].y) {\n        columns[col] = invader;\n      }\n    }\n    \n    const columnNumbers = Object.keys(columns);\n    if (columnNumbers.length > 0) {\n      const randomColumn = columnNumbers[Math.floor(Math.random() * columnNumbers.length)];\n      const shooter = columns[randomColumn];\n      \n      // Fire a bullet from this invader\n      this.invaderBullets.push({\n        x: shooter.x + this.gameData.invaderWidth / 2 - this.gameData.bulletWidth / 2,\n        y: shooter.y + this.gameData.invaderHeight,\n        width: this.gameData.bulletWidth,\n        height: this.gameData.bulletHeight\n      });\n    }\n  }\n}",
    "updateInvaders": "function(dt) {\n  this.invaderMoveCounter += dt;\n  \n  // Move all invaders based on timing\n  if (this.invaderMoveCounter >= this.invaderSpeed) {\n    this.invaderMoveCounter = 0;\n    \n    // Calculate if any invader would exceed screen bounds\n    let hitEdge = false;\n    let lowestInvader = 0;\n    \n    for (let invader of this.invaders) {\n      if (invader.y > lowestInvader) {\n        lowestInvader = invader.y;\n      }\n      \n      if ((invader.x + this.gameData.invaderWidth + this.invaderDirection * 8 > this.canvas.width && this.invaderDirection > 0) ||\n          (invader.x + this.invaderDirection * 8 < 0 && this.invaderDirection < 0)) {\n        hitEdge = true;\n      }\n    }\n    \n    // Check if invaders reached the bottom\n    if (lowestInvader > this.canvas.height - this.gameData.playerHeight - this.gameData.invaderHeight * 2) {\n      this.gameOver = true;\n      return;\n    }\n    \n    // If an invader hit the edge, change direction and move down\n    if (hitEdge) {\n      this.invaderDirection *= -1;\n      for (let invader of this.invaders) {\n        invader.y += this.gameData.invaderDropAmount;\n      }\n    } else {\n      // Move invaders horizontally\n      for (let invader of this.invaders) {\n        invader.x += this.invaderDirection * 8;\n      }\n    }\n  }\n}",
    "updatePlayerBullet": "function(dt) {\n  if (this.playerBullet) {\n    // Move bullet up\n    this.playerBullet.y -= this.gameData.bulletSpeed * dt;\n    \n    // Check if bullet is off screen\n    if (this.playerBullet.y < 0) {\n      this.playerBullet = null;\n      return;\n    }\n    \n    // Check for collision with invaders\n    for (let i = this.invaders.length - 1; i >= 0; i--) {\n      const invader = this.invaders[i];\n      \n      if (this.checkCollision(this.playerBullet, {\n        x: invader.x,\n        y: invader.y,\n        width: this.gameData.invaderWidth,\n        height: this.gameData.invaderHeight\n      })) {\n        // Hit an invader\n        this.invaders.splice(i, 1);\n        this.playerBullet = null;\n        \n        // Add score based on invader type\n        this.score += (3 - invader.type) * 10;\n        \n        // Update high score if needed\n        if (this.score > this.highScore) {\n          this.highScore = this.score;\n        }\n        \n        return;\n      }\n    }\n    \n    // Check for collision with shields\n    if (this.checkShieldCollision(this.playerBullet)) {\n      this.playerBullet = null;\n      return;\n    }\n  }\n}",
    "updateInvaderBullets": "function(dt) {\n  for (let i = this.invaderBullets.length - 1; i >= 0; i--) {\n    const bullet = this.invaderBullets[i];\n    \n    // Move bullet down\n    bullet.y += this.gameData.invaderBulletSpeed * dt;\n    \n    // Check if bullet is off screen\n    if (bullet.y > this.canvas.height) {\n      this.invaderBullets.splice(i, 1);\n      continue;\n    }\n    \n    // Check for collision with player\n    if (this.checkCollision(bullet, {\n      x: this.playerX,\n      y: this.canvas.height - this.gameData.playerHeight,\n      width: this.gameData.playerWidth,\n      height: this.gameData.playerHeight\n    })) {\n      // Player hit\n      this.invaderBullets.splice(i, 1);\n      this.lives--;\n      \n      if (this.lives <= 0) {\n        this.gameOver = true;\n      }\n      \n      continue;\n    }\n    \n    // Check for collision with shields\n    if (this.checkShieldCollision(bullet)) {\n      this.invaderBullets.splice(i, 1);\n    }\n  }\n}",
    "checkCollision": "function(rect1, rect2) {\n  return rect1.x < rect2.x + rect2.width &&\n         rect1.x + rect1.width > rect2.x &&\n         rect1.y < rect2.y + rect2.height &&\n         rect1.y + rect1.height > rect2.y;\n}",
    "checkShieldCollision": "function(bullet) {\n  for (let shield of this.shields) {\n    // Check if bullet is in shield area\n    if (bullet.x + bullet.width > shield.x &&\n        bullet.x < shield.x + shield.width &&\n        bullet.y + bullet.height > shield.y &&\n        bullet.y < shield.y + shield.height) {\n      \n      // Convert bullet position to shield pixel coordinates\n      const pixelWidth = shield.width / 8;\n      const pixelHeight = shield.height / 8;\n      \n      const pixelX = Math.floor((bullet.x + bullet.width / 2 - shield.x) / pixelWidth);\n      const pixelY = Math.floor((bullet.y + bullet.height / 2 - shield.y) / pixelHeight);\n      \n      // Check if this pixel is within bounds and active\n      if (pixelX >= 0 && pixelX < 8 && pixelY >= 0 && pixelY < 8 && shield.pixels[pixelY][pixelX]) {\n        // Destroy this pixel and adjacent pixels to create damage effect\n        shield.pixels[pixelY][pixelX] = false;\n        \n        // Try to destroy adjacent pixels (if they exist and are active)\n        const adjacentPixels = [\n          [pixelX - 1, pixelY], [pixelX + 1, pixelY],\n          [pixelX, pixelY - 1], [pixelX, pixelY + 1]\n        ];\n        \n        for (let [adjX, adjY] of adjacentPixels) {\n          if (adjX >= 0 && adjX < 8 && adjY >= 0 && adjY < 8) {\n            // 50% chance to destroy adjacent pixels\n            if (Math.random() < 0.5) {\n              shield.pixels[adjY][adjX] = false;\n            }\n          }\n        }\n        \n        return true; // Collision detected\n      }\n    }\n  }\n  \n  return false; // No collision\n}",
    "drawStars": "function() {\n  for (let star of this.stars) {\n    this.ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;\n    this.ctx.fillRect(star.x, star.y, star.size, star.size);\n  }\n}",
    "drawPlayer": "function() {\n  // Draw main body (rectangle with rounded top)\n  this.ctx.fillStyle = this.gameData.playerColor;\n  \n  // Base rectangle\n  this.ctx.fillRect(this.playerX, this.canvas.height - this.gameData.playerHeight, \n                   this.gameData.playerWidth, this.gameData.playerHeight - 4);\n  \n  // Top rounded part\n  this.ctx.beginPath();\n  this.ctx.moveTo(this.playerX, this.canvas.height - this.gameData.playerHeight + 4);\n  this.ctx.lineTo(this.playerX + this.gameData.playerWidth / 2, this.canvas.height - this.gameData.playerHeight);\n  this.ctx.lineTo(this.playerX + this.gameData.playerWidth, this.canvas.height - this.gameData.playerHeight + 4);\n  this.ctx.fill();\n  \n  // Add detail to ship (gun mount)\n  this.ctx.fillRect(this.playerX + this.gameData.playerWidth / 2 - 2, \n                   this.canvas.height - this.gameData.playerHeight - 2, 4, 4);\n}",
    "drawInvaders": "function() {\n  for (let invader of this.invaders) {\n    this.ctx.fillStyle = this.gameData.colors.invaders[invader.type];\n    \n    // Different invader shapes based on type\n    switch (invader.type) {\n      case 0: // Top row - squid type\n        this.drawSquidInvader(invader.x, invader.y, this.animationFrame);\n        break;\n      case 1: // Middle rows - crab type\n        this.drawCrabInvader(invader.x, invader.y, this.animationFrame);\n        break;\n      case 2: // Bottom rows - octopus type\n        this.drawOctopusInvader(invader.x, invader.y, this.animationFrame);\n        break;\n    }\n  }\n}",
    "drawSquidInvader": "function(x, y, frame) {\n  const w = this.gameData.invaderWidth;\n  const h = this.gameData.invaderHeight;\n  \n  if (frame === 0) {\n    // Frame 1 shape\n    this.ctx.fillRect(x + w/4, y, w/2, h/2);  // Head\n    this.ctx.fillRect(x, y + h/2, w, h/2);     // Body\n    // Eyes\n    this.ctx.clearRect(x + w/4, y + h/4, w/6, h/6);\n    this.ctx.clearRect(x + w*11/16, y + h/4, w/6, h/6);\n    // Tentacles\n    this.ctx.clearRect(x + w/8, y + h*3/4, w/4, h/4);\n    this.ctx.clearRect(x + w*5/8, y + h*3/4, w/4, h/4);\n  } else {\n    // Frame 2 shape\n    this.ctx.fillRect(x + w/4, y, w/2, h/2);  // Head\n    this.ctx.fillRect(x, y + h/2, w, h/2);     // Body\n    // Eyes\n    this.ctx.clearRect(x + w/4, y + h/4, w/6, h/6);\n    this.ctx.clearRect(x + w*11/16, y + h/4, w/6, h/6);\n    // Tentacles - different position\n    this.ctx.clearRect(x, y + h*3/4, w/4, h/4);\n    this.ctx.clearRect(x + w*3/4, y + h*3/4, w/4, h/4);\n  }\n}",
    "drawCrabInvader": "function(x, y, frame) {\n  const w = this.gameData.invaderWidth;\n  const h = this.gameData.invaderHeight;\n  \n  if (frame === 0) {\n    // Frame 1 shape\n    this.ctx.fillRect(x, y, w, h*3/4);       // Main body\n    this.ctx.fillRect(x + w/6, y + h*3/4, w*2/3, h/4);  // Lower part\n    // Eyes\n    this.ctx.clearRect(x + w/6, y + h/4, w/6, h/6);\n    this.ctx.clearRect(x + w*4/6, y + h/4, w/6, h/6);\n    // Claws up\n    this.ctx.fillRect(x - w/6, y + h/4, w/6, h/4);\n    this.ctx.fillRect(x + w, y + h/4, w/6, h/4);\n  } else {\n    // Frame 2 shape\n    this.ctx.fillRect(x, y, w, h*3/4);       // Main body\n    this.ctx.fillRect(x + w/6, y + h*3/4, w*2/3, h/4);  // Lower part\n    // Eyes\n    this.ctx.clearRect(x + w/6, y + h/4, w/6, h/6);\n    this.ctx.clearRect(x + w*4/6, y + h/4, w/6, h/6);\n    // Claws down\n    this.ctx.fillRect(x - w/6, y + h/2, w/6, h/4);\n    this.ctx.fillRect(x + w, y + h/2, w/6, h/4);\n  }\n}",
    "drawOctopusInvader": "function(x, y, frame) {\n  const w = this.gameData.invaderWidth;\n  const h = this.gameData.invaderHeight;\n  \n  if (frame === 0) {\n    // Frame 1 shape\n    this.ctx.fillRect(x + w/6, y, w*2/3, h*2/3);  // Head\n    this.ctx.fillRect(x, y + h/3, w, h/3);         // Middle\n    // Eyes\n    this.ctx.clearRect(x + w/4, y + h/6, w/6, h/6);\n    this.ctx.clearRect(x + w*4/6, y + h/6, w/6, h/6);\n    // Tentacles down\n    this.ctx.fillRect(x, y + h*2/3, w/6, h/3);\n    this.ctx.fillRect(x + w/3, y + h*2/3, w/6, h/3);\n    this.ctx.fillRect(x + w*3/6, y + h*2/3, w/6, h/3);\n    this.ctx.fillRect(x + w*5/6, y + h*2/3, w/6, h/3);\n  } else {\n    // Frame 2 shape\n    this.ctx.fillRect(x + w/6, y, w*2/3, h*2/3);  // Head\n    this.ctx.fillRect(x, y + h/3, w, h/3);         // Middle\n    // Eyes\n    this.ctx.clearRect(x + w/4, y + h/6, w/6, h/6);\n    this.ctx.clearRect(x + w*4/6, y + h/6, w/6, h/6);\n    // Tentacles up\n    this.ctx.fillRect(x + w/6, y + h*2/3, w/6, h/3);\n    this.ctx.fillRect(x + w/2, y + h*2/3, w/6, h/3);\n    this.ctx.fillRect(x + w*2/3, y + h*2/3, w/6, h/3);\n  }\n}",
    "drawBullet": "function(x, y, width, height, color) {\n  this.ctx.fillStyle = color;\n  this.ctx.fillRect(x, y, width, height);\n}",
    "drawShields": "function() {\n  this.ctx.fillStyle = this.gameData.colors.shields;\n  \n  for (let shield of this.shields) {\n    const pixelWidth = shield.width / 8;\n    const pixelHeight = shield.height / 8;\n    \n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        if (shield.pixels[y][x]) {\n          this.ctx.fillRect(\n            shield.x + x * pixelWidth,\n            shield.y + y * pixelHeight,\n            pixelWidth,\n            pixelHeight\n          );\n        }\n      }\n    }\n  }\n}",
    "drawUI": "function() {\n  // Draw score\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'top';\n  this.ctx.fillText(`SCORE: ${this.score}`, 10, 10);\n  \n  // Draw high score\n  this.ctx.textAlign = 'center';\n  this.ctx.fillText(`HIGH: ${this.highScore}`, this.canvas.width / 2, 10);\n  \n  // Draw level\n  this.ctx.textAlign = 'right';\n  this.ctx.fillText(`LEVEL: ${this.level}`, this.canvas.width - 10, 10);\n  \n  // Draw lives\n  this.ctx.textAlign = 'left';\n  this.ctx.fillText(`LIVES: ${this.lives}`, 10, this.canvas.height - 20);\n}",
    "drawStartScreen": "function() {\n  // Semi-transparent overlay\n  this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Title\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '20px \"Press Start 2P\"';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'middle';\n  this.ctx.fillText('SPACE INVADERS', this.canvas.width / 2, this.canvas.height / 3);\n  \n  // Draw a sample invader for each type\n  const invaderX = this.canvas.width / 2 - this.gameData.invaderWidth / 2;\n  let invaderY = this.canvas.height / 2 - 20;\n  \n  this.ctx.fillStyle = this.gameData.colors.invaders[0];\n  this.drawSquidInvader(invaderX, invaderY, 0);\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('= 30 PTS', invaderX + this.gameData.invaderWidth + 20, invaderY + this.gameData.invaderHeight / 2);\n  \n  invaderY += 30;\n  this.ctx.fillStyle = this.gameData.colors.invaders[1];\n  this.drawCrabInvader(invaderX, invaderY, 0);\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.fillText('= 20 PTS', invaderX + this.gameData.invaderWidth + 20, invaderY + this.gameData.invaderHeight / 2);\n  \n  invaderY += 30;\n  this.ctx.fillStyle = this.gameData.colors.invaders[2];\n  this.drawOctopusInvader(invaderX, invaderY, 0);\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.fillText('= 10 PTS', invaderX + this.gameData.invaderWidth + 20, invaderY + this.gameData.invaderHeight / 2);\n  \n  // Instructions\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('PRESS LEFT/RIGHT TO MOVE', this.canvas.width / 2, invaderY + 50);\n  this.ctx.fillText('PRESS A TO FIRE', this.canvas.width / 2, invaderY + 65);\n  this.ctx.fillText('PRESS ANY KEY TO START', this.canvas.width / 2, invaderY + 90);\n}",
    "drawPauseScreen": "function() {\n  // Semi-transparent overlay\n  this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Pause text\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '20px \"Press Start 2P\"';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'middle';\n  this.ctx.fillText('PAUSED', this.canvas.width / 2, this.canvas.height / 2 - 20);\n  \n  // Instructions\n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('PRESS B TO RESUME', this.canvas.width / 2, this.canvas.height / 2 + 20);\n}",
    "drawLevelCompleteScreen": "function() {\n  // Semi-transparent overlay\n  this.ctx.fillStyle = 'rgba(0, 0, 100, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Level complete text\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '16px \"Press Start 2P\"';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'middle';\n  this.ctx.fillText('LEVEL COMPLETE!', this.canvas.width / 2, this.canvas.height / 2 - 30);\n  \n  this.ctx.font = '12px \"Press Start 2P\"';\n  this.ctx.fillText(`LEVEL ${this.level} CLEARED`, this.canvas.width / 2, this.canvas.height / 2);\n  \n  this.ctx.font = '10px \"Press Start 2P\"';\n  this.ctx.fillText(`SCORE: ${this.score}`, this.canvas.width / 2, this.canvas.height / 2 + 25);\n  \n  this.ctx.font = '8px \"Press Start 2P\"';\n  this.ctx.fillText('PRESS A TO CONTINUE', this.canvas.width / 2, this.canvas.height / 2 + 50);\n}",
    "drawGameOverScreen": "function() {\n  // Semi-transparent overlay\n  this.ctx.fillStyle = 'rgba(100, 0, 0, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Game over text\n  this.ctx.fillStyle = this.gameData.colors.text;\n  this.ctx.font = '20px \"Press Start 2P\"';\n  this.ctx.textAlign = 'center';\n  this.ctx.textBaseline = 'middle';\n  this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 40);\n  \n  this.ctx.font = '10px \"Press Start 2P\"';\n  this.ctx.fillText(`FINAL SCORE: ${this.score}`, this.canvas.width / 2, this.canvas.height / 2 - 10);\n  \n  if (this.score > 0 && this.score === this.highScore) {\n    this.ctx.fillText('NEW HIGH SCORE!', this.canvas.width / 2, this.canvas.height / 2 + 10);\n  } else {\n    this.ctx.fillText(`HIGH SCORE: ${this.highScore}`, this.canvas.width / 2, this.canvas.height / 2 + 10);\n  }\n  \n  this.ctx.fillText(`LEVEL REACHED: ${this.level}`, this.canvas.width / 2, this.canvas.height / 2 + 30);\n  \n  this.ctx.fillText('PRESS A TO RESTART', this.canvas.width / 2, this.canvas.height / 2 + 60);\n}"
  }
}