{
  "id": "worm-deluxe",
  "name": "Worm Game Deluxe",
  "description": "Control the food to feed a hungry worm that moves automatically",
  "icon": "🐛",
  "gameData": {
    "width": 20,
    "height": 18,
    "initialSpeed": 250,
    "wormColor": "#4a4e69",
    "wormBodyColor": "#9a8c98",
    "foodColor": "#c9ada7",
    "backgroundColor": "#f2e9e4",
    "textColor": "#22223b"
  },
  "initializeCode": "function(display) {\n  this.display = display;\n  this.canvas = document.createElement('canvas');\n  this.canvas.width = 280;\n  this.canvas.height = 248;\n  display.appendChild(this.canvas);\n  this.ctx = this.canvas.getContext('2d');\n  \n  this.width = this.gameData.width;\n  this.height = this.gameData.height;\n  this.cellSize = this.canvas.width / this.width;\n  \n  this.worm = [\n    {x: 5, y: Math.floor(this.height/2)},\n    {x: 4, y: Math.floor(this.height/2)},\n    {x: 3, y: Math.floor(this.height/2)}\n  ];\n  \n  this.food = {x: Math.floor(this.width/2), y: Math.floor(this.height/2)};\n  this.score = 0;\n  this.highScore = 0;\n  this.gameOver = false;\n  this.consecutiveCollisions = 0;\n  this.startTime = Date.now();\n  this.timeAlive = 0;\n  this.speed = this.gameData.initialSpeed;\n  this.lastUpdateTime = 0;\n  \n  // AI decision making variables\n  this.lastDirection = {x: 1, y: 0}; // Start moving right\n  \n  this.render();\n}",
  "handleInputCode": "function(button, isPressed) {\n  if (!isPressed || this.gameOver) return;\n  \n  const direction = {\n    up: {x: 0, y: -1},\n    right: {x: 1, y: 0},\n    down: {x: 0, y: 1},\n    left: {x: -1, y: 0}\n  };\n  \n  if (button in direction) {\n    // Move the food in the pressed direction\n    const newX = this.food.x + direction[button].x;\n    const newY = this.food.y + direction[button].y;\n    \n    // Check if the new position is valid\n    if (newX >= 0 && newX < this.width && newY >= 0 && newY < this.height) {\n      this.food.x = newX;\n      this.food.y = newY;\n    }\n  } else if (button === 'a' && this.gameOver) {\n    this.restart();\n  }\n}",
  "updateCode": "function(deltaTime) {\n  if (this.gameOver) return;\n  \n  // Calculate time alive\n  this.timeAlive = Math.floor((Date.now() - this.startTime) / 1000);\n  \n  // Only update worm position at certain intervals based on speed\n  this.lastUpdateTime += deltaTime;\n  if (this.lastUpdateTime < this.speed) return;\n  this.lastUpdateTime = 0;\n  \n  // Move the worm AI\n  this.moveWorm();\n  \n  // Update the game state\n  this.render();\n}",
  "renderCode": "function() {\n  // Clear canvas\n  this.ctx.fillStyle = this.gameData.backgroundColor;\n  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  \n  // Draw worm\n  for (let i = 0; i < this.worm.length; i++) {\n    const segment = this.worm[i];\n    \n    // Head has different color than body\n    this.ctx.fillStyle = i === 0 ? this.gameData.wormColor : this.gameData.wormBodyColor;\n    \n    // Draw segment (circle for head, rounded squares for body)\n    if (i === 0) {\n      // Head as circle\n      this.ctx.beginPath();\n      this.ctx.arc(\n        segment.x * this.cellSize + this.cellSize/2,\n        segment.y * this.cellSize + this.cellSize/2,\n        this.cellSize/2,\n        0,\n        Math.PI * 2\n      );\n      this.ctx.fill();\n    } else {\n      // Body as rounded rectangle\n      this.roundRect(\n        segment.x * this.cellSize,\n        segment.y * this.cellSize,\n        this.cellSize,\n        this.cellSize,\n        this.cellSize/4\n      );\n    }\n  }\n  \n  // Draw food\n  this.ctx.fillStyle = this.gameData.foodColor;\n  this.ctx.beginPath();\n  this.ctx.arc(\n    this.food.x * this.cellSize + this.cellSize/2,\n    this.food.y * this.cellSize + this.cellSize/2,\n    this.cellSize/2,\n    0,\n    Math.PI * 2\n  );\n  this.ctx.fill();\n  \n  // Draw stats\n  this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n  this.ctx.fillRect(0, 0, this.canvas.width, 20);\n  \n  this.ctx.fillStyle = 'white';\n  this.ctx.font = '10px Arial';\n  this.ctx.textAlign = 'left';\n  this.ctx.textBaseline = 'top';\n  this.ctx.fillText(`SCORE: ${this.score}`, 10, 5);\n  \n  this.ctx.textAlign = 'center';\n  this.ctx.fillText(`LENGTH: ${this.worm.length}`, this.canvas.width/2, 5);\n  \n  this.ctx.textAlign = 'right';\n  this.ctx.fillText(`TIME: ${this.timeAlive}s`, this.canvas.width - 10, 5);\n  \n  // Draw game over message\n  if (this.gameOver) {\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = '16px Arial';\n    this.ctx.fillText('GAME OVER', this.canvas.width/2, this.canvas.height/2 - 30);\n    \n    this.ctx.font = '12px Arial';\n    this.ctx.fillText(`SCORE: ${this.score}`, this.canvas.width/2, this.canvas.height/2);\n    this.ctx.fillText(`HIGH SCORE: ${this.highScore}`, this.canvas.width/2, this.canvas.height/2 + 20);\n    this.ctx.fillText('PRESS A TO RESTART', this.canvas.width/2, this.canvas.height/2 + 50);\n  }\n}",
  "cleanupCode": "function() {\n  if (this.canvas && this.canvas.parentNode) {\n    this.canvas.parentNode.removeChild(this.canvas);\n  }\n}",
  "additionalFunctions": {
    "moveWorm": "function() {\n  const head = { ...this.worm[0] };\n  const potentialDirections = [\n    { x: 1, y: 0 },   // right\n    { x: -1, y: 0 },  // left\n    { x: 0, y: 1 },   // down\n    { x: 0, y: -1 }   // up\n  ];\n  \n  // Filter out directions that would cause immediate collision\n  const safeDirections = potentialDirections.filter(dir => {\n    const newHead = { x: head.x + dir.x, y: head.y + dir.y };\n    return !this.isCollision(newHead);\n  });\n  \n  // If there are safe directions, prefer moving towards food\n  if (safeDirections.length > 0) {\n    // Try to prefer direction to food if it's safe\n    const foodDir = this.getDirectionTowardsFood(head);\n    \n    // Find if the food direction is in safe directions\n    const foodDirIndex = safeDirections.findIndex(dir => \n      dir.x === foodDir.x && dir.y === foodDir.y);\n    \n    // Choose direction (prefer food direction if safe)\n    let chosenDirection;\n    if (foodDirIndex !== -1) {\n      chosenDirection = safeDirections[foodDirIndex];\n    } else {\n      // Otherwise pick a random safe direction\n      chosenDirection = safeDirections[Math.floor(Math.random() * safeDirections.length)];\n    }\n    \n    // Update the last direction used\n    this.lastDirection = chosenDirection;\n    \n    // Move worm head\n    head.x += chosenDirection.x;\n    head.y += chosenDirection.y;\n    this.worm.unshift(head);\n    \n    // Check if food is eaten\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score++;\n      // Update high score if needed\n      if (this.score > this.highScore) {\n        this.highScore = this.score;\n      }\n      // Move food to center\n      this.food = {x: Math.floor(this.width/2), y: Math.floor(this.height/2)};\n      // Speed up slightly with each food eaten\n      this.speed = Math.max(this.speed * 0.95, 100);\n    } else {\n      // Remove tail if no food was eaten\n      this.worm.pop();\n    }\n    \n    this.consecutiveCollisions = 0;\n  } else {\n    // No safe moves available\n    this.consecutiveCollisions++;\n    if (this.consecutiveCollisions >= 3) {\n      this.gameOver = true;\n    }\n  }\n}",
    "isCollision": "function(position) {\n  // Check collision with worm body\n  for (let i = 0; i < this.worm.length; i++) {\n    if (position.x === this.worm[i].x && position.y === this.worm[i].y) {\n      return true;\n    }\n  }\n  \n  // Check collision with walls\n  return position.x < 0 || position.x >= this.width || \n         position.y < 0 || position.y >= this.height;\n}",
    "getDirectionTowardsFood": "function(head) {\n  // Get the direction towards the food\n  const dx = this.food.x - head.x;\n  const dy = this.food.y - head.y;\n  \n  // Prioritize the axis with the larger distance\n  if (Math.abs(dx) > Math.abs(dy)) {\n    return { x: Math.sign(dx), y: 0 };\n  } else {\n    return { x: 0, y: Math.sign(dy) };\n  }\n}",
    "restart": "function() {\n  this.worm = [\n    {x: 5, y: Math.floor(this.height/2)},\n    {x: 4, y: Math.floor(this.height/2)},\n    {x: 3, y: Math.floor(this.height/2)}\n  ];\n  \n  this.food = {x: Math.floor(this.width/2), y: Math.floor(this.height/2)};\n  this.score = 0;\n  this.gameOver = false;\n  this.consecutiveCollisions = 0;\n  this.startTime = Date.now();\n  this.timeAlive = 0;\n  this.speed = this.gameData.initialSpeed;\n  this.lastUpdateTime = 0;\n  this.lastDirection = {x: 1, y: 0};\n}",
    "roundRect": "function(x, y, width, height, radius) {\n  if (radius > width / 2) radius = width / 2;\n  if (radius > height / 2) radius = height / 2;\n  \n  this.ctx.beginPath();\n  this.ctx.moveTo(x + radius, y);\n  this.ctx.arcTo(x + width, y, x + width, y + height, radius);\n  this.ctx.arcTo(x + width, y + height, x, y + height, radius);\n  this.ctx.arcTo(x, y + height, x, y, radius);\n  this.ctx.arcTo(x, y, x + width, y, radius);\n  this.ctx.closePath();\n  this.ctx.fill();\n}"
  }
}
