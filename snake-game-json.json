{
  "id": "snake-advanced",
  "name": "Snake Advanced",
  "description": "Classic snake game with power-ups and increasing difficulty",
  "icon": "üêç",
  "gameData": {
    "gridSize": 20,
    "cellSize": 15,
    "initialSpeed": 150,
    "speedIncrease": 5,
    "pointsPerFood": 10,
    "pointsPerPowerUp": 50,
    "snake": [{"x": 10, "y": 10}],
    "direction": {"x": 1, "y": 0},
    "food": {"x": 15, "y": 10},
    "powerUp": null,
    "score": 0,
    "highScore": 0,
    "level": 1,
    "gameOver": false,
    "paused": false,
    "powerUpActive": false,
    "powerUpTimer": 0,
    "walls": []
  },
  "initializeCode": "function(display) {\n    this.display = display;\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.gameData.gridSize * this.gameData.cellSize;\n    this.canvas.height = this.gameData.gridSize * this.gameData.cellSize;\n    this.canvas.style.border = '2px solid #333';\n    this.canvas.style.background = '#111';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    this.canvas.style.imageRendering = 'pixelated';\n    this.display.appendChild(this.canvas);\n    this.ctx = this.canvas.getContext('2d');\n    \n    // Create UI elements\n    this.ui = document.createElement('div');\n    this.ui.style.textAlign = 'center';\n    this.ui.style.marginTop = '10px';\n    this.ui.style.fontFamily = 'monospace';\n    this.ui.style.fontSize = '16px';\n    this.ui.innerHTML = `\n        <div>Score: <span id=\"score\">0</span> | Level: <span id=\"level\">1</span> | High Score: <span id=\"highScore\">0</span></div>\n        <div id=\"gameStatus\" style=\"margin-top: 10px; color: #4fc3f7;\"></div>\n    `;\n    this.display.appendChild(this.ui);\n    \n    // Input handling\n    this.keys = {};\n    this.touchStartX = null;\n    this.touchStartY = null;\n    \n    // Keyboard controls\n    document.addEventListener('keydown', (e) => {\n        this.keys[e.key.toLowerCase()] = true;\n        if (['arrowup', 'arrowdown', 'arrowleft', 'arrowright', ' '].includes(e.key.toLowerCase())) {\n            e.preventDefault();\n        }\n    });\n    \n    document.addEventListener('keyup', (e) => {\n        this.keys[e.key.toLowerCase()] = false;\n    });\n    \n    // Touch controls for mobile\n    this.canvas.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        const touch = e.touches[0];\n        this.touchStartX = touch.clientX;\n        this.touchStartY = touch.clientY;\n    }, { passive: false });\n    \n    this.canvas.addEventListener('touchend', (e) => {\n        e.preventDefault();\n        if (this.touchStartX !== null && this.touchStartY !== null) {\n            const touch = e.changedTouches[0];\n            const deltaX = touch.clientX - this.touchStartX;\n            const deltaY = touch.clientY - this.touchStartY;\n            \n            if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                // Horizontal swipe\n                if (deltaX > 30 && this.gameData.direction.x === 0) {\n                    this.gameData.direction = {x: 1, y: 0};\n                } else if (deltaX < -30 && this.gameData.direction.x === 0) {\n                    this.gameData.direction = {x: -1, y: 0};\n                }\n            } else {\n                // Vertical swipe\n                if (deltaY > 30 && this.gameData.direction.y === 0) {\n                    this.gameData.direction = {x: 0, y: 1};\n                } else if (deltaY < -30 && this.gameData.direction.y === 0) {\n                    this.gameData.direction = {x: 0, y: -1};\n                }\n            }\n            \n            this.touchStartX = null;\n            this.touchStartY = null;\n        }\n    }, { passive: false });\n    \n    // Mouse controls for desktop\n    this.canvas.addEventListener('click', () => {\n        if (this.gameData.gameOver) {\n            this.resetGame();\n        } else if (this.gameData.paused) {\n            this.gameData.paused = false;\n        }\n    });\n    \n    // Save state support\n    window.addEventListener('message', (event) => {\n        if (event.data.type === 'REQUEST_GAME_STATE') {\n            window.parent.postMessage({\n                type: 'GAME_STATE_RESPONSE',\n                state: this.gameData\n            }, '*');\n        }\n        \n        if (event.data.type === 'LOAD_GAME_STATE') {\n            this.gameData = event.data.state;\n            this.updateUI();\n            this.render();\n        }\n        \n        if (event.data.type === 'CHECK_SAVE_SUPPORT') {\n            window.parent.postMessage({\n                type: 'SAVE_SUPPORT_RESPONSE',\n                supported: true\n            }, '*');\n        }\n    });\n    \n    // Generate initial food\n    this.generateFood();\n    \n    // Load high score\n    const savedHighScore = localStorage.getItem('snakeHighScore');\n    if (savedHighScore) {\n        this.gameData.highScore = parseInt(savedHighScore);\n    }\n    \n    this.updateUI();\n    this.lastUpdate = Date.now();\n    this.updateInterval = this.gameData.initialSpeed;\n}",
  "updateCode": "function(deltaTime) {\n    if (this.gameData.gameOver || this.gameData.paused) return;\n    \n    // Handle keyboard input\n    if (this.keys['arrowup'] || this.keys['w']) {\n        if (this.gameData.direction.y === 0) {\n            this.gameData.direction = {x: 0, y: -1};\n        }\n    } else if (this.keys['arrowdown'] || this.keys['s']) {\n        if (this.gameData.direction.y === 0) {\n            this.gameData.direction = {x: 0, y: 1};\n        }\n    } else if (this.keys['arrowleft'] || this.keys['a']) {\n        if (this.gameData.direction.x === 0) {\n            this.gameData.direction = {x: -1, y: 0};\n        }\n    } else if (this.keys['arrowright'] || this.keys['d']) {\n        if (this.gameData.direction.x === 0) {\n            this.gameData.direction = {x: 1, y: 0};\n        }\n    }\n    \n    if (this.keys[' ']) {\n        this.gameData.paused = !this.gameData.paused;\n        this.keys[' '] = false;\n    }\n    \n    // Update power-up timer\n    if (this.gameData.powerUpActive) {\n        this.gameData.powerUpTimer--;\n        if (this.gameData.powerUpTimer <= 0) {\n            this.gameData.powerUpActive = false;\n        }\n    }\n    \n    // Move snake based on speed\n    const now = Date.now();\n    if (now - this.lastUpdate >= this.updateInterval) {\n        this.moveSnake();\n        this.lastUpdate = now;\n    }\n}",
  "renderCode": "function() {\n    // Clear canvas\n    this.ctx.fillStyle = '#111';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw grid\n    this.ctx.strokeStyle = '#222';\n    this.ctx.lineWidth = 1;\n    for (let i = 0; i <= this.gameData.gridSize; i++) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(i * this.gameData.cellSize, 0);\n        this.ctx.lineTo(i * this.gameData.cellSize, this.canvas.height);\n        this.ctx.stroke();\n        \n        this.ctx.beginPath();\n        this.ctx.moveTo(0, i * this.gameData.cellSize);\n        this.ctx.lineTo(this.canvas.width, i * this.gameData.cellSize);\n        this.ctx.stroke();\n    }\n    \n    // Draw walls\n    this.ctx.fillStyle = '#666';\n    this.gameData.walls.forEach(wall => {\n        this.ctx.fillRect(\n            wall.x * this.gameData.cellSize,\n            wall.y * this.gameData.cellSize,\n            this.gameData.cellSize - 2,\n            this.gameData.cellSize - 2\n        );\n    });\n    \n    // Draw snake\n    this.gameData.snake.forEach((segment, index) => {\n        if (index === 0) {\n            // Head\n            this.ctx.fillStyle = this.gameData.powerUpActive ? '#FFD700' : '#4fc3f7';\n        } else {\n            // Body\n            this.ctx.fillStyle = this.gameData.powerUpActive ? '#FFA500' : '#29b6f6';\n        }\n        \n        this.ctx.fillRect(\n            segment.x * this.gameData.cellSize + 1,\n            segment.y * this.gameData.cellSize + 1,\n            this.gameData.cellSize - 2,\n            this.gameData.cellSize - 2\n        );\n    });\n    \n    // Draw food\n    this.ctx.fillStyle = '#4CAF50';\n    this.ctx.beginPath();\n    this.ctx.arc(\n        this.gameData.food.x * this.gameData.cellSize + this.gameData.cellSize / 2,\n        this.gameData.food.y * this.gameData.cellSize + this.gameData.cellSize / 2,\n        this.gameData.cellSize / 2 - 2,\n        0,\n        Math.PI * 2\n    );\n    this.ctx.fill();\n    \n    // Draw power-up\n    if (this.gameData.powerUp) {\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.fillRect(\n            this.gameData.powerUp.x * this.gameData.cellSize + 2,\n            this.gameData.powerUp.y * this.gameData.cellSize + 2,\n            this.gameData.cellSize - 4,\n            this.gameData.cellSize - 4\n        );\n    }\n    \n    // Draw game over screen\n    if (this.gameData.gameOver) {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = '24px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 20);\n        \n        this.ctx.font = '16px monospace';\n        this.ctx.fillText('Click or tap to restart', this.canvas.width / 2, this.canvas.height / 2 + 20);\n    }\n    \n    // Draw pause screen\n    if (this.gameData.paused && !this.gameData.gameOver) {\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = '24px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('PAUSED', this.canvas.width / 2, this.canvas.height / 2);\n    }\n}",
  "handleInputCode": "function(button, isPressed) {\n    switch(button) {\n        case 'up':\n            if (isPressed && this.gameData.direction.y === 0) {\n                this.gameData.direction = {x: 0, y: -1};\n            }\n            break;\n        case 'down':\n            if (isPressed && this.gameData.direction.y === 0) {\n                this.gameData.direction = {x: 0, y: 1};\n            }\n            break;\n        case 'left':\n            if (isPressed && this.gameData.direction.x === 0) {\n                this.gameData.direction = {x: -1, y: 0};\n            }\n            break;\n        case 'right':\n            if (isPressed && this.gameData.direction.x === 0) {\n                this.gameData.direction = {x: 1, y: 0};\n            }\n            break;\n        case 'a':\n        case 'b':\n            if (isPressed) {\n                if (this.gameData.gameOver) {\n                    this.resetGame();\n                } else {\n                    this.gameData.paused = !this.gameData.paused;\n                }\n            }\n            break;\n    }\n}",
  "cleanupCode": "function() {\n    if (this.canvas && this.canvas.parentNode) {\n        this.canvas.parentNode.removeChild(this.canvas);\n    }\n    if (this.ui && this.ui.parentNode) {\n        this.ui.parentNode.removeChild(this.ui);\n    }\n}",
  "additionalFunctions": {
    "moveSnake": "function() {\n    const head = {...this.gameData.snake[0]};\n    head.x += this.gameData.direction.x;\n    head.y += this.gameData.direction.y;\n    \n    // Check walls\n    if (head.x < 0 || head.x >= this.gameData.gridSize ||\n        head.y < 0 || head.y >= this.gameData.gridSize) {\n        this.gameOver();\n        return;\n    }\n    \n    // Check wall collision\n    if (this.gameData.walls.some(wall => wall.x === head.x && wall.y === head.y)) {\n        this.gameOver();\n        return;\n    }\n    \n    // Check self collision\n    if (this.gameData.snake.some(segment => segment.x === head.x && segment.y === head.y)) {\n        if (!this.gameData.powerUpActive) {\n            this.gameOver();\n            return;\n        }\n    }\n    \n    this.gameData.snake.unshift(head);\n    \n    // Check food collision\n    if (head.x === this.gameData.food.x && head.y === this.gameData.food.y) {\n        this.gameData.score += this.gameData.pointsPerFood;\n        this.generateFood();\n        \n        // Level up every 100 points\n        if (this.gameData.score % 100 === 0) {\n            this.levelUp();\n        }\n        \n        // Spawn power-up occasionally\n        if (Math.random() < 0.1 && !this.gameData.powerUp) {\n            this.generatePowerUp();\n        }\n    } else {\n        this.gameData.snake.pop();\n    }\n    \n    // Check power-up collision\n    if (this.gameData.powerUp && \n        head.x === this.gameData.powerUp.x && \n        head.y === this.gameData.powerUp.y) {\n        this.gameData.score += this.gameData.pointsPerPowerUp;\n        this.gameData.powerUpActive = true;\n        this.gameData.powerUpTimer = 100;\n        this.gameData.powerUp = null;\n    }\n    \n    this.updateUI();\n}",
    "generateFood": "function() {\n    let newFood;\n    do {\n        newFood = {\n            x: Math.floor(Math.random() * this.gameData.gridSize),\n            y: Math.floor(Math.random() * this.gameData.gridSize)\n        };\n    } while (\n        this.gameData.snake.some(segment => segment.x === newFood.x && segment.y === newFood.y) ||\n        this.gameData.walls.some(wall => wall.x === newFood.x && wall.y === newFood.y)\n    );\n    \n    this.gameData.food = newFood;\n}",
    "generatePowerUp": "function() {\n    let newPowerUp;\n    do {\n        newPowerUp = {\n            x: Math.floor(Math.random() * this.gameData.gridSize),\n            y: Math.floor(Math.random() * this.gameData.gridSize)\n        };\n    } while (\n        this.gameData.snake.some(segment => segment.x === newPowerUp.x && segment.y === newPowerUp.y) ||\n        this.gameData.walls.some(wall => wall.x === newPowerUp.x && wall.y === newPowerUp.y) ||\n        (this.gameData.food.x === newPowerUp.x && this.gameData.food.y === newPowerUp.y)\n    );\n    \n    this.gameData.powerUp = newPowerUp;\n}",
    "levelUp": "function() {\n    this.gameData.level++;\n    this.updateInterval = Math.max(50, this.gameData.initialSpeed - (this.gameData.level - 1) * this.gameData.speedIncrease);\n    \n    // Add walls at higher levels\n    if (this.gameData.level % 3 === 0) {\n        const numWalls = Math.min(this.gameData.level / 3, 10);\n        this.gameData.walls = [];\n        for (let i = 0; i < numWalls; i++) {\n            let wall;\n            do {\n                wall = {\n                    x: Math.floor(Math.random() * this.gameData.gridSize),\n                    y: Math.floor(Math.random() * this.gameData.gridSize)\n                };\n            } while (\n                this.gameData.snake.some(segment => segment.x === wall.x && segment.y === wall.y) ||\n                (this.gameData.food.x === wall.x && this.gameData.food.y === wall.y) ||\n                (Math.abs(wall.x - 10) < 3 && Math.abs(wall.y - 10) < 3)\n            );\n            this.gameData.walls.push(wall);\n        }\n    }\n    \n    document.getElementById('gameStatus').textContent = `Level ${this.gameData.level}!`;\n    setTimeout(() => {\n        document.getElementById('gameStatus').textContent = '';\n    }, 2000);\n}",
    "gameOver": "function() {\n    this.gameData.gameOver = true;\n    if (this.gameData.score > this.gameData.highScore) {\n        this.gameData.highScore = this.gameData.score;\n        localStorage.setItem('snakeHighScore', this.gameData.highScore);\n        document.getElementById('gameStatus').textContent = 'New High Score!';\n    }\n    this.updateUI();\n}",
    "resetGame": "function() {\n    this.gameData.snake = [{x: 10, y: 10}];\n    this.gameData.direction = {x: 1, y: 0};\n    this.gameData.score = 0;\n    this.gameData.level = 1;\n    this.gameData.gameOver = false;\n    this.gameData.paused = false;\n    this.gameData.powerUpActive = false;\n    this.gameData.powerUpTimer = 0;\n    this.gameData.powerUp = null;\n    this.gameData.walls = [];\n    this.updateInterval = this.gameData.initialSpeed;\n    this.generateFood();\n    this.updateUI();\n    document.getElementById('gameStatus').textContent = '';\n}",
    "updateUI": "function() {\n    document.getElementById('score').textContent = this.gameData.score;\n    document.getElementById('level').textContent = this.gameData.level;\n    document.getElementById('highScore').textContent = this.gameData.highScore;\n    \n    if (this.gameData.powerUpActive) {\n        document.getElementById('gameStatus').textContent = `Power-up: ${Math.ceil(this.gameData.powerUpTimer / 10)}s`;\n    }\n}"
  }
}